---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jan 2024 03:09:55 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - ASP.NET_SessionId=rcvokmcako1nzvbjqacv5gma; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 845aebd90b2036a3-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>


<html id="masterPageHeader" xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>
	eSCRIBE Published Meetings
</title>
    
    <!-- Syncfusion datepicker https://ej2.syncfusion.com/javascript/documentation/daterangepicker/accessibility/ -->
    <link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-base/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-buttons/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-lists/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-calendars/styles/material.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/ej2/20.1.58/dist/ej2.min.js" type="text/javascript"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.1/fullcalendar.min.css" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" />
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" /><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" /><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/Meeting?v=AVpWBphpdxyAs8EnVqIgfGPcIy964yCGHE8PBR5W7yY1"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Registering Syncfusion license key
            ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhhQlFac1dJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxRdkNjWn5ec3NVQGVYVUU=');

            $("#masterPageHeader").attr("lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
            $("#masterPageHeader").attr("xml:lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
                $("body").on("show.bs.dropdown", "*", function (e) {
                    e.stopPropagation();

                    var button = $(this);
                    var dropdown = button.parent();
                    var menu = dropdown.find("ul");
                    var container = dropdown.closest("main, html, window");

                    dropdown.removeClass("dropup");

                    var containertop = container.offset().top;
                    var containerheight = container.height(); 
                    var buttontop = button.offset().top - containertop;
                    var buttonbottom = buttontop + button.outerHeight(true); // - containertop;

                    menu.css("max-height", "")

                    var menuheight = menu.outerHeight(true);
                    var menubottom = buttonbottom + menuheight;

                    if (menubottom > containerheight) {
                        // bottom of the menu off of the page //

                        if (menuheight < buttontop) {
                            // enough space to open menu in up direction //
                            dropdown.addClass("dropup");
                        }
                        else {
                            // not enough space, limit height of menu //
                            if (buttontop > (containerheight - buttonbottom)) {
                                // more space above //
                                dropdown.addClass("dropup");
                                menu.css("max-height", (buttontop - 5) + "px");
                            }
                            else {
                                // more space below //
                                menu.css("max-height", (containerheight - buttonbottom - 5) + "px");
                            }
                        }
                    }
                });
            });
    </script>

    <link href="/Content/css?v=uTDadAVN2kXgv_IlKa38IoLBJEDhJyqBD_0SO6hOWTg1" rel="stylesheet"/>
<link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="/Content/base/css?v=oCcL4rnES8adxKB9fiU4F5ioECU5LeuE9IMbfR7Y_k81" rel="stylesheet"/>

    <script src="/bundles/MeetingList?v=e4Ptuni7g8Q8v8c3RRk44Y6R6z_V_2NH3cMLZjoVIUU1"></script>



    <style>

        #footer .copyright {
            text-align: center;
            font-size: 12px;
            color: #999;
        }
    </style>

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> </head>
<body>
    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> <form name="aspnetForm" method="post" action="./" id="aspnetForm">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="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" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="8F06231E" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="wtYZnsNqe7I/0zhYgkD2RmwJNuNeF7cbN/vh39ZHipok6IaF+wb8xRELziZGp1P1nuf7EfwBmKpwPMpVlV+d+iK5oLDhl2a2uqoELWdJy8TQj3heu0/lXOPs4WQ3IbTKLPj1H3l9lWEtfshXZ0Z/eP+W0XzIX6g5rruXjnmrwO9/P2nxj+9mmBl6yiszomzTMXx0as5vtbFMy8MzyWCx+hQ71U2zd7p0DNyGM22wDyKO+T7tLN0hQcxzE3NN0e71x/DcVWASxNuQg3ywzRxqCty1iDISXOOE+nDRXAvjhoUcTinzNhBDoUc7fADfd1FQ9XGQfXbU01h0GKMRrZRchrWVFblJtbLYE1Rr2UE4BGWpUnRHOALT8VsIrC3lZV/qARIUK4iVy193G23Jo1k+RmhB9dpX+mCv0jDipGiiTh0K9Lum5hs+bAD5KJPduBTFADMycoJ6TMcOZ2I8nXZMfhRDsRHPy646oB6YsXuOfBLhxpgbnjLuRFVG0jpPBeG99cspm/nx+IsQHJpLJvda/MGE51YFvBv6ROi/ggbTGi6s/doK7VA9R9CTQPR6wlTRBV1bswR6Zeeo2MSYQ7RgLCQnDHtqidgcJC2tySTQWgrA+eNNx8A+TV/D5oUAHE3mas1irLSXwnXze3yiM9QiN5wN+GQWwhnwwpmRW4oLnSjXCZTfQG83zjrbU7RmKemQ6CkbSH9gBkMwKlvldYbfyXxWkhAhI/98IvCdknVC6dlGDqJ8ppD66uLzwXE0GIbzmlKMAaYKQdc2+ZyxX7w0149eEHvjOnvnkbOnJM4X1/7weU6L1kTr4I/CYpcH8GOn0FJv5oFB+GBR60Uuz09waYzy8dT8uRNK9yMSSNepTkvZ7bbiLwNtbNku3WC0O0nQ4i5GY0Bh1OQaUvkGlZzoTDRUtyMmvUAligyTq5NqAcCEIku/ZMmrlnVwM5Q0rAHVag3XsF6gtu+/CkLz8zOiHibhCk0t1zToYban0NKGfnkaxfPvZFOibifuyjxUyDyYsCYq1mDL9VDW4tP4/FOPQdRxt1DzLXjPfhYpwRuTQGRt3vsw+xpwSvJKl+0u5jthKJ0QJGpdpv/urDQTs6LIkViNUzJwZP89Xv5AopNiu4nPdoNkU75NKVu0hlst2H1xHdsFOvF3XJ8EF5xIHxxXQT6k6HqjysQGm55Qh5F+qSNvMODA/csBWPnnJ1B9hUlTmR11sv22lpjcm7+ykcjuI0T+xM7pIv337N1yiEsRQT4qx0BtS3B+5B7FvtnVkcYes9sMpNuayTX/M3XiMp64zqBi0k7AmOWBFesEJAt3gwT6ka3cqDtG2XX6sY5GzUqjWBuBsl3IhpIQLAdblEbRAIRaey/lmBz50jo2jKglg2TwmxU/30alomoAtdSAAC5H3rmmIPk5JPLh0z1ysax73xDKHS83GOqjOSKvn+ttKFEqDKipLVnPCzLIaHeCFf8BE/3NwdhIFuWFCOa6tew0/PghZm7bErjJpPgkuJvfTfwct9bcKut7OQYSSGWXpSg9jo/R2qXxvo7IaGOFRlFTuYL47fuJGceXLcAeCmQrBj3+zz870S4kYcSEuAKuYgf5DTgl1QJGmCCGmhBLtZFCY1pb8TvtoRAAiRLXMgAFa2JtN2FcAtLtSzdvO4ltwE//NUfXa07LGsJkgjVbh+rDhLljbVNyyLk8Z+6Jvx+cDzTJZNrR+XJ9whKW0EpzNalS2HwmIyU1k0GjoLGw6gqXu2RWOlQ0igOQP58M5UEtCcZAK8b+bSdf/kxG6o2UmfDc7Qvq4A+yJo0ZHQIdJIeIee6QMs5Zg3yXKX/SbUjLOPdbXgEL5i2EFIACtL9d89/n+MnQ9oJ5lryGjY0wKGVdVjnBTOWb8u5wBoWg/TLcOlWLOwKKb07U5jeYyfqUNAgYDttlllpQaXJuh775H77rkRkwDhcnX7Vt1y9I2zaNrOX+wXhAcMT+I19clqOPfeDD" />
        

        
        

        <div class="container-fluid" id="containerclass">
            
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
    

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.js"></script>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" />
    <div id="ctl00_MainContent_MeetingListUpdateProgress" style="display:none;">
	
            <div class="loaderPosition">
                <span class="la la-spinner la-spin loaderDesign"></span>
            </div>
        
</div>
    <style>
        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
                display: block;
                content: "";
        }

        .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
        }

       .ss-multi-selected {
           max-height:700px;
           overflow: scroll ;
           overflow-y: hidden;
           overflow-x: hidden;
       }
       .fc-day-grid-event .fc-content
       {
               white-space: nowrap;
               overflow: hidden
       }
         #calendar .fc-view-container{
           max-height:inherit;
           padding-bottom:30px;
           overflow:visible;
       }
        #divDateRangeFilterPopup .daterangepicker{min-width:490px;}

        @media only screen and (device-width: 768px) {
            #divDateRangeFilterPopup .daterangepicker {
                position: absolute;
                left: -200px !important;
                right: 900px !important;
                /*display: block !important;*/
                min-width: 490px;
            }

            .dropdown-menu dropdown-menu-right {
                display: block !important;
            }

            #PastMeetingTitle.pull-left {
                margin-left: 10px !important;
            }

            #PastMeetingFilterButton.btn-group {
                margin-right: 10px !important;
            }
        }

        .inputtable th {
            padding-right: 12px;
            vertical-align: top;
        }

        h1 {
            font-size: 2rem!important;
            font-weight: 700!important;
        }

        h2 {
            font-weight: 500!important;
        }
    </style>
    <div style="min-height: 100vh;">
    <header>
        <div class="row d-flex justify-content-center ">
            <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
                <div style="margin-left: 15px; margin-right: 15px;">
                    <div class="input-group">
                                            <div class="input-group-prepend  d-flex" id="adv-search">
                        <a class="skip-to-content-link" href="">
                            Skip to content
                        </a>
                        <div class='form-group has-feedback has-clear searchGroup ' style="flex-basis: 100%;">
                            <label class="sr-only" for="ctl00_MainContent_txtSearch"><span>Search</span></label>
                            <input name="ctl00$MainContent$txtSearch" id="ctl00_MainContent_txtSearch" class="form-control" class="SearchText" onkeydown="return searchEnter(event);" placeholder="Search" aria-labelledby="ctl00_MainContent_txtSearch" type="search" style="max-width: none; border-right: 0;" />
                            <span class="form-control-clear glyphicon glyphicon-remove form-control-feedback hidden"> </span>
                        </div>

                        <button role="button" aria-label="search" id="searchBtnMain" class='input-group-append searchGroup ' style="border-bottom-right-radius: 4px !important; border-top-right-radius: 4px !important; cursor: pointer;" type="button" onclick="searchData();">
                            <span tabindex="0" class="input-group-text input-group-addon" onkeydown="return searchEnter(event);" aria-label="search button"><span class="fa fa-search fontIcon" aria-hidden="true"></span></span>
                        </button>
                        <div id="filterIcon" class='input-group-btn input-group-addon '>
                            <div class="btn-group" role="group" aria-label="Filter">
                                <div class="dropdown dropdown-lg" >
                                    <button type="button" id="btnFilter" class="btn filter-icon dropdown-toggle dropdown-toggle-off" data-toggle="dropdown" aria-label="Filter" aria-expanded="false" style="margin-left: .75em;"><span class="la la-filter"></span><span class="fa fa-caret-down"></span></button>
                                    <div id="divDateRangeFilterPopup" class="dropdown-menu dropdown-menu-right" role="menu">
                                        <div class="form-group filterlabel" role="menuitem">
                                            <label for="ctl00_MainContent_FilterByDate">
                                                Filter By Date</label><br />
                                            <div class="input-group-prepend srch-input-group">
                                                <input name="ctl00$MainContent$FilterByDate" type="text" id="ctl00_MainContent_FilterByDate" class="form-control FilterByDate" onpaste="return false;" style="max-width: none; background-color: #fff;" />
                                                <!--<span class="input-group-append control-clear">
                                                    <span class="input-group-text input-group-addon"><span class="fa fa-times fontIcon" aria-hidden="true"></span></span>
                                                </span>-->
                                            </div>
                                        </div>
                                        <div class="form-group" role="menuitem">
                                            <label for="ctl00_MainContent_lblMultiSelect">
                                                Filter By Meeting Type</label><br />
                                            <select size="4" name="ctl00$MainContent$lblMultiSelect" multiple="multiple" id="ctl00_MainContent_lblMultiSelect" class="MeetingTypeListbox" onchange="ChangeFilterFlag();">
	<option value="1*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-1-1*ef58236b-fce9-45cc-becf-c31c7a95d20f">Accessibility Advisory Committee</option>
	<option value="3*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-3*ef58236b-fce9-45cc-becf-c31c7a95d20f">Agriculture and Rural Affairs Committee</option>
	<option value="6*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-6*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture and Recreation Advisory Committee</option>
	<option value="7*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-7*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture, Heritage and Recreation Advisory Committee</option>
	<option value="9*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-9*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Committee</option>
	<option value="10*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-10*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Sub-Committee</option>
	<option value="11*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-11*ef58236b-fce9-45cc-becf-c31c7a95d20f">Auditor General Hiring Panel</option>
	<option value="24*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-24-24*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Board of Health</option>
	<option value="130*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-10-130*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Built Heritage Committee</option>
	<option value="12*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-12*ef58236b-fce9-45cc-becf-c31c7a95d20f">Built Heritage Sub-Committee</option>
	<option value="5*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-5-5*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">City Council</option>
	<option value="136*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-16-136*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">City Manager Hiring Panel</option>
	<option value="14*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-14-14*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Committee of Adjustment</option>
	<option value="16*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-16*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 1</option>
	<option value="17*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-17*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 2</option>
	<option value="18*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-18*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 3</option>
	<option value="19*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-19*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Revision</option>
	<option value="20*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-20*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community and Protective Services Committee</option>
	<option value="21*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-21*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community Service Advisory Committee</option>
	<option value="131*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-11-131*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Community Services Committee</option>
	<option value="15*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-15*ef58236b-fce9-45cc-becf-c31c7a95d20f">Council Francophone Caucus</option>
	<option value="22*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-22*ef58236b-fce9-45cc-becf-c31c7a95d20f">Court of Revision</option>
	<option value="65*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-5-65*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Debenture Committee</option>
	<option value="141*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-21-141*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Election Compliance Audit Committee</option>
	<option value="132*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-12-132*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Emergency Preparedness and Protective Services Committee</option>
	<option value="133*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-13-133*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Environment and Climate Change Committee</option>
	<option value="25*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-25-25*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment and Climate Protection Committee</option>
	<option value="26*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-26-26*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment Committee</option>
	<option value="27*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-27-27*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environmental Stewardship Advisory Committee</option>
	<option value="129*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-9-129*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Finance and Corporate Services Committee</option>
	<option value="28*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-28-28*ef58236b-fce9-45cc-becf-c31c7a95d20f">Finance and Economic Development Committee</option>
	<option value="32*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-32*ef58236b-fce9-45cc-becf-c31c7a95d20f">French Language Services Advisory Committee</option>
	<option value="137*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-17-137*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">General Manager of Planning, Real Estate and Economic Development Hiring Panel</option>
	<option value="20*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-20-20*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Information Technology Sub-Committee</option>
	<option value="146*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-26-146*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Audit Committee and Transit Commission</option>
	<option value="124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs</option>
	<option value="149*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-29-149*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Finance and Corporate Services and Planning and Housing Committee</option>
	<option value="34*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-4-34*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Audit Sub-Committee</option>
	<option value="29*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-29-29*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee</option>
	<option value="49*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-49*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee</option>
	<option value="36*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-36*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee</option>
	<option value="126*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-126*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting of Planning Committee and Built Heritage Sub-committee</option>
	<option value="50*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-50*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee</option>
	<option value="37*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-37*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee</option>
	<option value="51*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-51*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Planning Committee and Community and Protective Services Committee</option>
	<option value="142*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-22-142*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Housing and Agriculture and Rural Affairs Committee</option>
	<option value="150*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-30-150*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Housing and Environment and Climate Change Committee</option>
	<option value="151*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-1-151*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Transit Commission and Light Rail Sub-Committee</option>
	<option value="38*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-8-38*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Transportation Committee and Transit Commission</option>
	<option value="135*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-15-135*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Light Rail Sub-Committee</option>
	<option value="128*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-8-128*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Nominating Committee</option>
	<option value="41*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-41*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Built Heritage Advisory Committee</option>
	<option value="42*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-42*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board</option>
	<option value="132*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-132*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board - Special Meeting</option>
	<option value="43*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-43*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Public Library Board</option>
	<option value="44*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-14-44*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Advisory Committee</option>
	<option value="134*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-14-134*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Planning and Housing Committee</option>
	<option value="68*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-8-68*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Planning Committee</option>
	<option value="46*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-46*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Complaints Committee</option>
	<option value="47*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-47*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Finance and Audit Committee</option>
	<option value="48*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-48*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Human Resources Committee</option>
	<option value="119*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-29-119*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Police Services Board Policy and Governance Committee</option>
	<option value="127*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-127*ef58236b-fce9-45cc-becf-c31c7a95d20f">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee</option>
	<option value="28*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-28-28*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Standing Committee on Environmental Protection, Water and Waste Management</option>
	<option value="53*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-53*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transit Commission</option>
	<option value="2*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-2*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transportation Committee</option>

</select>
                                        </div>
                                        <div class="form-group" id="FilterByConflictMember" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByConflictMember">
                                                Filter By Conflict Member</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByConflictMember" multiple="multiple" id="ctl00_MainContent_lbFilterByConflictMember" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        
                                        <div class="form-group" id="FilterByStage" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStage">
                                                Filter By Stage</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStage" multiple="multiple" id="ctl00_MainContent_lbFilterByStage" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByStatus" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStatus">
                                                Filter By Status</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStatus" multiple="multiple" id="ctl00_MainContent_lbFilterByStatus" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByDepartment" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByDepartment">
                                                Filter By Department</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByDepartment" multiple="multiple" id="ctl00_MainContent_lbFilterByDepartment" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        <div class="form-group" id="FilterByKeyword" role="menuitem">
                                            <label for="ctl00_MainContent_txtFilterByKeyword">
                                                Filter By Keyword</label><br />
                                            <div class="input-group srch-input-group">
                                                <input name="ctl00$MainContent$txtFilterByKeyword" type="text" id="ctl00_MainContent_txtFilterByKeyword" class="form-control" />
                                                <span class="input-group-addon control-clear">
                                                    <span class="glyphicon glyphicon-remove"></span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 Modalbuttons">
                                                <button type="button" id="btnResetFilters" class="btn btn-reset" onclick="ResetFilters();">
                                                    Reset Filters</button>
                                            </div>
                                            <div class="col-md-6 Modalbuttons">
                                                <a onclick="return postbackButtonClick();" id="FilterResults" class="btn btn-primary btn-orange results" href="javascript:__doPostBack(&#39;ctl00$MainContent$FilterResults&#39;,&#39;&#39;)">Filter Results</a>
                                                <button type="button" id="btnFilterResults" class="btn-primary btn-orange" onclick="searchData();">
                                                    Filter Results</button>
                                                <button type="button" id="btnFunnelFilterResults" class="btn-primary btn-orange" >
                                                    Filter Results</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
    </header>

    <main id="maincontent" class="row d-flex justify-content-center">
        <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
            <div style="margin-left: 15px; margin-right: 15px;" class="child">
                <div>
                    <div id="calendar" class=''></div>
                    <div id="cal-list" class="fc" style="display: none;">
                        <div role="navigation" aria-label="other meetings options" class="fc-toolbar">
                            <div id="ctl00_MainContent_MonthMenu" class="fc-left">
	
                                    <input type="hidden" name="ctl00$MainContent$StartMonthDate" id="ctl00_MainContent_StartMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$EndMonthDate" id="ctl00_MainContent_EndMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$CurrentMonth" id="ctl00_MainContent_CurrentMonth" />
                                    <input type="hidden" name="ctl00$MainContent$LastDay" id="ctl00_MainContent_LastDay" />
                                    <input type="hidden" name="ctl00$MainContent$IsFilterList" id="ctl00_MainContent_IsFilterList" value="0" />
                                    <input type="hidden" name="ctl00$MainContent$IsChangeInMonth" id="ctl00_MainContent_IsChangeInMonth" value="0" />
                                    <button type="button" id="btnPreviousMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Previous Month"><span class="fc-icon fc-icon-left-single-arrow"></span></button>
                                    
                                    <!--<h1 style="display:none" aria-hidden="true" id="monthText">
                                        <span id="ctl00_MainContent_lblMonthText"></span>
                                    </h1>-->
                                    <button type="button" id="btnNextMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Next Month"><span class="fc-icon fc-icon-right-single-arrow"></span></button>
                                
</div>

                            <div id="mergedListHeader" class="fc-left">
                                <h1>Upcoming Meetings</h1>
                            </div>

                            <div id="pastHeader" class="fc-left">
                                <h1>Past Meetings</h1>
                            </div>
                            <div class="AgendaItemHistoryHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-historyitem" class="title-icons search-resourcelibrary AgendaItemHistorySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterAgendaItemHistoryLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="AgendaItemHistorySearchField" aria-labelledby="FilterAgendaItemHistryLabel">
                                    </div>
                                </span>
                            </div>

                            <div class="LegislationHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-legislation" class="title-icons search-resourcelibrary LegislationLibrarySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterLegislationLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="LegislationSearchField" aria-labelledby="FilterLegislationLabel">
                                    </div>
                                </span>
                            </div>

                            <div id="header-buttons" class="fc-right" role="group" aria-label="event views">
                                <button type="button" id="btnCalendarView" class="fc-month-button calendarView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Calendar</button>
                                <button type="button" id="btnMergedListView" class="fc-mergedListViewButton-button mergedListView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    
                                    List
                                </button>
                                <button type="button" id="btnListView" class="fc-myCustomButton-button listView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Upcoming</button>
                                <button type="button" id="btnPastView" class="fc-pastViewButton-button pastView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Past
                                </button>
                                <button type="button" id="btnConflictsView" class="fc-myCustomConflictsButton-button conflicts fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Conflicts Registry</button>
                                
                                
                            </div>
                             <div id="filter-options" style="display:none;">
                                <span id="filter-meeting-collapse" class="fa fa-caret-right" data-toggle="collapse" data-target="#filter-meeting-docment" onclick="onFilterMeetingDocument();" style="float:left !important; line-height:1.5;" ></span>
                                <span style="cursor:pointer;" data-toggle="collapse" data-target="#filter-meeting-docment" onclick="onFilterMeetingDocument();"><b>  Filter Options: </b></span>
                                <div id="filter-meeting-docment" class="collapse col-lg-12" style="left: 15px">
                                    <div class="row">
                                        <div class="col-lg-4">
                                            <div class="row">
                                                <div class="col-lg-5">
                                                    <span><b> Meeting Documents: </b></span>
                                                </div>
                                                <div class="col-lg-7">
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="AgendaCover" class="chkMeetingDocuments common-filter" />
                                                        <span>Agenda Cover Page</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Agenda" class="chkMeetingDocuments common-filter"/>
                                                        <span>Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Addendum" class="chkMeetingDocuments common-filter"/>
                                                        <span>Addendum</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Merged" class="chkMeetingDocuments common-filter"/>
                                                        <span>Revised Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="PostAgenda" class="chkMeetingDocuments common-filter"/>
                                                        <span>Post Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="PostMinutes" class="chkMeetingDocuments common-filter"/>
                                                        <span>Minutes</span>
                                                    </div>
                                                     <div class="col-lg-12">
                                                        <input type="checkbox" value="AdditionalDocuments" class="chkMeetingDocuments common-filter"/>
                                                        <span>Additional Documents</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="MergedCover" class="chkMeetingDocuments common-filter"/>
                                                        <span>Revised Agenda Cover Page</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-lg-8">
                                            <div class="row">
                                                 <div class="col-lg-2">
                                                     <span><b>Also search in: </b></span>
                                                </div>
                                                <div class="col-lg-10">
                                                     <div class="col-lg-12">
                                                        <input type="checkbox" id="chkConflicts" value="Conflicts" class="common-filter"/>
                                                        <span>Conflicts</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" id="chkComments" value="PublicComments" class=" common-filter"/>
                                                        <span>Public Comments</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;">
                                        <div class="col-lg-2">
                                            <span><b>Document Types:</b></span>
                                        </div>
                                        <div class="col-lg-4">
                                            <div class="col-lg-12">
                                                <input type="checkbox" value=".html" class="chkDocumentTypes common-filter" />
                                                <span>HTML</span>
                                            </div>
                                                <div class="col-lg-12">
                                                <input type="checkbox" value=".pdf" class="chkDocumentTypes common-filter"/>
                                                <span>PDF</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;" id="languageFilterDv">
                                        <div class="col-lg-2">
                                            <span><b>Language: </b></span>
                                        </div>
                                        <div class="col-lg-2">
                                            <div class="col-lg-12">
                                                <input type="checkbox" value="0,9" class="chkLanguage"/>
                                                <span>English </span>
                                            </div>
                                                <div class="col-lg-12">
                                                <input type="checkbox" value="0,12" class="chkLanguage"/>
                                                <span>French </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;">
                                          <div class="col-lg-2">
                                            <button type="button" class="fc-button fc-state-default fc-corner-left fc-corner-right" id="btnSaveFilterCriteria" onclick="return searchData();" >
                                                Save Filter
                                            </button>
                                          </div>
                                          
                                    </div>
                                </div>

                            </div>
                            <div class="fc-center" style="display: none;"></div>
                            <div class="fc-clear" style="display: none;"></div>
                        </div>
                        <div class="row">
                            <div role="region" aria-label="Meetings list" id="all-list" class="col-md-12">
                                <div id="ctl00_MainContent_MeetingTypeList">
	
                                        <input type="hidden" name="ctl00$MainContent$IsFilter" id="ctl00_MainContent_IsFilter" value="0" />
                                        <input type="hidden" name="ctl00$MainContent$scrollIndexer" id="ctl00_MainContent_scrollIndexer" value="1" />
                                                    
                                                    <a id="ctl00_MainContent_btnShowMore" class="d-none" href="javascript:__doPostBack(&#39;ctl00$MainContent$btnShowMore&#39;,&#39;&#39;)">Show More</a>
                                                    <span id="ctl00_MainContent_meetingsPaging"></span>

                                    
</div>
                            </div>

                            <div role="region" aria-label="Search result" id="searchresults" class="col-md-12" style="display: none;">
                                <div class="ms-WPBody noindex" style="width: 100%">
                                    <div class="srch-results">
                                         <table id="searchTableTemp" style="background-color:dimgrey; color:white; border: none; width: 100%; word-wrap: break-word; word-break: break-word; display:none;">
                                            <thead>
                                                <tr>
                                                   <th style="float:left; padding-left: 5px;">Name</th>
                                                    <th>Date</th>
                                                    <th>Document Type</th>
                                                </tr>
                                            </thead>
                                        </table>
                                        <table id="searchTable" style="border: none; width: 100%; word-wrap: break-word; word-break: break-word;">
                                            <thead>
                                                <tr style="display: none;">
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div role="region" aria-label="Registered Conflicts" id="all-conflicts-list" class="col-md-12">
                                <table id="table-conflicts-list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th class="tablepadding" scope="col" style="width:24%" id="conflict">
                                                Member</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingType">
                                                Meeting Type</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingDate">
                                                Meeting Date</th>
                                            <th class="tablepadding" scope="col" style="width:20%" id="agendaItem">
                                                Agenda Item</th>
                                            <th class="tablepadding" scope="col" style="width:8%" class="no-sort" id="viewRegConflict"><span style="visibility: hidden; display:none;">Conflicts Icon</span>Conflict</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-legislation-list" role="region" aria-label="Legislation History" class="col-md-12">
                                <style type="text/css">
                                    #table-legislation-list th {
                                        text-align: left;
                                    }

                                    .LegislationHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .LegislationHeader .searchtable {
                                        position: relative;
                                    }

                                    .LegislationHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                     .vertical-middle {
                                        vertical-align: middle !important;
                                    }

                                    .txtDocumentType {
                                        border-top-right-radius: 5px;
                                        border-bottom-right-radius: 5px;
                                    }

                                    .vertical-middle {
                                        vertical-align: middle !important;
                                    }

                                    .txtDocumentType {
                                        border-top-right-radius: 5px;
                                        border-bottom-right-radius: 5px;
                                    }
                                </style>

                                <table id="table-legislation-list-no-longer-use" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="legislation-icon-th" aria-label="file icon" scope="col" style="width: 5%" class="no-sort"><span style="visibility: hidden">legislation icon</span></th>
                                            <th id="legislation-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="legislation-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Legislative Text
                                            </th>
                                            <th id="legislation-department-th" class="legWordWrap tablepadding" scope="col" style="width: 15%">
                                                Department
                                            </th>

                                            <th id="legislation-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="legislation-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="agendaitemhistory-list" role="region" aria-label="Agenda Item History" class="col-md-12">
                                <style type="text/css">
                                    #table-agendaitemhistory-list th {
                                        text-align: left;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .AgendaItemHistoryHeader .searchtable {
                                        position: relative;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-agendaitemhistory-list" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="agendaitemhistory-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="agendaitemhistory-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Title
                                            </th>
                                            <th id="agendaitemhistory-department-th" class="legWordWrap tablepadding" scope="col">
                                                Department
                                            </th>
                                            <th id="agendaitemhistory-meetingtype-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Type
                                            </th>
                                            <th id="agendaitemhistory-meetingdate-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Date
                                            </th>
                                            <th id="agendaitemhistory-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="agendaitemhistory-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-merged-list" class="col-md-12">
                                <div id="merged-list" class="table-responsive dataTable no-footer" style="width: 100%;">
                                    <div role="region" aria-label="List of Upcoming Meetings" class="upcoming-meetings">
                                        
                                                
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 14 December 2023' href='VideoStream.aspx?MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8c647e01-2ebd-4d31-8107-0da6d1ebffc4' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 14 December 2023' href='VideoStream.aspx?MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162608' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D699ccb01-0f7d-4629-95ba-d122cdad4fcb' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162132' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Built Heritage Committee 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Built Heritage Committee 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Built Heritage Committee 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 14 December 2023' href='VideoStream.aspx?MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8093dd45-3d05-4cc8-8b7c-ff31ed028923' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 14 December 2023' href='VideoStream.aspx?MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162741' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-122"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>Accessibility Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Accessibility Advisory Committee 03 January 2024' href='VideoStream.aspx?MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 6:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db481ec2a-7fe4-49c2-babc-3edab4c5a047' aria-hidden='true' aria-label='Share Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='Meeting.aspx?Id=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='Meeting.aspx?Id=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Accessibility Advisory Committee 03 January 2024' href='VideoStream.aspx?MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162335' title="Cancellation French - AAC 16 janvier 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - AAC 16 janvier 2024.pdf Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - AAC 16 janvier 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162336' title="Cancellation English - AAC January 16, 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - AAC January 16, 2024.pdf Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - AAC January 16, 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D788fff63-2ffc-4b60-b862-8efe1c1c8394' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Planning and Housing Committee 17 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162264' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Planning and Housing Committee 17 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Planning and Housing Committee 17 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 14 December 2023' href='VideoStream.aspx?MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 17, 2024 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D43704983-1cbf-4e90-a405-8c04401b0ce4' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 14 December 2023' href='VideoStream.aspx?MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 17 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162367' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 17 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 17 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, January 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D101ee98f-e083-4ef5-adad-e6c8613c4b84' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162265' title="Cancellation English - EPPSC 18 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - EPPSC 18 Jan 2024.pdf Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - EPPSC 18 Jan 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162266' title="Cancellation French - EPPSC 18 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - EPPSC 18 Jan 2024.pdf Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - EPPSC 18 Jan 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, January 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc952cd54-c94d-4efb-9a03-a08d1b947f6e' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, January 24, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=752109c0-f20e-47f7-9b65-158e58be9383' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 24, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D752109c0-f20e-47f7-9b65-158e58be9383' aria-hidden='true' aria-label='Share City Council Wednesday, January 24, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=752109c0-f20e-47f7-9b65-158e58be9383' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, January 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D47bf172f-ac10-493b-a67a-092f1c31e415' aria-hidden='true' aria-label='Share Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162235' title="Cancellation English - TRC 25 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - TRC 25 Jan 2024.pdf Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - TRC 25 Jan 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162236' title="Cancellation French - TRC 25 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - TRC 25 Jan 2024.pdf Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - TRC 25 Jan 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 31, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='Meeting.aspx?Id=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='Meeting.aspx?Id=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df26cd378-b12c-47dd-8775-3a3b0666f996' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 06, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0d1c82b0-368e-417e-8ee7-dd3eba9705fd' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, February 07, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' aria-hidden='true' aria-label='Share City Council Wednesday, February 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, February 08, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' aria-hidden='true' aria-label='Share Transit Commission Thursday, February 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 08, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Def28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='Meeting.aspx?Id=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='Meeting.aspx?Id=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, February 12, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, February 12, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dadcd00c7-7a9e-4e35-b906-38b3e1da4728' aria-hidden='true' aria-label='Share Board of Health Monday, February 12, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da4ebb9eb-98bf-49fb-a643-1090b681436f' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 13, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc281fabc-edb5-455e-9ec5-ff0101120cc1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 14, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4ef2cdcc-33b2-4eed-8634-f997b73fe93a' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 15, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De003fc3e-e8af-400c-83a5-48805aff3e1f' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 20, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52764a30-cabd-4441-ae93-20f0fa702d5e' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, February 21, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 21, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc2ca2ca1-0f18-4133-af9c-5c7f135f1486' aria-hidden='true' aria-label='Share City Council Wednesday, February 21, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, February 22, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da38ab5e6-e639-43ad-94ee-dd23e7b24a40' aria-hidden='true' aria-label='Share Transportation Committee Thursday, February 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-152"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM'>Planning Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Advisory Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 22, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Colonel By Room, 110 Laurier Avenue West, and by electronic participation'>Colonel By Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db4ca0617-81f9-4f2f-b7d8-bcbed3449324' aria-hidden='true' aria-label='Share Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='Meeting.aspx?Id=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='Meeting.aspx?Id=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Advisory Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, February 26, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De05ce412-c8dd-4fe8-a4df-2bd509fdc778' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='Meeting.aspx?Id=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='Meeting.aspx?Id=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dadaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 29, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' aria-hidden='true' aria-label='Share Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='Meeting.aspx?Id=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='Meeting.aspx?Id=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162307' title="Notice of Date Change BIL - Audit Committee.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Notice of Date Change BIL - Audit Committee.pdf Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Notice of Date Change BIL - Audit Committee</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 04, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df4de9172-b75f-4619-a786-b38398cbdf23' aria-hidden='true' aria-label='Share Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D75c92485-bf8d-4475-b76b-6fadf3b5417f' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, March 06, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 06, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8b81219e-148a-4414-a02e-72b1bbbc05eb' aria-hidden='true' aria-label='Share City Council Wednesday, March 06, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 07 December 2023' href='VideoStream.aspx?MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 07 December 2023' href='VideoStream.aspx?MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Friday, March 08, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 09 January 2024' href='VideoStream.aspx?MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Friday, March 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1c65e15e-0d82-4cea-8c6b-5d38d39398fd' aria-hidden='true' aria-label='Share Audit Committee Friday, March 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 09 January 2024' href='VideoStream.aspx?MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 12, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8019a378-0e7b-4cf4-9dca-47d907b0ef96' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D58cb7118-858e-49e3-905a-796ab6fe98ca' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Monday, March 18, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9d2c673d-5283-4469-8b9d-7ddebbb6d318' aria-hidden='true' aria-label='Share Transit Commission Monday, March 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5e838400-5511-4a4d-99be-47c4b155f48d' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, March 20, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 20, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D046630df-5ab0-4fcc-820b-53e82cc2027a' aria-hidden='true' aria-label='Share City Council Wednesday, March 20, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='Meeting.aspx?Id=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='Meeting.aspx?Id=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd11c4a8a-b1bc-4b53-b87d-241aa5e0683d' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 25, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D664bd9cb-9171-4171-ab84-3c21476b6495' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db203ac6d-5c2a-4752-9b2d-019f2584198a' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, March 28, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da3954153-cab7-4b0a-bea8-deacdbd8c7a1' aria-hidden='true' aria-label='Share Transportation Committee Thursday, March 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=93d69530-d017-48af-a75d-5244692670cc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 02, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D93d69530-d017-48af-a75d-5244692670cc' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=93d69530-d017-48af-a75d-5244692670cc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, April 03, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 03, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3abc02b-9f54-4127-a5f2-84db8252dbfe' aria-hidden='true' aria-label='Share City Council Wednesday, April 03, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Ded31ac61-39c9-4ae3-8d70-f63d35c4d91d' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd8790ca-ed41-4466-9766-60c56c2fbee6' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 09, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8752a132-2255-4e6b-a6a0-c244fd81cd34' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=281cf799-d75c-498c-b582-911b96809fa9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D281cf799-d75c-498c-b582-911b96809fa9' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=281cf799-d75c-498c-b582-911b96809fa9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, April 11, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 11, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' aria-hidden='true' aria-label='Share Transit Commission Thursday, April 11, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, April 15, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=95b18589-2549-427e-823e-6df486e1106c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, April 15, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D95b18589-2549-427e-823e-6df486e1106c' aria-hidden='true' aria-label='Share Board of Health Monday, April 15, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='Meeting.aspx?Id=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='Meeting.aspx?Id=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=95b18589-2549-427e-823e-6df486e1106c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D31eafba8-15fd-4327-a237-7917c789ddf2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, April 17, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 17, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' aria-hidden='true' aria-label='Share City Council Wednesday, April 17, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='Meeting.aspx?Id=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='Meeting.aspx?Id=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=810197f9-4ba1-4196-a975-1afec1e53021' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, April 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D810197f9-4ba1-4196-a975-1afec1e53021' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=810197f9-4ba1-4196-a975-1afec1e53021' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 23, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D256cb79c-c8ca-4889-b016-665c3ae5d576' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, April 25, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bc57fb6-cd27-400e-b06b-ed6051a2e40e' aria-hidden='true' aria-label='Share Transportation Committee Thursday, April 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 01, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' aria-hidden='true' aria-label='Share City Council Wednesday, May 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 02, 2024 @ 10:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7654692c-e3a3-42db-bfed-52e922dc8acc' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='Meeting.aspx?Id=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='Meeting.aspx?Id=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 07, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da514d875-4c32-4650-9830-89a7a9a770e2' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd34f5519-5ad0-4c24-8096-118234a877f8' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, May 09, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D057eafda-178d-43a4-beb8-5f3b0b03b3de' aria-hidden='true' aria-label='Share Transit Commission Thursday, May 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 09, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='Meeting.aspx?Id=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='Meeting.aspx?Id=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 14, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52da8377-369d-48f1-b54a-b45b5f0ea020' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 14, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D235f67b2-ff2b-4112-bf74-3b4b36261ee7' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='Meeting.aspx?Id=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='Meeting.aspx?Id=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 15, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 15, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf60e77a-6a82-49b7-a765-6f6240ee2c8d' aria-hidden='true' aria-label='Share City Council Wednesday, May 15, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2c226df6-bdfb-4475-8031-a0401dd0308f' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7852ab33-7954-497c-b6ea-a24772f08cf2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D42654a53-0d23-4db6-814c-f6d9df0f5b27' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, May 23, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 23, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd0d9ed5-0d37-484f-8f52-8cffc1389856' aria-hidden='true' aria-label='Share Transportation Committee Thursday, May 23, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf4c900e-8f1e-49c8-857e-d2cdb1758f94' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 29, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 29, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd222c97-c027-4c36-8b09-8a66e9dd4d8d' aria-hidden='true' aria-label='Share City Council Wednesday, May 29, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 04, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D821ddb60-febf-47a6-b6af-364553b1bec5' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1237110e-b0f6-4b5a-85e7-c586e01804b0' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 06, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D485b6664-5f06-4a27-8006-6b5ec05fc052' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Monday, June 10, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' aria-hidden='true' aria-label='Share Audit Committee Monday, June 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 11, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bac4135-8dfe-4d05-9f59-95e083a8cd88' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 11, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1637c236-791e-4e9e-85f9-a2802a5067ef' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='Meeting.aspx?Id=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='Meeting.aspx?Id=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, June 12, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 12, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Daf49c3ed-8099-408c-8f62-6d99ae315dad' aria-hidden='true' aria-label='Share City Council Wednesday, June 12, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='Meeting.aspx?Id=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='Meeting.aspx?Id=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, June 13, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=2b84f262-1915-4249-8573-4edae7898e71' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2b84f262-1915-4249-8573-4edae7898e71' aria-hidden='true' aria-label='Share Transit Commission Thursday, June 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=2b84f262-1915-4249-8573-4edae7898e71' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, June 17, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 17, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dee6d6fc3-62ec-4d7e-8a01-406f0a654467' aria-hidden='true' aria-label='Share Board of Health Monday, June 17, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='Meeting.aspx?Id=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='Meeting.aspx?Id=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D282286b9-da22-4dd9-8ae2-83e9ebbc10f2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D90e989c4-5ede-4192-a813-3a71049a7c77' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 20, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3df51c0-4904-43a7-9699-0960a1084be9' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=265ea823-10ee-4428-b01b-729bdef706ce' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 24, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D265ea823-10ee-4428-b01b-729bdef706ce' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='Meeting.aspx?Id=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='Meeting.aspx?Id=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=265ea823-10ee-4428-b01b-729bdef706ce' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2b518b58-f70e-415e-a90a-8b7f614372c2' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, June 26, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 26, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcc5202bd-d5dd-45e5-ad73-e40e21f14454' aria-hidden='true' aria-label='Share City Council Wednesday, June 26, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, June 27, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' aria-hidden='true' aria-label='Share Transportation Committee Thursday, June 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 02, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a7c9439-2578-4899-8b3e-d10d430f7ece' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, July 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc4a530ca-196a-44cc-8a34-8bb6f94473d4' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf4bebdf-6117-4ad6-9175-7c62114e62f8' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 09, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D67587d56-e263-480c-a232-c4e8d1c8b7f1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, July 10, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 10, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df7927e1b-535a-42d1-9583-6e1fdfacddba' aria-hidden='true' aria-label='Share City Council Wednesday, July 10, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, July 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, July 24, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 24, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8287fdc8-e07a-401e-8e8d-78bee2ad7c53' aria-hidden='true' aria-label='Share City Council Wednesday, July 24, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D19b5ae68-597b-4b2e-9a1d-711b572c8a14' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, August 07, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D314c2a45-8edf-4abb-8db7-a73d69cb5726' aria-hidden='true' aria-label='Share City Council Wednesday, August 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10ae6291-009f-4e0e-97ea-d206beda8a4d' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=a527e923-da92-4d20-9300-d4f2a947e332' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 13, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da527e923-da92-4d20-9300-d4f2a947e332' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=a527e923-da92-4d20-9300-d4f2a947e332' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, August 21, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 21, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dae15d54b-7c98-4cbf-8906-3894fce74f8e' aria-hidden='true' aria-label='Share City Council Wednesday, August 21, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, August 22, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5565084e-50ec-4216-ae75-d3c1cf8c5149' aria-hidden='true' aria-label='Share Transportation Committee Thursday, August 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9258226c-36fd-4cb7-b855-ecda307f6c20' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, September 04, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' aria-hidden='true' aria-label='Share City Council Wednesday, September 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 05, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8209cf9f-eba7-42ad-914f-6d9673b994df' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D15045d75-9820-4cf0-b265-cad62c7f5b3f' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 10, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De0ce2087-2dd2-407a-8f3b-3253bc2aa944' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='Meeting.aspx?Id=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='Meeting.aspx?Id=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, September 12, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 12, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D60f32882-0e46-4dd5-9fe2-6fd9b88547c5' aria-hidden='true' aria-label='Share Transit Commission Thursday, September 12, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 12, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc7507766-a2c6-4a6b-8c5a-00b9b098d90c' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='Meeting.aspx?Id=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='Meeting.aspx?Id=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, September 16, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 16, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D55f50adf-c3f7-4676-a708-62710a1aceae' aria-hidden='true' aria-label='Share Board of Health Monday, September 16, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='Meeting.aspx?Id=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='Meeting.aspx?Id=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db0b7668a-64e1-4271-a607-991a68855dc5' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, September 18, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 18, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3145eb2-e6de-4ae5-946f-637a1c291bc3' aria-hidden='true' aria-label='Share City Council Wednesday, September 18, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 23, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd5e36f83-54fa-4b25-a5a8-57d7c4c45650' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='Meeting.aspx?Id=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='Meeting.aspx?Id=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=40af4304-2061-472b-a4e5-3de677482ea8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 24, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D40af4304-2061-472b-a4e5-3de677482ea8' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=40af4304-2061-472b-a4e5-3de677482ea8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, September 26, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D77c4478f-0aff-4184-8da5-1e1a67ddade3' aria-hidden='true' aria-label='Share Transportation Committee Thursday, September 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 01, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df8995ccf-86ce-4b30-964c-257ab9f4bb8c' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 02, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 02, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D534308ac-8f54-4e99-a7ed-5e14200e10e5' aria-hidden='true' aria-label='Share City Council Wednesday, October 02, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='Meeting.aspx?Id=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='Meeting.aspx?Id=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 03, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcb1815a8-edbc-4a26-a4be-51fada9d064b' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D020b7719-a8d7-44ef-9eb0-fa383e8a5db3' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=29630604-1862-400a-ab4c-8dee737a21ad' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 08, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D29630604-1862-400a-ab4c-8dee737a21ad' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='Meeting.aspx?Id=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='Meeting.aspx?Id=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=29630604-1862-400a-ab4c-8dee737a21ad' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, October 10, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' aria-hidden='true' aria-label='Share Transit Commission Thursday, October 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 15, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1710403d-4622-4fd1-b04f-647e4a5a0a06' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 16, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=a2eae498-343f-4085-b829-727d4a885c21' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 16, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da2eae498-343f-4085-b829-727d4a885c21' aria-hidden='true' aria-label='Share City Council Wednesday, October 16, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='Meeting.aspx?Id=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='Meeting.aspx?Id=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=a2eae498-343f-4085-b829-727d4a885c21' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D054f0e31-0ee9-4046-8a7d-02848de2cc35' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dec8b1035-e9cc-46c7-b857-8b28f48834ef' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, October 24, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 24, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df14ed038-8584-4af2-8e3f-3255bb3fe92d' aria-hidden='true' aria-label='Share Transportation Committee Thursday, October 24, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, October 28, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10d833d0-cf46-4a65-9ae1-a74d415894e2' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='Meeting.aspx?Id=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='Meeting.aspx?Id=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 30, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 30, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3efcc478-d9c4-4d92-a0f7-b92814759074' aria-hidden='true' aria-label='Share City Council Wednesday, October 30, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, November 04, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 04, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd0371028-c1e9-42c4-ba4b-53a489506757' aria-hidden='true' aria-label='Share Board of Health Monday, November 04, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='Meeting.aspx?Id=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='Meeting.aspx?Id=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 05, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4fbd6684-cad1-4207-a703-82cb54eb0fb9' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='Meeting.aspx?Id=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='Meeting.aspx?Id=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D102002dd-3a94-4e58-bdbb-9dd4453b9121' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bea244bd-87e5-4161-85d1-29f070625be3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 12, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbea244bd-87e5-4161-85d1-29f070625be3' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bea244bd-87e5-4161-85d1-29f070625be3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, November 13, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 13, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8199af2b-2ef9-46e1-8f61-7b494c88c680' aria-hidden='true' aria-label='Share City Council Wednesday, November 13, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 14, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D674b9885-cbf4-442c-b6fd-d4fb6b91623c' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='Meeting.aspx?Id=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='Meeting.aspx?Id=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Monday, November 18, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8e3dd510-587d-48f4-b958-9eb35d3df1b0' aria-hidden='true' aria-label='Share Transit Commission Monday, November 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4b7a582f-5455-4a32-b810-67fa2e98d0a2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West'>Champlain Room, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D19a67ea4-2205-4413-83c6-cb5fd95e8ca3' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Monday, November 25, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D046bf135-3af9-4226-9f0e-16d643f95bcf' aria-hidden='true' aria-label='Share Audit Committee Monday, November 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 25, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D25bc0c93-b53b-4219-8b8d-ee904dd72b14' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1c32fa41-8130-4b47-97bc-92a96925e65d' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, November 27, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 27, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D20b160a8-7484-4d2d-ad5b-d9b941c66d48' aria-hidden='true' aria-label='Share City Council Wednesday, November 27, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='Meeting.aspx?Id=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='Meeting.aspx?Id=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, November 28, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D681c0a84-aab5-4449-8f5a-c974713190ca' aria-hidden='true' aria-label='Share Transportation Committee Thursday, November 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, December 02, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 02, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' aria-hidden='true' aria-label='Share Board of Health Monday, December 02, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='Meeting.aspx?Id=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='Meeting.aspx?Id=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=6497d250-c798-46af-a95e-79704e754d14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D6497d250-c798-46af-a95e-79704e754d14' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=6497d250-c798-46af-a95e-79704e754d14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 03, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10700da8-db1f-4761-9160-bb2cfeefb063' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='Meeting.aspx?Id=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='Meeting.aspx?Id=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, December 05, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5d97860d-1141-4f1b-ae54-1bcd1f753030' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dfe04c767-9a78-48a3-8f4d-aee0e682e1de' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, December 11, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, December 11, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5a93081f-f432-4b19-bf3d-6f1c33750c31' aria-hidden='true' aria-label='Share City Council Wednesday, December 11, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 16, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da60886b2-8c65-48a5-b384-49b26f798e0e' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='Meeting.aspx?Id=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='Meeting.aspx?Id=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                            
                                    </div>
                                </div>

                                <div id="lazyLoadContainer">
                                    <span id="loadMoreMeetings" tabindex="0">Click here to see more meetings</span>
                                </div>

                                <div class="past-meetings-region" role="region" aria-label="List of Past Meetings">
                                    <div class="row">
                                    <div class="col-md-12 xtra-lists">
                                        <h2 id="PastMeetingTitle" class="pull-left">Past Meetings</h2>
                                        <div class ="pull-right" style="margin-bottom: 1.5em">
                                            <select class="YearFilterOption" aria-label="Select Year">
                                                
                                                        
                                                        <option data-year='0'>
                                                            All&nbsp;(2523)
                                                            
                                                        </option>
                                                    
                                                        <option data-year='2024'>
                                                            
                                                            2024&nbsp;(2)
                                                        </option>
                                                    
                                                        <option data-year='2023'>
                                                            
                                                            2023&nbsp;(296)
                                                        </option>
                                                    
                                                        <option data-year='2022'>
                                                            
                                                            2022&nbsp;(292)
                                                        </option>
                                                    
                                                        <option data-year='2021'>
                                                            
                                                            2021&nbsp;(261)
                                                        </option>
                                                    
                                                        <option data-year='2020'>
                                                            
                                                            2020&nbsp;(224)
                                                        </option>
                                                    
                                                        <option data-year='2019'>
                                                            
                                                            2019&nbsp;(255)
                                                        </option>
                                                    
                                                        <option data-year='2018'>
                                                            
                                                            2018&nbsp;(212)
                                                        </option>
                                                    
                                                        <option data-year='2017'>
                                                            
                                                            2017&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2016'>
                                                            
                                                            2016&nbsp;(233)
                                                        </option>
                                                    
                                                        <option data-year='2015'>
                                                            
                                                            2015&nbsp;(169)
                                                        </option>
                                                    
                                                        <option data-year='2014'>
                                                            
                                                            2014&nbsp;(122)
                                                        </option>
                                                    
                                                        <option data-year='2013'>
                                                            
                                                            2013&nbsp;(158)
                                                        </option>
                                                    
                                                        <option data-year='2012'>
                                                            
                                                            2012&nbsp;(69)
                                                        </option>
                                                    
                                                    
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="past-meetings" id="PastMeetingTypesAccordian">
                                    
                                            
                                            <div class="MeetingTypeList" id='MeetingTypeList0'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Accessibility+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse0">
                                                    <span class="MeetingTypeNameText">Accessibility Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>63</span><span class='Year Year2013'>5</span><span class='Year Year2014'>5</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>7</span><span class='Year Year2021'>7</span><span class='Year Year2022'>7</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse0" aria-labelledby="MeetingTypeList0" data-toggle-id=".collapse0">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Accessibility Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList1'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse1">
                                                    <span class="MeetingTypeNameText">Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>118</span><span class='Year Year2012'>6</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>11</span><span class='Year Year2016'>10</span><span class='Year Year2017'>9</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>9</span><span class='Year Year2021'>9</span><span class='Year Year2022'>11</span><span class='Year Year2023'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse1" aria-labelledby="MeetingTypeList1" data-toggle-id=".collapse1">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList2'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse2">
                                                    <span class="MeetingTypeNameText">Arts, Culture and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>3</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse2" aria-labelledby="MeetingTypeList2" data-toggle-id=".collapse2">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList3'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture%2c+Heritage+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse3">
                                                    <span class="MeetingTypeNameText">Arts, Culture, Heritage and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>19</span><span class='Year Year2013'>4</span><span class='Year Year2014'>1</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse3" aria-labelledby="MeetingTypeList3" data-toggle-id=".collapse3">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture, Heritage and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList4'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse4">
                                                    <span class="MeetingTypeNameText">Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>37</span><span class='Year Year2015'>6</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>6</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse4" aria-labelledby="MeetingTypeList4" data-toggle-id=".collapse4">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList5'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse5">
                                                    <span class="MeetingTypeNameText">Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>6</span><span class='Year Year2012'>2</span><span class='Year Year2013'>2</span><span class='Year Year2014'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse5" aria-labelledby="MeetingTypeList5" data-toggle-id=".collapse5">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList6'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Auditor+General+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse6">
                                                    <span class="MeetingTypeNameText">Auditor General Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2013'>3</span><span class='Year Year2020'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse6" aria-labelledby="MeetingTypeList6" data-toggle-id=".collapse6">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Auditor General Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList7'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse7">
                                                    <span class="MeetingTypeNameText">Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>62</span><span class='Year Year2015'>7</span><span class='Year Year2016'>6</span><span class='Year Year2017'>7</span><span class='Year Year2018'>7</span><span class='Year Year2019'>7</span><span class='Year Year2020'>6</span><span class='Year Year2021'>6</span><span class='Year Year2022'>9</span><span class='Year Year2023'>7</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse7" aria-labelledby="MeetingTypeList7" data-toggle-id=".collapse7">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList8'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse8">
                                                    <span class="MeetingTypeNameText">Built Heritage Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2023'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse8" aria-labelledby="MeetingTypeList8" data-toggle-id=".collapse8">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList9'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse9">
                                                    <span class="MeetingTypeNameText">Built Heritage Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>99</span><span class='Year Year2013'>10</span><span class='Year Year2014'>9</span><span class='Year Year2015'>9</span><span class='Year Year2016'>8</span><span class='Year Year2017'>8</span><span class='Year Year2018'>10</span><span class='Year Year2019'>9</span><span class='Year Year2020'>9</span><span class='Year Year2021'>12</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse9" aria-labelledby="MeetingTypeList9" data-toggle-id=".collapse9">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList10'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse10">
                                                    <span class="MeetingTypeNameText">City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>248</span><span class='Year Year2012'>11</span><span class='Year Year2013'>20</span><span class='Year Year2014'>18</span><span class='Year Year2015'>21</span><span class='Year Year2016'>20</span><span class='Year Year2017'>19</span><span class='Year Year2018'>19</span><span class='Year Year2019'>21</span><span class='Year Year2020'>21</span><span class='Year Year2021'>21</span><span class='Year Year2022'>29</span><span class='Year Year2023'>27</span><span class='Year Year2024'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse10" aria-labelledby="MeetingTypeList10" data-toggle-id=".collapse10">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList11'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Manager+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse11">
                                                    <span class="MeetingTypeNameText">City Manager Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse11" aria-labelledby="MeetingTypeList11" data-toggle-id=".collapse11">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Manager Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList12'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment" id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse12">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse12" aria-labelledby="MeetingTypeList12" data-toggle-id=".collapse12">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList13'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+1" id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse13">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 1&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>26</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse13" aria-labelledby="MeetingTypeList13" data-toggle-id=".collapse13">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 1">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList14'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+2" id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse14">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 2&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2015'>1</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>25</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse14" aria-labelledby="MeetingTypeList14" data-toggle-id=".collapse14">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 2">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList15'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+3" id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse15">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 3&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>21</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>27</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse15" aria-labelledby="MeetingTypeList15" data-toggle-id=".collapse15">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 3">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList16'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse16">
                                                    <span class="MeetingTypeNameText">Committee of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2013'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse16" aria-labelledby="MeetingTypeList16" data-toggle-id=".collapse16">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList17'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse17">
                                                    <span class="MeetingTypeNameText">Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>86</span><span class='Year Year2012'>4</span><span class='Year Year2013'>11</span><span class='Year Year2014'>6</span><span class='Year Year2015'>9</span><span class='Year Year2016'>11</span><span class='Year Year2017'>9</span><span class='Year Year2018'>7</span><span class='Year Year2019'>9</span><span class='Year Year2020'>6</span><span class='Year Year2021'>8</span><span class='Year Year2022'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse17" aria-labelledby="MeetingTypeList17" data-toggle-id=".collapse17">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList18'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Service+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse18">
                                                    <span class="MeetingTypeNameText">Community Service Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2013'>4</span><span class='Year Year2014'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse18" aria-labelledby="MeetingTypeList18" data-toggle-id=".collapse18">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Service Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList19'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse19">
                                                    <span class="MeetingTypeNameText">Community Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2023'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse19" aria-labelledby="MeetingTypeList19" data-toggle-id=".collapse19">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList20'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Council+Francophone+Caucus" id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse20">
                                                    <span class="MeetingTypeNameText">Council Francophone Caucus&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse20" aria-labelledby="MeetingTypeList20" data-toggle-id=".collapse20">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Council Francophone Caucus">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList21'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Court+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse21">
                                                    <span class="MeetingTypeNameText">Court of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>6</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse21" aria-labelledby="MeetingTypeList21" data-toggle-id=".collapse21">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Court of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList22'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Debenture+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse22">
                                                    <span class="MeetingTypeNameText">Debenture Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>2</span><span class='Year Year2021'>1</span><span class='Year Year2022'>4</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse22" aria-labelledby="MeetingTypeList22" data-toggle-id=".collapse22">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Debenture Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList23'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Election+Compliance+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse23">
                                                    <span class="MeetingTypeNameText">Election Compliance Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>17</span><span class='Year Year2015'>5</span><span class='Year Year2016'>1</span><span class='Year Year2019'>7</span><span class='Year Year2020'>1</span><span class='Year Year2023'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse23" aria-labelledby="MeetingTypeList23" data-toggle-id=".collapse23">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Election Compliance Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList24'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Emergency+Preparedness+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse24">
                                                    <span class="MeetingTypeNameText">Emergency Preparedness and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse24" aria-labelledby="MeetingTypeList24" data-toggle-id=".collapse24">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Emergency Preparedness and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList25'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Change+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse25">
                                                    <span class="MeetingTypeNameText">Environment and Climate Change Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse25" aria-labelledby="MeetingTypeList25" data-toggle-id=".collapse25">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Change Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList26'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Protection+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse26">
                                                    <span class="MeetingTypeNameText">Environment and Climate Protection Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>12</span><span class='Year Year2017'>6</span><span class='Year Year2018'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse26" aria-labelledby="MeetingTypeList26" data-toggle-id=".collapse26">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Protection Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList27'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse27">
                                                    <span class="MeetingTypeNameText">Environment Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2012'>4</span><span class='Year Year2013'>7</span><span class='Year Year2014'>6</span><span class='Year Year2015'>6</span><span class='Year Year2016'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse27" aria-labelledby="MeetingTypeList27" data-toggle-id=".collapse27">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList28'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environmental+Stewardship+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse28">
                                                    <span class="MeetingTypeNameText">Environmental Stewardship Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>36</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>3</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>4</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse28" aria-labelledby="MeetingTypeList28" data-toggle-id=".collapse28">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environmental Stewardship Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList29'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Corporate+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse29">
                                                    <span class="MeetingTypeNameText">Finance and Corporate Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>10</span><span class='Year Year2023'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse29" aria-labelledby="MeetingTypeList29" data-toggle-id=".collapse29">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Corporate Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList30'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Economic+Development+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse30">
                                                    <span class="MeetingTypeNameText">Finance and Economic Development Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>112</span><span class='Year Year2012'>6</span><span class='Year Year2013'>12</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>13</span><span class='Year Year2017'>10</span><span class='Year Year2018'>8</span><span class='Year Year2019'>11</span><span class='Year Year2020'>9</span><span class='Year Year2021'>14</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse30" aria-labelledby="MeetingTypeList30" data-toggle-id=".collapse30">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Economic Development Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList31'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse31">
                                                    <span class="MeetingTypeNameText">French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>36</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>3</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse31" aria-labelledby="MeetingTypeList31" data-toggle-id=".collapse31">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList32'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=General+Manager+of+Planning%2c+Real+Estate+and+Economic+Development+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse32">
                                                    <span class="MeetingTypeNameText">General Manager of Planning, Real Estate and Economic Development Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse32" aria-labelledby="MeetingTypeList32" data-toggle-id=".collapse32">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="General Manager of Planning, Real Estate and Economic Development Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList33'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Information+Technology+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse33">
                                                    <span class="MeetingTypeNameText">Information Technology Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2012'>4</span><span class='Year Year2013'>5</span><span class='Year Year2014'>3</span><span class='Year Year2015'>4</span><span class='Year Year2016'>2</span><span class='Year Year2017'>2</span><span class='Year Year2018'>1</span><span class='Year Year2019'>4</span><span class='Year Year2020'>2</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse33" aria-labelledby="MeetingTypeList33" data-toggle-id=".collapse33">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Information Technology Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList34'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Audit+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse34">
                                                    <span class="MeetingTypeNameText">Joint Audit Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse34" aria-labelledby="MeetingTypeList34" data-toggle-id=".collapse34">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Audit Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList35'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Environment%2c+Water+and+Waste+Management+and+Agriculture+and+Rural+Affairs" id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse35">
                                                    <span class="MeetingTypeNameText">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse35" aria-labelledby="MeetingTypeList35" data-toggle-id=".collapse35">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Environment, Water and Waste Management and Agriculture and Rural Affairs">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList36'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Corporate+Services+and+Planning+and+Housing+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse36">
                                                    <span class="MeetingTypeNameText">Joint Finance and Corporate Services and Planning and Housing Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse36" aria-labelledby="MeetingTypeList36" data-toggle-id=".collapse36">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Corporate Services and Planning and Housing Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList37'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse37">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2014'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse37" aria-labelledby="MeetingTypeList37" data-toggle-id=".collapse37">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList38'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Governance+Renewal+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse38">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2012'>2</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse38" aria-labelledby="MeetingTypeList38" data-toggle-id=".collapse38">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList39'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Finance+and+Economic+Development+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse39">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse39" aria-labelledby="MeetingTypeList39" data-toggle-id=".collapse39">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList40'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Planning+Committee+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse40">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>1</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse40" aria-labelledby="MeetingTypeList40" data-toggle-id=".collapse40">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList41'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+of+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse41">
                                                    <span class="MeetingTypeNameText">Joint meeting of Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse41" aria-labelledby="MeetingTypeList41" data-toggle-id=".collapse41">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting of Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList42'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Accessibility+Advisory+Committee+and+the+French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse42">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse42" aria-labelledby="MeetingTypeList42" data-toggle-id=".collapse42">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList43'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Finance+and+Economic+Development+Committee+and+the+Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse43">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2020'>2</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse43" aria-labelledby="MeetingTypeList43" data-toggle-id=".collapse43">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList44'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Planning+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse44">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Planning Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse44" aria-labelledby="MeetingTypeList44" data-toggle-id=".collapse44">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Planning Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList45'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Housing+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse45">
                                                    <span class="MeetingTypeNameText">Joint Planning and Housing and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse45" aria-labelledby="MeetingTypeList45" data-toggle-id=".collapse45">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Housing and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList46'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Housing+and+Environment+and+Climate+Change+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse46">
                                                    <span class="MeetingTypeNameText">Joint Planning and Housing and Environment and Climate Change Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse46" aria-labelledby="MeetingTypeList46" data-toggle-id=".collapse46">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Housing and Environment and Climate Change Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList47'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transit+Commission+and+Light+Rail+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse47">
                                                    <span class="MeetingTypeNameText">Joint Transit Commission and Light Rail Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse47" aria-labelledby="MeetingTypeList47" data-toggle-id=".collapse47">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transit Commission and Light Rail Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList48'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transportation+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse48">
                                                    <span class="MeetingTypeNameText">Joint Transportation Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse48" aria-labelledby="MeetingTypeList48" data-toggle-id=".collapse48">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transportation Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList49'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Light+Rail+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse49">
                                                    <span class="MeetingTypeNameText">Light Rail Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>10</span><span class='Year Year2023'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse49" aria-labelledby="MeetingTypeList49" data-toggle-id=".collapse49">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Light Rail Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList50'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse50">
                                                    <span class="MeetingTypeNameText">Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2014'>1</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse50" aria-labelledby="MeetingTypeList50" data-toggle-id=".collapse50">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList51'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Built+Heritage+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse51">
                                                    <span class="MeetingTypeNameText">Ottawa Built Heritage Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2012'>6</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse51" aria-labelledby="MeetingTypeList51" data-toggle-id=".collapse51">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Built Heritage Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList52'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse52">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>131</span><span class='Year Year2015'>12</span><span class='Year Year2016'>12</span><span class='Year Year2017'>14</span><span class='Year Year2018'>11</span><span class='Year Year2019'>15</span><span class='Year Year2020'>15</span><span class='Year Year2021'>12</span><span class='Year Year2022'>21</span><span class='Year Year2023'>19</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse52" aria-labelledby="MeetingTypeList52" data-toggle-id=".collapse52">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList53'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board+-+Special+Meeting" id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse53">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board - Special Meeting&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2015'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse53" aria-labelledby="MeetingTypeList53" data-toggle-id=".collapse53">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board - Special Meeting">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList54'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Public+Library+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse54">
                                                    <span class="MeetingTypeNameText">Ottawa Public Library Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>106</span><span class='Year Year2014'>11</span><span class='Year Year2015'>11</span><span class='Year Year2016'>12</span><span class='Year Year2017'>10</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>10</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>12</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse54" aria-labelledby="MeetingTypeList54" data-toggle-id=".collapse54">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Public Library Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList55'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse55">
                                                    <span class="MeetingTypeNameText">Planning Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2019'>2</span><span class='Year Year2020'>2</span><span class='Year Year2021'>3</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse55" aria-labelledby="MeetingTypeList55" data-toggle-id=".collapse55">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList56'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+and+Housing+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse56">
                                                    <span class="MeetingTypeNameText">Planning and Housing Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>24</span><span class='Year Year2023'>23</span><span class='Year Year2024'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse56" aria-labelledby="MeetingTypeList56" data-toggle-id=".collapse56">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning and Housing Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList57'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse57">
                                                    <span class="MeetingTypeNameText">Planning Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>208</span><span class='Year Year2012'>10</span><span class='Year Year2013'>20</span><span class='Year Year2014'>17</span><span class='Year Year2015'>19</span><span class='Year Year2016'>18</span><span class='Year Year2017'>20</span><span class='Year Year2018'>16</span><span class='Year Year2019'>18</span><span class='Year Year2020'>15</span><span class='Year Year2021'>26</span><span class='Year Year2022'>29</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse57" aria-labelledby="MeetingTypeList57" data-toggle-id=".collapse57">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList58'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Complaints+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse58">
                                                    <span class="MeetingTypeNameText">Police Services Board Complaints Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2017'>1</span><span class='Year Year2018'>2</span><span class='Year Year2019'>3</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse58" aria-labelledby="MeetingTypeList58" data-toggle-id=".collapse58">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Complaints Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList59'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Finance+and+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse59">
                                                    <span class="MeetingTypeNameText">Police Services Board Finance and Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>3</span><span class='Year Year2019'>7</span><span class='Year Year2020'>5</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span><span class='Year Year2023'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse59" aria-labelledby="MeetingTypeList59" data-toggle-id=".collapse59">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Finance and Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList60'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Human+Resources+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse60">
                                                    <span class="MeetingTypeNameText">Police Services Board Human Resources Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2016'>4</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>4</span><span class='Year Year2021'>1</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse60" aria-labelledby="MeetingTypeList60" data-toggle-id=".collapse60">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Human Resources Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList61'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Policy+and+Governance+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse61">
                                                    <span class="MeetingTypeNameText">Police Services Board Policy and Governance Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>24</span><span class='Year Year2016'>1</span><span class='Year Year2017'>4</span><span class='Year Year2018'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse61" aria-labelledby="MeetingTypeList61" data-toggle-id=".collapse61">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Policy and Governance Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList62'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Special+Joint+Meeting+of+the+Planning+Committee+and+the+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse62">
                                                    <span class="MeetingTypeNameText">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse62" aria-labelledby="MeetingTypeList62" data-toggle-id=".collapse62">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList63'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Standing+Committee+on+Environmental+Protection%2c+Water+and+Waste+Management" id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse63">
                                                    <span class="MeetingTypeNameText">Standing Committee on Environmental Protection, Water and Waste Management&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>34</span><span class='Year Year2019'>8</span><span class='Year Year2020'>5</span><span class='Year Year2021'>10</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse63" aria-labelledby="MeetingTypeList63" data-toggle-id=".collapse63">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Standing Committee on Environmental Protection, Water and Waste Management">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList64'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse64">
                                                    <span class="MeetingTypeNameText">Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>109</span><span class='Year Year2012'>7</span><span class='Year Year2013'>13</span><span class='Year Year2014'>7</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>6</span><span class='Year Year2018'>5</span><span class='Year Year2019'>9</span><span class='Year Year2020'>11</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse64" aria-labelledby="MeetingTypeList64" data-toggle-id=".collapse64">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList65'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transportation+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse65">
                                                    <span class="MeetingTypeNameText">Transportation Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>107</span><span class='Year Year2012'>5</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>10</span><span class='Year Year2018'>5</span><span class='Year Year2019'>8</span><span class='Year Year2020'>7</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>13</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse65" aria-labelledby="MeetingTypeList65" data-toggle-id=".collapse65">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transportation Committee">

</div>
                                                </div>
                                            </div>
                                        
                                        
                                </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="fullCalModal" aria-hidden="true" aria-label="meeting details popup" role="dialog" class="modal fade">
        <div class="modal-dialog">
              <div class="modal-content">
                <div id="modelHeader" class="modal-header">
                    <button id="closeCalModal" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close meeting details</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="row calendar-row">
                        <div class="calendar-details">
                            <div class="col-md-6 cal-date-loc">
                                <span id="startDate" class="start-date meeting-date"></span>
                                <div id="desc" class="desc-text" style="word-break:break-word;"></div>
                            </div>
                            <div class="calendar-icons">
                                <span id="shareContainer" class="sharing">
                                    <a title="Share" id="shareLink" data-dismiss="modal">
                                        
                                        <img id="ctl00_MainContent_Image3" class="imgicon" alt="Share" title="Share" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />

                                    </a>
                                </span>
                                <a id="commentLink" title="Open for Comments" target="_blank" style="color:#454545;">
                                    
                                    <img id="ctl00_MainContent_Image6" class="imgicon" alt="Open for Comments" title="Open for Comments" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                </a>
                                <a class="RTSAcitve link" title="Request to Speak" target="_blank" style="display: none;">
                                    
                                    <img id="ctl00_MainContent_Image9" class="imgicon" alt="Request to Speak" title="Request to Speak" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                </a>
                                <a id="delegationRequestLink" title="Delegation Request" target="_blank">
                                    
                                    <img id="ctl00_MainContent_imgDelegation3" class="imgicon" alt="Delegation Request" title="Delegation Request" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                </a>
                                <!--<a id="eventLink" class="btn btn-primary" target="_blank"><span class="la la-info-circle"></span>&nbsp;View Meetings</a>-->
                            </div>
                            <div id="video-link"></div>
                        </div>
                        <div class="col-md-6" id="MeetingDocuments" aria-label="Meeting documents"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="conflictsDetailsModal" aria-hidden="true" role="dialog" aria-label="Member in Conflict" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id="modelHeaderconflicts" class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <table id="table-conflicts-details-list" class="table-responsive" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word; border: 0;">
                    <thead>
                        <tr role="row" style="display: none;">
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="LegislationDetailsModal" aria-hidden="true" role="dialog" aria-label="Legislative History" class="modal fade">
        <div class="modal-dialog  LegislationDetailsModal" style="width: 60%">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Details</h2>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <div class="modal-body">
                    <div>
                        <table class="inputtable" style="width: 100%;">
                            <tr>
                                <th>Number</th>
                                <td class="LegislationNumberLabel"></td>
                            </tr>
                            <tr>
                                <th>Type</th>
                                <td id="LegislationTypeLabel">Legislation</td>
                            </tr>
                            <tr>
                                <th>Stage</th>
                                <td class="LegislationStageLabel"></td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td class="LegislationStatusLabel"></td>
                            </tr>
                            <tr>
                                <th>Department</th>
                                <td id="LegislationDepartmentLabel"></td>
                            </tr>
                            <tr>
                                <th>Legislative Text</th>
                                <td id="LegislationRecommendationLabel"></td>
                            </tr>
                            <tr>
                                <th style="vertical-align: top">Attachments</th>
                                <td>
                                    <div>
                                        <span id="LegislationDocumentIcon"></span>
                                        <a id="LegislationDocumentLink"></a>
                                    </div>
                                    <div id="LegislationSupportingDocumentsList">
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <h3>History</h3>
                    <div>
                        <table id="LegislationHistoryTable" class="list dataTable">
                            <thead>
                                <tr>
                                    <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                    <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                    <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                    <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                    <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                </tr>
                            </thead>
                            <tbody class="history"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('', $(this).attr("itemid"));
        });
    });
</script>



    <!-- Bootstrap Modal -->
    <div id='bootstrapModal' class='modal fade in' role="dialog" aria-hidden="true" style='display: none;'>
        <div class='modal-dialog modal-dialog-scrollable'>
            <div class='modal-content'>
                <div class='modal-header'>
                    <h2 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h2>
                    <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close share meeting popup</span></button>
                </div>
                <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                    <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                        <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                    </div>
                </div>
                <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0;'>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" style="display:none;" form="aspnetForm" value="Submit">Submit</button>
    </main>

    </div>

    <!--<script type='text/javascript' src='Scripts\fullcalendar\lib\main.js'></script>-->
    
    <script>

        var mincount = 20;
        var maxcount = 40;
        var lastScrollTop = 0;
        var isReachMaxRecord = false;
        //comment out fake lazy loading code
        //$(".meetingDetails").slice(40).hide();

        // IsListView.ClientId values //
        var View = {
            set Current(id) {
                $('#ctl00_MainContent_IsListView').val(id);
            },
            get Current() {
                return $('#ctl00_MainContent_IsListView').val();
            }
        }

        var Views = {
            "Calendar" : "0",
            "List" : "1",
            "Conflicts" : "2",
            "Merged" : "3",
            "Legislation" : "4",
            "AgendaItemHistory" : "5"
        }

        function iframeLoaded(iframeHeight) {
            var windowHeight = $(window).height();

            if (iframeHeight > windowHeight) {
                var newHeight = (windowHeight - 185) + "px";
                $('#modalIframeDiv').height(newHeight);
            }
            else {
                var newHeight = iframeHeight + "px";
                $('#modalIframeDiv').height(newHeight);
            }
        }

        $(window).scroll(function () {
            stickyHeader();

            if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                if ($('#btnListView').hasClass("fc-state-active")) {
                    var btnShowMoreId = 'ctl00_MainContent_btnShowMore';
                    var scrollTop = $(window).scrollTop();

                    if (scrollTop > lastScrollTop & !isReachMaxRecord) {
                        $('#masterPageHeader').css("overflow-y", "hidden");
                        document.getElementById(btnShowMoreId).click();
                        //comment out fake lazy loading code
                        //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                        //mincount = mincount + 20;
                        //maxcount = maxcount + 20;
                    }
                    lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
                }
            }
        });
        $(window).resize(function () {
            var parentwidth = $(".parent").width();
            $(".child").width(parentwidth);
        });

        var cachedMeetingsByType = {};
        var SelectedYear = 0;
        var text = {
            View: 'View',
            Cancelled: 'Meeting Cancelled'
        };

        $('.skip-to-content-link').click(function(event){
            event.preventDefault();
            document.location = window.location.href + "#maincontent";
            let getID = window.location.href;
            history.pushState(null, null, getID.replace('#maincontent', ''));
        });

        function SelectYearOption () {
            var optionSelected = $("option:selected", this);
            //console.log(optionSelected[0].getAttribute("data-year"));
            if(optionSelected.length > 0){
                var SelectedYearItem = optionSelected[0].getAttribute("data-year");
                SelectedYear = SelectedYearItem;
            } else {
                $("option[data-year=" + SelectedYear + "]").prop("selected", true);
            }

            var emptyYear = true;
            $.each($(".MeetingTypeList"), function (i, v) {
                emptyYear = ($(this).find(".Year" + SelectedYear).text() != '0' ? false : emptyYear);
                if(!emptyYear){ return false; }
            });

            if (emptyYear){
                SelectedYear = "0";
            }

            $(".Year, .Year0").hide();

            $(".Year" + SelectedYear).show();
            /*
            if (SelectedYearItem == null || SelectedYearItem.length == 0) {
                $(".SelectedYear").html(SelectedYear + "&nbsp;(0)");
            }
            else {
                $(".SelectedYear").html(SelectedYearItem.text());
            }*/

            $.each($(".MeetingTypeList"), function (i, v) {
                var mt = $(this);
                var head = mt.find(".Year" + SelectedYear);

                if (head == null || head.length == 0 || head.text() == "0") {
                    mt.hide();
                }
                else {
                    mt.show();
                }
            });

            var url = window.location.href;
            if (SelectedYear == null || SelectedYear == 0) {
                url = UpdateQuery("Year", '');
            }
            else {
                url = UpdateQuery("Year", SelectedYear);
            }

            if (window.location.href != url) {
                window.history.pushState('', '', url);
            }
            $("#YearFilterList").hide();
        }

        $(".YearFilterOption").on('change', SelectYearOption);
        $('#PastMeetingTypesAccordian').on('hidden.bs.collapse', function () {
            Size_Changed();
            $('#PastMeetingTypesAccordian .collapse.show').removeClass("show");
        });

        $('#PastMeetingTypesAccordian').on('shown.bs.collapse', function (e) {
            Size_Changed();
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            window.history.pushState('', '', UpdateQuery('Expanded', mt));
        });

        $('#PastMeetingTypesAccordian').on('show.bs.collapse', function (e) {
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            LoadMeetingType(mt, true);
            $("#PastMeetingTypesAccordian .collapse.in").collapse("hide");
        });

        $('#PastMeetingTypesAccordian').on('hide.bs.collapse', function (e) {
            window.history.pushState('', '', UpdateQuery('Expanded', ''));
        });

        $(".PastMeetingTypesName").click(function (e) {
            e.preventDefault();
        });

        $("[data-toggle-id]").on("shown.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.removeClass("collapsed");
        });

        $("[data-toggle-id]").on("hidden.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.addClass("collapsed");
        });

        function ShowDownIcon()
        {
            $("#RightIcon").hide();
            $("#DownIcon").show();

        }

        function ShowRightIcon()
        {
            $("#RightIcon").show();
            $("#DownIcon").hide();
            $("#DownIcon").css("display", block);
        }


        function LoadMeetingType(mt, render, cb) {
            //$('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var container = $("[MeetingType='" + mt.replace(/'/g, '\\\'') + "']");

            if (!container.hasClass("Loaded" + SelectedYear) && !container.hasClass("Loading" + SelectedYear)) {
                container.addClass("Loading" + SelectedYear);

                $.ajax({
                    type: "POST",
                    url: "MeetingsCalendarView.aspx/PastMeetings" + window.location.search,
                    data: "{type: '" + mt.replace(/'/g, '\\\'') + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        cachedMeetingsByType[mt] = GetMergedMeetings(msg.d, container);
                        if (render) {
                            container.append(cachedMeetingsByType[mt]);
                            lazyLoadAttachments();
                            shortenLinkNames();
                            container.addClass("Rendered" + SelectedYear);
                            SelectYearOption();
                        }

                        container.addClass("Loaded" + SelectedYear);
                        container.removeClass("Loading" + SelectedYear);
                        LoadingOverlay.Hide(container.parent());

                        if (cb) {
                            cb();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
            else if (render && !container.hasClass("Rendered" + SelectedYear)) {
                container.append(cachedMeetingsByType[mt]);
                container.addClass("Rendered" + SelectedYear);
                SelectYearOption();
            }
            else {
                if (cb) {
                    window.setTimeout(cb, 100);
                }
            }
            //$('#ctl00_MainContent_MeetingListUpdateProgress').hide();
        }
        $(window).on("resize", function () {Size_Changed(); })

        function UpdateQuery(parameter, value) {
            var loc = window.location.search;

            if (loc.length == 0) {
                if (value != null && value.toString().length > 0) {
                    return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                }
            }
            else {
                var found = false;
                if (loc[0] == '?') {
                    loc = loc.substring(1);
                }

                var params = loc.split('&');

                for (var i = 0; i < params.length; i++) {
                    if (params[i].startsWith(parameter + '=')) {
                        found = true;

                        if (value != null && value.toString().length > 0) {
                            params[i] = parameter + '=' + encodeURIComponent(value);
                        }
                        else {
                            params[i] = '';
                        }
                    }
                }

                if (found == false && value != null && value.toString().length > 0) {
                    params.push(parameter + '=' + value);
                }

                var qs = '';
                for (var i = 0; i < params.length; i++) {
                    if (params[i].length > 0) {
                        if (qs.length == 0) {
                            qs = "?" + params[i];
                        }
                        else {
                            qs += "&" + params[i];
                        }
                    }
                }
                return window.location.href.replace("?" + loc, qs);
            }
            return window.location.href;
        }

        SelectYearOption();

        var LoadingOverlay = {
            Show: function (Element) {
                var LoadingDiv = $("<div/>").addClass("LoadingDivOverlay");
                var LoadingDivImage = $("<img src='_layouts/images/gears_anv4.gif'/>").addClass("LoadingDivImage");

                $(Element).append(LoadingDiv, LoadingDivImage);
            },
            Hide: function (Element) {
                $(Element).find(".LoadingDivOverlay, .LoadingDivImage").remove();
            }
        };

        function LoadMeetingTypes(containers) {
            if (containers.length > 0) {
                var mt = $(containers.shift()).attr("MeetingType");
                LoadMeetingType(mt, false, function () { LoadMeetingTypes(containers); });
            }
        }

        //var mts = $.makeArray($("[MeetingType]"));
        //LoadMeetingTypes(mts);

        function stickyHeader() {
            var sticky = $(".child")[0].offsetTop;
            if (window.pageYOffset > sticky) {
                var parentwidth = $(".parent").width();
                $(".child").width(parentwidth);
                $(".child").addClass("fixed");
            } else {
                $(".child").removeClass("fixed");
                $(".child").removeAttr("style");
            }
        }

        $('.has-clear input[type="text"]').on('input propertychange', function () {
            var $this = $(this);
            var visible = Boolean($this.val());
            $this.siblings('.form-control-clear').toggleClass('hidden', !visible);
        }).trigger('propertychange');

        $('.form-control-clear').click(function () {
            $(this).siblings('input[type="text"]').val('')
              .trigger('propertychange').focus();
            $('#table-conflicts-list').DataTable().search($(this).val()).draw();
        });

        $('.control-clear').click(function () {
            if ($(this).siblings('input[type="text"]')[0].id == 'ctl00_MainContent_FilterByDate') {
                $("#ctl00_MainContent_IsDateFilter").val("0");
            }
            if ($(this).siblings('input[type="text"]').val() != "") {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            }
            $(this).siblings('input[type="text"]').val('');
        });

        function ResetFilters() {
            deleteCookie("FilterDate");
            deleteCookie("MeetingTypeFilter");
            deleteCookie("Keyword");
            deleteCookie("ConflictMember");
            deleteCookie("ItemHistoryStage");
            deleteCookie("ItemHistoryStatus");
            deleteCookie("ItemHistoryDepartments");
            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var url = "";
            if (!location.search || location.search.length <= 0){
                url = window.location.href;
            } else {
                url = location.search;
            }
            window.open(url,'_self');
        }
        function ChangeFilterFlag() {
            $("#ctl00_MainContent_IsChangeFilter").val("1");
        }
        function ApplyFilterChanges() {
            var selectedTab = getCookie('CurrentTab');

            if ($('#ctl00_MainContent_txtSearch').val() != "" && View.Current != "2") {
                $("#btnFilterResults").click();
            }
            else if (selectedTab == "conflict") {
                $("#btnFunnelFilterResults").click();
            }
            else if (selectedTab == 'agendaItemHistory') {
                loadAgendaItemHistoryData(true);
            }
            else {
                document.getElementById('FilterResults').click();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            lazyLoadAttachments();
            shortenLinkNames();
        }
    </script>

    <script type="text/javascript">
        function postbackButtonClick() {
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var meetingType = [];
            $(".MeetingTypeListbox * .ss-value-text").each(function () {
                 meetingType.push($(this).text());
            });

            setCookie("MeetingTypeFilter", meetingType.join("|"));

            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            

            if (getCookie('CurrentTab') == 'calendar') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'list') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnListView").addClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").show();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'mergedlist') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'past') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'conflict') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();

                loadConflictData(true);
            }
            else if (getCookie('CurrentTab') == 'legislation') {
                NavigationTab_Click($("#btnLegislationView"));
            }
            else if (getCookie('CurrentTab') == 'agendaItemHistory') {
                NavigationTab_Click($("#AgendaItemHistoryViewButton"));
            }

            $("#ctl00_MainContent_IsChangeFilter").val("0");

            $("#btnListView").addClass("fc-state-active");
            $("#btnMergedListView").removeClass("fc-state-active");
            $("#btnPastView").removeClass("fc-state-active");
            $("#btnCalendarView").removeClass("fc-state-active");

            lazyLoadAttachments();
            shortenLinkNames();

            return true;
        }

        function postbackTabClick(View) {

            $(".fc-toolbar-chunk > .fc-button, #btnListView, #btnCalendarView, #btnConflictsView, #btnLegislationView, #btnMergedListView, #AgendaItemHistoryViewButton, #btnPastView")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-merged-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();
            $("#searchresults").hide();

            $("#mergedListHeader").hide();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#pastHeader").hide();

            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $("#ctl00_MainContent_MonthMenu").hide();

            $("#btnFilter").show();
            deleteCookie("MeetingTypeFilter");

            if (View == Views.Calendar) {
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");
            }
            else if (View == Views.List) {
                $("#cal-list").show();
                $("#all-list").show();
                $("#mergedListHeader").show();
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");

            }
            else if (View == Views.Conflicts) {
                $("#cal-list").show();
                $("#all-conflicts-list").show();
                $("#FilterByConflictMember").show();
                $("#FilterByKeyword").show();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnConflictsView").attr("aria-pressed", "true");
            }
            else if (View == Views.Legislation) {
                $("#cal-list").show();
                $("#btnFilter").hide();
                $("#all-legislation-list").show();
                $("#btnLegislationView").addClass("fc-state-active");
                $("#btnLegislationView").attr("aria-pressed", "true");
                $(".LegislationHeader").show();
            }
            else if(View == Views.AgendaItemHistory) {
                $("#cal-list").show();
                $("#agendaitemhistory-list").show();
                $("#AgendaItemHistoryViewButton").addClass("fc-state-active");
                $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                $(".AgendaItemHistoryHeader").show();
                $("#FilterByStatus").show();
                $("#FilterByStage").show();
                $("#FilterByDepartment").show();
            }
            else if (View == Views.Merged) {
                $("#cal-list").show();
                $("#all-list").show();

                $("#all-merged-list").show();
                $("#merged-list").show();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnMergedListView").attr("aria-pressed", "true");
                $("#mergedListHeader").show();
                $("#PastMeetingTitle").show();
            }
            else if (View == Views.Past) {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").show();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#btnPastView").attr("aria-pressed", "true");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }

            if (View == Views.List || Views.Merged || Views.Past){
                $("#btnFilter").show();
                $("#FilterByKeyword").hide();
                $("#FilterByConflictMember").hide();

                var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
                var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();

                if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByDate != null && filterByDate !== "")){
                    $("#btnFilter").append("<span class='dot'></span>");
                } else {
                    $(".dot").remove();
                }
            }

        $("#ctl00_MainContent_IsChangeFilter").val("0");

        shortenLinkNames();
        return true;
    }

    function searchEnter(event) {
        if (event.keyCode === 13 && $('#ctl00_MainContent_txtSearch').val() != '') {
                event.preventDefault();
                searchData();
                return true;
            }
            else
                return event.keyCode != 13;
        }

    function setCookie(cname, cvalue) {
        document.cookie = cname + "=" + cvalue + ";SameSite=None; Secure";
    }

    function setLongCookie(cname, cvalue) {
        var d = new Date();
        d.setTime(d.getTime() + (3600 * 1000 * 24 * 365 * 10));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=None; Secure";
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function deleteCookie(name) {
        document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            // If no cookie for CurrentTab, set it to DefaultTab. If DefaultTab is not available, then default tab will be calendar
            var cookie = getCookie('CurrentTab').trim().toLowerCase();

            var expanded = getParameterByName("Expanded");

            if (expanded) {
                $(".MeetingTypeNameText").each(function(i,v){
                    if (expanded == v.innerText.trim()) {
                        v.click();
                    }
                });
            }

            if (cookie == "") {
                var defaultTab = 'mergedlist';
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);

                if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                    cookie = defaultTab.toLowerCase();
                } else {
                    cookie = urlParams.get("CurrentTab");
                }

                setCookie('CurrentTab', defaultTab);

            }

            switch(cookie) {
                case "list":
                    postbackTabClick(Views.List);
                    break;
                case "conflict":
                    loadConflictData(true);
                    postbackTabClick(Views.Conflicts);
                    break;
                case "legislation":
                    loadLegislationData(false);
                    postbackTabClick(Views.Legislation);

                    // legislation filter field //
                    $(".LegislationLibrarySearchField input").keyup(function () {
                        if (Legislation.DataTable != null) {
                            Legislation.DataTable.search($(".LegislationLibrarySearchField input").val()).draw();
                        }
                    });
                    break;
                case "agendaitemhistory":
                    loadAgendaItemHistoryData(false);
                    postbackTabClick(Views.AgendaItemHistory);

                    // agenda item history filter field //
                    $(".AgendaItemHistorySearchField input").keyup(function () {
                        if (AgendaItemHistory.DataTable != null) {
                            AgendaItemHistory.DataTable.search($(".AgendaItemHistorySearchField input").val()).draw();
                        }
                    });
                    break;
                case "mergedlist":
                    postbackTabClick(Views.Merged);
                    break;
                case "past":
                    postbackTabClick(Views.Past);
                    break;
                case "calendar":
                default:
                    // calendar view, default
                    loadCalendarMeetings();
                    break;
            }

            Size_Changed();

            if(getCookie('CurrentTab').trim().toLowerCase() == "mergedlist"){
                loadAdditionalItems(5, ".upcoming-meetings", "#loadMoreMeetings", ".meeting-title > *");
            } else {
                $('#lazyLoadContainer').hide();
                $('#loadMoreMeetings').hide();
            }
            RetrieveFilterOptions();
        });

        function getParameterByName(name) {
            var url = window.location.href
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }


        function loadLegislationData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
            };

            Legislation.LoadLegislationData(filtered, language);
        }

        function loadAgendaItemHistoryData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><i class="la la-spinner la-spin loaderDesign"></i></div>'
            };

            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType) {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var filterByStage = ""; //lbFilterByStage
            if ($("#ctl00_MainContent_lbFilterByStage").val()) {
                filterByStage = $("#ctl00_MainContent_lbFilterByStage").val().join(',');
            }

            var filterByStatus = ""; //lbFilterByStatus
            if ($("#ctl00_MainContent_lbFilterByStatus").val()) {
                filterByStatus = $("#ctl00_MainContent_lbFilterByStatus").val().join(',');
            }

            var filterByDepartmentNames = ""; //lbFilterByDepartment
            if ($("#ctl00_MainContent_lbFilterByDepartment").val()) {
                filterByDepartmentNames = $("#ctl00_MainContent_lbFilterByDepartment").val().join(',');
            }

            if (filterByDate || filterbyMeetingTypeIds || filterByStage || filterByStatus || filterByDepartmentNames){
                $("#btnFilter").append("<span class='dot'></span>");
                $('.dropdown-toggle i').addClass('filtered');
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            } else {
                $(".dot").remove();
                $('.dropdown-toggle i').removeClass('filtered');
            }

            $('.dropdown-toggle').next().css("display", "none");

            AgendaItemHistory.AgendaItemHistoryView(filtered, language, filterByDate, filterbyMeetingTypeIds, filterbyMeetingTypeNames, filterByStage, filterByStatus, filterByDepartmentNames);
        }

        function loadCalendarMeetings() {
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#table-agendaitemhistory-list").hide();

            var currentMonStart = "";
            var currentMonEnd = "";
            var calendarEl = document.getElementById('calendar')
            var calButtons = 'month mergedListViewButton '
            var calendar = new FullCalendar.Calendar(calendarEl, {
                eventDisplay: 'block',
                showNonCurrentDates: false,
                fixedWeekCount: false,
                locale: 'en',
                customButtons: {
                    month: {
                        text: 'Calendar'
                    },
                    myCustomButton: {
                        text: 'Upcoming'
                    },
                    myCustomConflictsButton: {
                        text: 'Conflicts Registry'
                    },
                    myCustomAgendaItemHistoryButton: {
                        text: "Agenda Item History"
                    },
                    mergedListViewButton: {
                        text: 'List'
                    },
                    pastViewButton: {
                        text: 'Past'
                    },
                    myCustomLegislationButton: {
                        text: 'Legislation'
                    }
                },
                headerToolbar: {
                    left: 'prev,title,next',
                    center: '',
                    right: calButtons.trimEnd()
                },
                dayHeaderFormat: { weekday: 'long'},
                initialView: 'dayGridMonth',
                dayMaxEventRows: 4,
                moreLinkContent: function(args){return (window.location.href.toLowerCase().includes("french") ? "Cliquez pour agrandir (" + args.num + " plus)": "Click to expand (" + args.num + " more)");},
                moreLinkDidMount: function(args){
                    $(args.el).attr("tabIndex", "0");
                },
                contentHeight:800,
                handleWindowResize:true,
                datesSet: function (dateInfo) {
                    $(".fc-prev-button").attr("aria-label", "Previous Month");
                    $(".fc-next-button").attr("aria-label", "Next Month");

                    if ($('#ctl00_MainContent_StartMonthDate').val() != "" && $('#ctl00_MainContent_EndMonthDate').val() != "") {
                        var minDate = moment($('#ctl00_MainContent_StartMonthDate').val()),
                            maxDate = moment($('#ctl00_MainContent_EndMonthDate').val());

                        if (minDate >= dateInfo.view.start && minDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-prev-button").prop('disabled', true);
                            $(".fc-prev-button").addClass('fc-state-disabled');
                            $(".fc-prev-button").css("cursor", "default");
                        }
                        else {
                            $(".fc-prev-button").removeClass('fc-state-disabled');
                            $(".fc-prev-button").prop('disabled', false);
                            $(".fc-prev-button").css("cursor", "pointer");
                        }

                        if (maxDate >= dateInfo.view.start && maxDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-next-button").prop('disabled', true);
                            $(".fc-next-button").addClass('fc-state-disabled');
                            $(".fc-next-button").css("cursor", "default");
                        } else {
                            $(".fc-next-button").removeClass('fc-state-disabled');
                            $(".fc-next-button").prop('disabled', false);
                            $(".fc-next-button").css("cursor", "pointer");
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json",
                        data: "{'calendarStartDate':'" + info.startStr + "','calendarEndDate':'" + info.endStr + "'}",
                        url: "/MeetingsCalendarView.aspx/GetAllMeetings" + window.location.search,
                        dataType: "json",
                        success: function (data) {
                            var events = [];
                            $.map(data.d, function (item, i) {
                                var event = new Object();
                                event.id = item.ID;
                                event.allday = false;
                                event.start = new Date(item.StartDate);
                                event.end = new Date(item.EndDate);
                                event.title = decodeHTML(item.MeetingName);
                                event.url1 = item.Url;
                                event.description = item.Description;
                                event.location = item.Location;
                                event.shareUrl = item.ShareUrl;
                                event.meetingType = item.MeetingType;
                                event.className = item.ClassName;
                                event.languageName = item.LanguageName;
                                event.sharing = item.Sharing;
                                event.hasAgenda = item.HasAgenda;
                                event.MeetingDocumentLink = item.MeetingDocumentLink;
                                event.portalId = item.PortalId;
                                event.HasLiveVideo = item.HasLiveVideo;
                                event.HasVideo = item.HasVideo;
                                event.LiveVideoStandAloneLink = item.LiveVideoStandAloneLink;
                                event.HasVideoLivePassed = item.HasVideoLivePassed;
                                event.DelegationRequestLink = item.DelegationRequestLink;
                                event.MeetingPassed = item.MeetingPassed;
                                event.AllowPublicComments = item.AllowPublicComments;
                                event.FormattedStart = item.FormattedStart;
                                event.TimeOverride = item.TimeOverride;
                                event.TimeOverrideFR = item.TimeOverrideFR;
                                event.IsMP3 = item.IsMP3;
                                events.push(event);
                                setTimeout(function(){
                                    $(".fc-daygrid-more-link").each(function(i,v){
                                        $(v).keypress(function(e){
                                            if(e.which == 13 || e.which == 32){
                                                $(".fc-daygrid-more-link")[i].click();
                                                setTimeout(function(){
                                                    tabIndexLoop(document.querySelector(".fc-more-popover") ,true, $(v));
                                                    setTimeout(function () {
                                                        $(".fc-more-popover").first().find(".fc-daygrid-event").first().focus();
                                                    }, 350);
                                                }, 300);
                                            }
                                        });
                                    });
                                }, 500);
                            });
                            successCallback && successCallback(events);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                },
                eventClick: function (eventClickInfo) {
                    showCalEvent(eventClickInfo.event, eventClickInfo.el);
                },
                eventDidMount: function (args) {
                    var timeSelector = $(args.el).children(".fc-event-main").children(".fc-event-main-frame").children(".fc-event-time");
                    $(args.el).popover({
                        title: args.event.title,
                        content: args.event.extendedProps.FormattedStart,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body',
                    });
                    $(args.el).attr("tabIndex", "0");
                    $(args.el).attr("aria-label", args.event.extendedProps.FormattedStart + " " + args.event.title);
                    $(args.el).attr("role", "button");
                    $(args.el).find(".fc-event-time").attr("aria-hidden", "true");
                    $(args.el).find(".fc-event-title").attr("aria-hidden", "true");
                    $(args.el).keypress(function(e){
                        if(e.which == 13 || e.which == 32){
                            showCalEvent(args.event, args.el);
                        }
                    });

                    var eventTime = timeSelector.text();
                    timeSelector.text(eventTime.substr(0, eventTime.length - 2) + " " + eventTime.substr(eventTime.length - 2).toUpperCase());
                },
                eventTimeFormat: {
                    hour12: 'True',
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                loading: function (bool) {
                    if (getCookie('CurrentTab') == 'list') {
                        if ($('#all-list').text().indexOf('There are no meetings') > -1) {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        } else {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                        }
                    } else {
                        if (bool) $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        else $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                    }
                }
            });

            calendar.render();
            $('#calendar').prepend("<h1 class='visuallyhidden'>Calendar View</h1>");
            $(".fc-dayGridMonth-view > table").prepend("<caption class='visuallyhidden'>Calendar containing meetings</caption>");
            $(".fc-toolbar-chunk").first().attr("aria-live", "polite");
            $(".fc-toolbar-chunk").last().attr("role", "group");
            $(".fc-toolbar-chunk").last().attr("aria-label", "event views");
            $('#calendar').show();
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();

            $("#calendar > .fc-toolbar > .fc-left > h2").attr("aria-hidden", "true");
            $("#calendar > .fc-toolbar > .fc-left > h2").css("display", "none");
            $("#calendar > .fc-toolbar > .fc-left > h2").before("<h1>" + $("#calendar > .fc-toolbar > .fc-left > h2").text() +"</h1>");
            $(".fc-button-primary").each(function(i,v){
                $(v).removeClass("fc-button-primary");
                $(v).addClass("fc-state-default");
            });

            $(".fc-month-button").addClass("fc-state-active");
            $(".fc-month-button").attr("aria-pressed", "true");

            $(".fc-mergedListViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomButton-button").attr("aria-pressed", "false");
            $(".fc-pastViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomConflictsButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomAgendaItemHistoryButton").attr("aria-pressed", "false");
            $(".fc-myCustomLegislationButton").attr("aria-pressed", "false");

        }

        function showCalEvent(event, calEntry){
            var startDate = new Date(event.start);
            var modalContainer = document.querySelector(".modal-dialog");
            var eventAria = event.title + " " + event.extendedProps.FormattedStart;
            startDate = startDate.format("ddd, MMMM dd, yyyy @ h:mm tt");
            if($('#modelHeader' > " h2:has('#modalTitle')").length > 0) {
                $('#modalTitle').remove();
            }
            $('#modelHeader').prepend("<h2 id='modalTitle' tabIndex='0' style='font-size: 17px'></h2>");
            $('#modalTitle').html(event.title);
            $("#closeCalModal").on("click", function(){
                calEntry.focus();
            });
            $(document).keydown(function(event) {
                if (event.keyCode == 27) {
                    calEntry.focus();
                }
            });
            $('#startDate').text(event.extendedProps.FormattedStart);
            $('#desc').html(event.extendedProps.description);
            if (event.extendedProps.hasAgenda && event.extendedProps.sharing) {
                $('#eventLink').show();
                $('#eventLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                var shareAria = "Share " + eventAria;
                $('#shareContainer').show();
                $('#shareLink').attr('href', event.extendedProps.shareUrl);
                $('#shareLink').attr('aria-label', shareAria);
                $('#shareLink > img').attr('aria-label', shareAria);
                if (event.extendedProps.AllowPublicComments){
                    var commentAria = "Comment on " + eventAria + ". Opens in a new tab/window";
                    $('#commentLink').show();
                    $('#commentLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                    $('#commentLink').attr('aria-label', commentAria);
                    $('#commentLink > img').attr('aria-label', commentAria);
                } else {
                    $('#commentLink').hide();
                }
            }
            else {
                $('#eventLink').hide();
                $('#shareContainer').hide();
                $('#shareLink').removeAttr("href");
                $('#commentLink').hide();
                $('#commentLink').removeAttr("href");
            }
            $('#meeting-type').text(event.extendedProps.meetingType);

            if (event.extendedProps.MeetingDocumentLink.length > 0) {
                var lang = window.location.href.toLowerCase().includes("french");
                var meetingDocuments = (event != undefined && event != null ? GetCategorizedMeetingLinks(event, lang, event.extendedProps.MeetingDocumentLink, false) : "");
                $('#MeetingDocuments').html(meetingDocuments);
                $('#MeetingDocuments').show();
                shortenLinkNames();
            }
            else {
                $('#MeetingDocuments').html("");
            }
            if(event.extendedProps.HasLiveVideo && !event.extendedProps.MeetingPassed && !event.extendedProps.IsMP3){
                var meetingDocuments = event.extendedProps.LiveVideoStandAloneLink + "<i class='las la-video la-lg'></i>"  + "  View Live Stream" + "</a>";
                $('#video-link').html(meetingDocuments);
                $('#video-link').show();
            } else {
                $('#video-link').hide();
            }

            if (event.extendedProps.DelegationRequestLink != "") {
                var delegationAria = "Delegation request for " + eventAria + ". Opens in a new tab/window";
                $('#delegationRequestLink').show();
                $('#delegationRequestLink').attr('href', event.extendedProps.DelegationRequestLink);
                $('#delegationRequestLink').attr('aria-label', delegationAria);
                $('#delegationRequestLink > img').attr('aria-label', delegationAria);
            }
            else {
                $('#delegationRequestLink').hide();
                $('#delegationRequestLink').removeAttr("href");
            }
            $('#fullCalModal').modal('show');
            $('#fullCalModal').removeAttr('aria-hidden', 'true');
            tabIndexLoop(modalContainer, false, null);
            setTimeout(function () {
                $("#closeCalModal").focus();
            }, 350);
        }

        $(".PastMeetingTypesName").each(function(i,v){
            $(v).keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38){
                    e.preventDefault();
                    $(v).parent().prevAll(":visible:first").children(":first").focus();
                } else if (keyCode == 40){
                    e.preventDefault();
                    $(v).parent().nextAll(":visible:first").children(":first").focus();
                }
                else if (keyCode == 32){
                    e.preventDefault();
                    $(v).click();
                }
            });
        });

        lazyLoadAttachments();

        setTimeout(function(){
            $('#searchMeetingType').attr("placeholder", "Optional Filter by Meeting Type search field");
            //$('#searchMeetingType').removeAttr("aria-labelledby");
            $('#searchMeetingType').keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38 || keyCode == 40){
                    $('#searchMeetingType').val($(".ss-highlighted").text());
                }
            });
        }, 1000);

        function lazyLoadAttachments(){
            $(".additional-doc-list").each(function(i,v){
                if ($($(v).children()).length > 11 ){
                    loadAdditionalItems(10, v, $(v).find(".loadMoreAttachments"), ".teaserLink");
                } else {
                    $(v).find(".loadMoreAttachments").hide();
                }
            });
        }
        function shortenLinkNames(){
            setTimeout(function(){
                $(".teaser").each(function(i,v){
                    var min = 12;
                    var parentWidth = $(v).parents('div').width();
                    var limit = 0;
                    if (parentWidth > 0){
                        limit = $(v).parents('div').width()/11;
                    } else {
                        limit = $(".attachment-list").first().width()/11;
                    }

                    limit = (limit >= min ? limit : min);
                    teaserLink(v, limit);
                });
            },150);
        }

        function teaserLink(v, maxlen){
            var txt=$(v).text().replace("...", "");
            if(txt.length>maxlen){
                var shortText=txt.substring(0, maxlen)+
                "<span onclick='$(this).hide();$(this).next().toggle();'>"+
                    "..."+
                "</span>"+
                "<span  style='display:none'>"+
                    txt.substring(maxlen, txt.length)+
                "</span>";

                $(v).html(shortText);
            }
        }

        function loadAdditionalItems(itemsToLoad, container, trigger, postFocus){
            $(trigger).hide();
            var size_cont = $($(container).children()).length;
            if (size_cont > itemsToLoad){
                $(container).children().hide();
                $(trigger).show();
                var increment = itemsToLoad;
                $(container).children().slice(0,itemsToLoad).show();
                $(trigger).keypress(function(e){
                    if(e.which == 13){
                        $(trigger).click();
                    }
                });
                $(trigger).click(function () {
                    itemsToLoad += increment;
                    $(container).children().slice(0,itemsToLoad).show();
                    if(postFocus){
                        setTimeout(function(){
                            $(container).children().eq(itemsToLoad - increment).find(postFocus).focus();
                        }, 100);
                    }
                    if (itemsToLoad>=size_cont){
                        $(trigger).hide();
                    } else {
                        $(trigger).show();
                    }
                });
            }
        }

        function loadConflictData(isFiltered) {
            if ($.fn.DataTable.isDataTable('#table-conflicts-list')) {
                $('#table-conflicts-list').dataTable().fnClearTable();
                $('#table-conflicts-list').dataTable().fnDestroy();
                $('#table-conflicts-list tbody').remove();
            }
            var searchText = $("#ctl00_MainContent_txtFilterByKeyword").val().trim();

            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType != null && filterbyMeetingType != "") {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();
            var filterByConflictMemberIds = "";
            if (filterByConflictMember != null && filterByConflictMember != "") {
                filterByConflictMemberIds = filterByConflictMember.join(',');
            }

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var conflictsTable = $('#table-conflicts-list').DataTable({
                "fnDrawCallback": function( oSettings ) {
                    $('#viewRegConflict').attr("aria-label", "Member in Conflict");
                    $('.dataTables_empty').removeAttr("valign");
                    $('.dataTables_empty').css("vertical-align", "top");
                    $('.paginate_button:not(.current)').removeAttr('aria-current');
                    $('.paginate_button.current').attr("aria-current", "page");
                    $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                },
                "dom": 'rtip',
                "bProcessing": true,
                "stateSave": false,
                "bServerSide": true,
                "autoWidth": false,
                "pagingType": "full_numbers",
                "sAjaxSource": window.location.origin+"/GetSearchData.asmx/GetConflictsData" + window.location.search,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "searchText", "value": searchText });
                    aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                    aoData.push({ "name": "filterByDate", "value": filterByDate });
                    aoData.push({ "name": "filterByConflictMemberIds", "value": filterByConflictMemberIds });
                    aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                },
                "columns": [
                    { "data": "ConflictMember", "orderable": true },
                    { "data": "MeetingTypeName", "orderable": true },
                    { "data": "MeetingStart", "orderable": true },
                    { "data": "AgendaItem", "orderable": true },
                    { "data": 'FileIcon', "orderable": false }
                ],
                "order": [[0, "asc"]],
                "columnDefs": [
                    {
                        "targets": 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'conflict');
                        }
                    },
                    {
                        "targets": 1,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingType');
                        }
                    },
                    {
                        "targets": 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingDate');
                        }
                    },
                    {
                        "targets": 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'agendaItem');
                        }
                    },
                    {
                        "targets": 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'viewRegConflict');
                        }
                    }
                ],
                language: {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sZeroRecords": "No matching records found",
                    paginate: {
                        previous: '<',
                        next: '>',
                        first: '<<',
                        last: '>>'
                    },
                    aria: {
                        paginate: {
                            previous: 'previous page',
                            next: 'next page',
                            first: 'first page',
                            last: 'last page'
                        }
                    },
                    processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                }
            });

            $('#viewRegConflict').attr("aria-label", "View all registered conflicts for the agenda item");

            if (searchText != "" || filterByDate != "" || filterbyMeetingTypeIds != "" || filterByConflictMemberIds != "") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");
            if (isFiltered && getCookie('CurrentTab') == 'list') {
                document.getElementById('FilterResults').click();
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            }
            else {
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#searchresults").hide();
            }
        }
        $(window).on('load', function(){ shortenLinkNames(); });
        $(window).resize(function(){ shortenLinkNames(); });
    </script>

    
    <script type="text/javascript">
        $(".DelegationRequest").click(function (e) {
            e.preventDefault();

            var a = $(this);
            var width = 500;
            var height = 600;
            var left = (screen.width - width) / 2;
            var top = (screen.height - height) / 2;
            window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
        });
        function closeDateRangeFilter()
        {
            filterbyDepartmentSelect.close()
            filterbyStatusSelect.close()
            filterbyStageSelect.close()
            filterbyConflictMemberSelect.close()
            filterbyMeetingTypeSelect.close()
        }
        //stop calener to misbehave in IE browser
        $("#divDateRangeFilterPopup").click(function (e) {
            e.stopImmediatePropagation();
            closeDateRangeFilter();
        });


    </script>
    <script>
        function NavigationTab_Click() {
            console.log("NavigationTab_Click()");

            $("#btnCalendarView, #btnListView, #btnConflictsView, #btnLegislationView, #btnMergedListView, .fc-myCustomLegislationButton-button, .fc-myCustomAgendaItemHistoryButton-button")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-merged-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();

            $("#searchresults").hide();
            $("#downloadIconConflictsList").hide();
            $("#mergedListHeader").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $(".fc-left").hide();
            $("#searchresults").hide();
            $("#FilterByKeyword").hide();
            $("#FilterResults").hide();
            $("#FilterByConflictMember").hide();
            $("#downloadIconConflictsList").hide();
            $("#FilterResults").hide();
            $("#btnFunnelFilterResults").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $("#mergedListHeader").hide();
            $("#filterIcon").show();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            var tab = $(this);


            switch (tab.text().trim()) {
                case "Agenda Item History":
                    setCookie('CurrentTab', 'agendaItemHistory');
                    View.Current = Views.AgendaItemHistory;

                    $("#AgendaItemHistoryViewButton, .fc-myCustomAgendaItemHistoryButton-button")
                        .addClass("fc-state-active");

                    $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    $("#agendaitemhistory-list").show();
                    $(".AgendaItemHistoryHeader").show();
                    $("#FilterByKeyword").show();

                    break;
                case "Legislation":
                    setCookie('CurrentTab', 'legislation');
                    View.Current = Views.Legislation;

                    $("#btnLegislationView, .fc-myCustomLegislationButton-button")
                        .addClass("fc-state-active");

                    $("#btnLegislationView").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    //$("#all-legislation-list").show();
                    $("#agendaitemhistory-list").show();
                    $("#FilterByKeyword").show();
                    //$(".LegislationHeader").show();
                    $(".AgendaItemHistoryHeader").show();

                    break;

                case 'Upcoming':
                    // show list tab elements //
                    $("#cal-list").show();
                    $("#all-list").show();

                    $("#btnListView").addClass("fc-state-active");
                    $("#btnListView").attr("aria-pressed", "true")
                    $("#cal-list").show();

                    View.Current = Views.List;
                    setCookie('CurrentTab', 'list');
                    $("#ctl00_MainContent_MonthMenu").show();
                    if ($("#ctl00_MainContent_IsMonthChange").val() == "1") {
                        $("#ctl00_MainContent_IsMonthChange").val("0");
                        document.getElementById('FilterResults').click();
                    }

                    $("#filterIcon").show();
                    $("#FilterResults").show();

                    //Set focus on the search bar - no longer need with new accessibility guide
                    //document.getElementById('ctl00_MainContent_txtSearch').focus();

                    break;
                default:
                    $("#filterIcon").show();
            }
        }

        $(".FilterByDate").keydown(function (e) {
            if (e.which != 9){
                return false;
            }
        });

        $(document).ready(function(){

            var datePickerMessage = (window.location.href.toLowerCase().includes("french") ? "Appuyez sur l'espace pour ouvrir. Veuillez sélectionner une date de début et de fin. Retour arrière pour effacer" : "Press space to open. Please select a start and end date. Backspace to clear");
            var daterangepicker = new ej.calendars.DateRangePicker({
                placeholder: datePickerMessage,
                dayHeaderFormat: "Abbreviated",
                keyConfigs:{
                    altDownArrow: "space"
                },
                format: 'M/d/yyyy',
                close: function() {
                    setTimeout(function(){
                        $('.dropdown-toggle').next().toggle();
                    }, 50);
                },
                open: function() {
                    setTimeout(function(){
                        $('.e-left-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your start date </caption>');
                        $('.e-right-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your end date </caption>');
                    }, 50);
                }
            });

            $( window ).resize(function() {
                if ($(window).width() >= 499) {
                    daterangepicker.isMobile = false;
                } else {
                    daterangepicker.isMobile = true;
                }
            });

            daterangepicker.appendTo('input[id="ctl00_MainContent_FilterByDate"]');

            $(".daterangepicker").click(function(event){
                event.preventDefault();
            });

            setTimeout(function(){
                $(".e-input-group-icon.e-range-icon.e-icons").attr("tabIndex", "0");
                $(".e-input-group-icon.e-range-icon.e-icons").attr("aria-label", "Filter by date button");
                $(".e-input-group-icon.e-range-icon.e-icons").keydown(function (e) {
                    if (e.which == 13 || e.which == 32){
                        daterangepicker.show();
                    } else if (e.keyCode == 27){
                        $('.dropdown-toggle').next().toggle();
                    }
                });
                var syncFusionFormLabel = "Date picker icon"
                $(".e-daterange-hidden").each(function(i,v){
                    $(v).attr("id", "datePickerIcon" + i);
                    $(v).after('<label for="datePickerIcon' + i + '" class="visuallyhidden">' + syncFusionFormLabel + ' ' + i + '</label>');
                });
            }, 300);

            $(".FilterByDate").keydown(function (e) {
                if (e.which == 8){
                    $(".FilterByDate").val("");
                }
            });
            $('input[id="ctl00_MainContent_FilterByDate"]').keydown(function(e){
                if (e.keyCode == 27){
                    $('.dropdown-toggle').next().toggle();
                }
            });
            $("body").tooltip({ placement: 'top', selector: ".Location-Tooltip" });
            $('.dropdown-toggle').on('click', function (e) {
                $(this).next().toggle();
            });
            $("body").click(function (e) {

                if (!$(e.target).closest(".dropdown-toggle, .dropdown-toggle i,.dropdown-menu, .daterangepicker, .prev, .next").length > 0 && !$('[id^=ctl00_MainContent_FilterByDate_popup]').length) {
                    $('.dropdown-toggle').next().css("display", "none");
                    if ($("#ctl00_MainContent_IsChangeFilter").val() == "1") {
                        ApplyFilterChanges();
                    }
                }
            });

            function getTab() {
               var cookie = getCookie('CurrentTab');
               if (cookie == "") {
                    var defaultTab = 'mergedlist';
                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);

                    if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                        cookie = defaultTab.toLowerCase();
                    } else {
                        cookie = urlParams.get("CurrentTab");
                    }

               }
                return cookie;
            }

            var tabCookie = getTab();

            {
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($('#ctl00_MainContent_txtSearch').val() != "" && tabCookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (tabCookie == "conflict" || tabCookie == "agendaItemHistory") {
                    $("#btnFunnelFilterResults").show();
                    $("#btnFunnelFilterResults").on('click', function () {
                        if(tabCookie == "agendaItemHistory") {
                            loadAgendaItemHistoryData(true);
                        }
                        else {
                            loadConflictData(true);
                        }

                    });
                }
                else {
                    $("#FilterResults").show();
                }
            }

            $('#ctl00_MainContent_txtSearch').on('input propertychange', function () {
                var cookie = getTab();

                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($(this).val() != "" && cookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (cookie == "conflict") {
                    $("#btnFunnelFilterResults").show();
                }
                else {
                    $("#FilterResults").show();
                }
            });

            $('#ctl00_MainContent_txtFilterByKeyword').on('input propertychange', function () {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            });

            if($(".ss-search").length > 0){
                $(".ss-search > input").first().attr("id","searchMeetingType").attr("aria-labelledby","searchMeetingType");
                $(".ss-search").first().prepend("<label for='searchMeetingType' class='sr-only'>Optional filter by Meeting Type Search</label>");

                $(".ss-search > input").last().attr("id","searchConflictMember").attr("aria-labelledby","searchConflictMember");
                $(".ss-search").last().prepend("<label for='searchConflictMember' hidden>Search </label>");
            }

            //for enabled searching the focus - no longer need with new accessibility guide
            //document.getElementById('ctl00_MainContent_txtSearch').focus();
        });

        //List Functions
        //$("#btnListView").click(NavigationTab_Click);


        $("#all-list .fc-myCustomButton-button").click(function () {
            //$("#cal-list .fc-month-button").click();
            //$("#calendar .fc-myCustomButton-button").click();
        });
        /*
        $("#calendar .fthtfhftf").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").show();
            $("#all-legislation-list").hide();
            $("#all-merged-list").hide();
            $(".fc-left").show();
        });*/

        //$(".fc-myCustomLegislationButton-button").click(NavigationTab_Click);
        /*
        $("#calendar .yh4554h45h45h").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#all-merged-list").show();
            $(".fc-left").show();
        });*/


        ////$("#all-list .fc-myCustomButton-button").click(function () {
        ////    NavigationTab_Click();

        ////    $("#all-list").show();
        ////    $("#all-conflicts-list").hide();
        ////    $("#all-legislation-list").hide();
        ////    $("#all-merged-list").hide();
        ////    $("#searchresults").hide();
        ////});

        function searchData() {
            SaveFilterOptions();
            $("#searchTableTemp").hide();
            var searchText = $('#ctl00_MainContent_txtSearch').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingTypeIds = "";
            if ((filterbyMeetingType != null && filterbyMeetingType != null) || (filterByDate != null && filterByDate !== "" )) {
                $("#btnFilter").append("<span class='dot'></span>");
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            });

            var filterByMeetingDocumentTypes = "";
            var filterByExtensions = "";
            var filterByLanguage = "";
            $(".chkMeetingDocuments").each(function () {
                if ($(this).is(":checked")) {
                    filterByMeetingDocumentTypes += $(this).val() + ",";
                }
            });

            $(".chkDocumentTypes").each(function () {
                if ($(this).is(":checked")) {
                    filterByExtensions += $(this).val() + ",";
                }
            });

            if ($("#hdnIsLanguageFilterOn").val() == "true") {
                $("#languageFilterDv").show();
                $(".chkLanguage").each(function () {
                    if ($(this).is(":checked")) {
                        filterByLanguage += $(this).val() + ",";
                    }
                });
            }
            else {
                $("#languageFilterDv").hide();
                $(".chkLanguage").each(function () {
                    filterByLanguage += $(this).val() + ",";
                });
            }

            if (searchText.trim() != "") {
                NavigationTab_Click();
                $("#searchTable > thead > tr").append("<th></th>");

                if ($.fn.DataTable.isDataTable('#searchTable')) {
                    $('#searchTable').dataTable().fnClearTable();
                    $('#searchTable').dataTable().fnDestroy();
                    $("#searchTable tbody").remove();
                }

                var searchTable =  $('#searchTable').dataTable({
                    "dom": '<"top"i>rt<"bottom"p><"clear">',
                    "pagingType": "full_numbers",
                    searching: false,
                    "bProcessing": true,
                    "bSort": false,
                    "drawCallback": function (settings) {
                        $("#searchTable thead").remove();
                        $("#searchTableTemp").show();
                        $("#searchTable_info").closest("#searchTable_wrapper").find("#searchTableTemp").remove();
                        $("#searchTable_info").parent().after($("#searchTableTemp")[0].outerHTML);
                        $("#searchTableTemp").hide();

                        if (!$("#filter-options").is(":visible")) {
                            $("#filter-options").show();
                            //  $("#filter-meeting-collapse").click();
                            // removed condition for filter default behaviour
                        }
                        $(".srch-grp-table:last").css("border-bottom", "1px solid darkgray");

                        if ($("#searchTable tr td:first").hasClass("dataTables_empty")) {
                            $("#searchTable_wrapper #searchTableTemp").hide();
                        }
                    },
                    "bServerSide": true,
                    "sAjaxSource":  "/GetSearchData.asmx/GetSearchMeetingData" + window.location.search,
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "searchText", "value": searchText });
                        aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                        aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                        aoData.push({ "name": "filterByDate", "value": filterByDate });

                        aoData.push({ "name": "filterByMeetingDocumentTypes", "value": filterByMeetingDocumentTypes });
                        aoData.push({ "name": "filterByExtensions", "value": filterByExtensions });
                        aoData.push({ "name": "filterByLanguage", "value": filterByLanguage });
                        aoData.push({ "name": "includeConflicts", "value": $("#chkConflicts").prop("checked") });
                        aoData.push({ "name": "includeComments", "value": $("#chkComments").prop("checked") });
                    },

                    "sServerMethod": "post",
                    "aoColumns": [{ mData: {} }],
                    language: {
                        "sEmptyTable": "No data available in table",
                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                        "sInfoFiltered": "(filtered from _MAX_ total entries)",
                        "sZeroRecords": "No matching records found",
                        paginate: {
                            last: '>',
                            first: '<'
                        },
                        processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                    }
                });

                $("#calendar").hide();
                $("#all-list").hide();
                $("#all-conflicts-list").hide();
                $("#all-merged-list").hide();
                $("#all-legislation-list").hide();
                $("#cal-list").show();
                $("#btnListView").removeClass("fc-state-active");
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#searchresults").show();
                if (filterbyMeetingTypeIds != "" || filterByDate != "") {
                    $('.dropdown-toggle i').addClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('1');
                }
                else {
                    $('.dropdown-toggle i').removeClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('0');
                }
                $('.dropdown-toggle').next().css("display", "none");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#filterIcon").show();
            }
            else {
                $("#searchresults").hide();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            return false;
        }

        $(function () {
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(bindDataTable); // bind data table on every UpdatePanel refresh
        });

        //https://stackoverflow.com/questions/16941104/remove-a-parameter-to-the-url-with-javascript
        function RemoveParam(key, sourceURL) {
            var returnURL = sourceURL.split("?")[0],
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    var param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                        break;
                    }
                }
                if (params_arr.length) returnURL = returnURL + "?" + params_arr.join("&");
            }
            return returnURL;
        }

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null) {
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                }
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
                else {
                    return url;
                }
            }
        }

        $(document).ready(function () {
            $( ".fc-month-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $("button[data-dismiss='modal']").on( "click", function() {
                $('#bootstrapModal').attr('aria-hidden', 'true');
                $('#fullCalModal').attr('aria-hidden', 'true');
                $("#conflictsDetailsModal").attr('aria-hidden', 'true');
                $('#LegislationDetailsModal').attr('aria-hidden', 'true');
                $('#MeetingTypeName').remove();
                $('#modalTitle').remove();
            });

            $(document).keydown(function(event) {
                if (event.keyCode == 27) {
                    $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true');
                    $('#fullCalModal').modal('hide').attr('aria-hidden', 'true');
                    $('#conflictsDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#LegislationDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#MeetingTypeName').remove();
                    $('#modalTitle').remove();
                }
                else if (event.keyCode == 13) {
                    event.preventDefault(); // to fix the issue occuring on select/unselect checkbox and hiting enter will refresh the page(site)
                }
            });

            $( ".fc-month-button" ).on( "click", function() {
                setCookie('CurrentTab', 'calendar');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "calendar", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'list');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "list", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'conflict');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "conflict", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'mergedlist');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "mergedlist", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'past');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "past", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'legislation');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "legislation", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'agendaItemHistory');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "agendaItemHistory", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            bindDataTable(); // bind data table on first page load

            $("a[target='_blank']").each(function(i,v){
                $(v).append("<i class='las la-external-link-alt'></i>");
                $(v).attr("aria-label", function(index, val) {
                    return val + '. Opens in a new tab/window'; //i == index, val == original attribute, the id
                });
            })
        });

        function onFilterMeetingDocument(ele) {
            if ($("#filter-meeting-docment").hasClass("show")) {
                $("#filter-meeting-collapse").removeClass("fa fa-caret-down");
                $("#filter-meeting-collapse").addClass("fa fa-caret-right");
            }
            else {

                $("#filter-meeting-collapse").removeClass("fa fa-caret-right");
                $("#filter-meeting-collapse").addClass("fa fa-caret-down");
            }
        }

        function SaveFilterOptions() {
            var filterByMeetingDocument = "";
            var filterByExtensions = "";
            var filterByLanguage = "";
            $(".common-filter").each(function () {
                if ($(this).is(":checked")) {
                    filterByMeetingDocument += $(this).val() + ",";
                }
            });

            $(".chkLanguage").each(function () {
                if ($(this).is(":checked")) {
                    filterByLanguage += $(this).val().replace(".", "") + ",";
                }
            });

            var filterCriteria = { filterByMeetingDocument, filterByLanguage };
            deleteCookie("MeetingFilterOptions");
            setCookie("MeetingFilterOptions", JSON.stringify(filterCriteria));
            //sessionStorage.removeItem("MeetingFilterOptions");
            //sessionStorage.setItem("MeetingFilterOptions", JSON.stringify(filterCriteria));
            $("#dvSuccessMessage").show();
            $("#dvSuccessMessage").fadeOut(3000);
            return false;
        }

        function RetrieveFilterOptions() {
            var allFilterOptions = getCookie("MeetingFilterOptions");
            //var allFilterOptions = sessionStorage.getItem("MeetingFilterOptions");
            if (typeof allFilterOptions != "undefined" && allFilterOptions != null && allFilterOptions != "") {
                allFilterOptions = JSON.parse(allFilterOptions)
                var meetingDocumentFilter = allFilterOptions.filterByMeetingDocument;
                meetingDocumentFilter = meetingDocumentFilter.split(',');
                for (var i = 0; i < meetingDocumentFilter.length; i++) {
                    var meetingDocumentOptionValue = meetingDocumentFilter[i];
                    $(".common-filter").each(function () {
                        if ($(this).val().toLowerCase() == meetingDocumentOptionValue.toLowerCase()) {
                            $(this).prop("checked", true);
                            return false;
                        }
                    });

                }
                var languageFilter = allFilterOptions.filterByLanguage;
                languageFilter = languageFilter.split(',');
                for (var i = 0; i < languageFilter.length; i++) {
                    var languageOptionValue = languageFilter[i];
                    $(".chkLanguage").each(function () {
                        if ($(this).val().replace("0,", "") == languageOptionValue) {
                            $(this).prop("checked", true);
                            return false;
                        }
                    });
                }

            }
            else {
                if ($("#hdnMeetingDocumentFilter").val() != "") {
                    var meetingDocumentFilter = $("#hdnMeetingDocumentFilter").val();
                    meetingDocumentFilter = meetingDocumentFilter.split(',');
                    for (var i = 0; i < meetingDocumentFilter.length; i++) {
                        var meetingDocumentOptionValue = meetingDocumentFilter[i];
                        if (meetingDocumentOptionValue != "") {
                            $(".common-filter").each(function () {
                                if ($(this).val().toLowerCase() == meetingDocumentOptionValue.toLowerCase()) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
                if ($("#hdnDocumentTypeFilter").val() != "") {
                    var documentTypeFilter = $("#hdnDocumentTypeFilter").val();
                    documentTypeFilter = documentTypeFilter.split(',');
                    for (var i = 0; i < documentTypeFilter.length; i++) {
                        var documentTypeOptionValue = documentTypeFilter[i];
                        if (documentTypeOptionValue != "") {
                            $(".chkDocumentTypes").each(function () {
                                var chkValue = $(this).val().toLowerCase();
                                chkValue = chkValue.replace(".", "");
                                if (chkValue == documentTypeOptionValue.toLowerCase()) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
                if ($("#hdnLanguageFilter").val() != "") {
                    var languageFilter = $("#hdnLanguageFilter").val();
                    languageFilter = languageFilter.split(',');
                    for (var i = 0; i < languageFilter.length; i++) {
                        var languageOptionValue = languageFilter[i];
                        if (languageOptionValue != "") {
                            $(".chkLanguage").each(function () {
                                var chkValue = $(this).val();
                                chkValue = chkValue.replace(".", "");
                                if (chkValue.indexOf(languageOptionValue) != -1) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
            }
        }

        function bindDataTable() {
            {

                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide();
                    $("#meetingList .dataTables_empty").removeAttr("valign");
                    $("#meetingList .dataTables_empty").css("vertical-align", "top");
                    
                }
            }

            if ($("#ctl00_MainContent_IsFilter").val() == "1") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");

            if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                $('#btnPreviousMonth').hide();
                $('#btnNextMonth').hide();
                //$('#monthText').css('margin', '0');
            }
            else {
                $('#btnPreviousMonth').show();
                $('#btnNextMonth').show();
                $('#btnPreviousMonth').css('margin', '0');
            }

            $("#btnPreviousMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $("#btnNextMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);

                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $(".fc-prev-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });

            $(".fc-next-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);

                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
        }
        var prm = Sys.WebForms.PageRequestManager.getInstance();
        if (prm != null) {
            prm.add_endRequest(function (sender, e) {


                $(".DelegationRequest").click(function (e) {
                    e.preventDefault();

                    var a = $(this);
                    var width = 500;
                    var height = 600;
                    var left = (screen.width - width) / 2;
                    var top = (screen.height - height) / 2;
                    window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
                });
                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide()
                }
                var mincount = 20;
                var maxcount = 40;
                //comment out fake lazy loading code
               // $(".meetingDetails").slice(40).hide();

                $(window).scroll(function () {
                    stickyHeader();
                    if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                        if (View.Current == Views.List ) {
                            //comment out fake lazy loading code
                            //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                            //mincount = mincount + 20;
                            //maxcount = maxcount + 20;
                        }
                    }
                });
                if ($("#ctl00_MainContent_IsDateFilter").val() == "0") {

                    //$("#ctl00_MainContent_FilterByDate").val("");
                }

                if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                    $('#btnPreviousMonth').hide();
                    $('#btnNextMonth').hide();
                    //$('#monthText').css('margin', '0');
                }
                else {
                    $('#btnPreviousMonth').show();
                    $('#btnNextMonth').show();
                    $('#btnPreviousMonth').css('margin', '0');
                }
                $("#btnPreviousMonth").click(function () {

                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });

                $("#btnNextMonth").click(function () {

                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
            });
        };
        var filterbyMeetingTypeSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lblMultiSelect',
            placeholder: 'Select Data'
        });
        var filterbyConflictMemberSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByConflictMember',
            placeholder: 'Select Data'
        });
        var filterbyStageSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStage',
            placeholder: 'Select Data'
        });
        var filterbyStatusSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStatus',
            placeholder: 'Select Data'
        });
        var filterbyDepartmentSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByDepartment',
            placeholder: 'Select Data'
        });

        function openConflictDetails(agendaItemId, meetingId, meetingTypeName) {
            $("#modelHeaderconflicts").prepend("<h2 id='MeetingTypeName' tabIndex='0' class='modal-title' aria-hidden='true' style='font-size: 17px'></h2>")
            $("#MeetingTypeName").html(meetingTypeName);

            $.ajax({
                type: "POST",
                contentType: "application/json",
                data: "{'AgendaItemId':'" + agendaItemId + "','MeetingId':'" + meetingId + "'}",
                url: "/MeetingsCalendarView.aspx/AgendaItemConflictsGetAll",
                dataType: "json",
                success: function (data) {
                    if (data.d != null && data.d != undefined) {
                        $("#table-conflicts-details-list > thead > tr").append("<th scope='col'></th>");
                        if ($.fn.DataTable.isDataTable('#table-conflicts-details-list')) {
                            $('#table-conflicts-details-list').dataTable().fnClearTable();
                            $('#table-conflicts-details-list').dataTable().fnDestroy();
                        }

                        var conflictDetailsTable = $('#table-conflicts-details-list').DataTable({
                            "dom": '<"modal-body"t><"modal-footer"p>',
                            "pagingType": "simple_numbers",
                            "pageLength": 1,
                            "ordering": false,
                            "drawCallback": function (settings) {
                                $("#table-conflicts-details-list thead").remove();
                                $('.paginate_button:not(.current)').removeAttr('aria-current');
                                $('.paginate_button.current').attr("aria-current", "page");
                                $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                            },
                            language: {
                                paginate: {
                                    previous: '<',
                                    next: '>'
                                },
                                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                            }
                        });
                        var tblRow = "";
                        for (var i = 0; i < data.d.length; i++) {
                            var element = data.d[i];
                            tblRow = '<table id="AgendaItemConflicts"><tr><td style="width:25%;"><strong>Agenda Item:</strong> </td><td style="width:75%;">' + element.ItemTitle + '</td></tr><tr><td><strong>Member in Conflict:</strong> </td><td>' + element.ConflictMember + '</td></tr><tr><td style="vertical-align: top;"><strong>Reason:</strong> </td><td>' + element.Reason + '</td></tr></table>';
                            conflictDetailsTable.row.add([tblRow]).draw();
                        }

                        $("#conflictsDetailsModal").modal('show');
                        $("#conflictsDetailsModal").removeAttr('aria-hidden');
                        $("#table-conflicts-details-list_previous").attr("aria-label", "Navigate to Previous Conflict");
                        if($("#table-conflicts-details-list_previous").hasClass("disabled")) {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "false");
                        }
                        $("#table-conflicts-details-list_next").attr("aria-label", "Navigate to Next Conflict");
                        if($("#table-conflicts-details-list_next").hasClass("disabled")) {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "false");
                        }
                    }
                    tabIndexLoop(document.querySelector("#conflictsDetailsModal"), false, null);
                    setTimeout(function(){
                        $("#modelHeaderconflicts > button").focus();
                    }, 350);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                }
            });
        }
    </script>
    

    

    <style>
        .sharing {
            display:none;;
            float: none !important;
        }

        .conflicts {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            display:none !important;;
        }

        .listView {
			display:none !important;;
        }

        .mergedListView {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            ;
        }

        .calendarView {
            ;
        }

        .pastView {
            display:none !important;;
        }
    </style>
    <input type="hidden" name="ctl00$MainContent$IsListView" id="ctl00_MainContent_IsListView" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsDateFilter" id="ctl00_MainContent_IsDateFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsConflicts" id="ctl00_MainContent_IsConflicts" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsMonthChange" id="ctl00_MainContent_IsMonthChange" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsChangeFilter" id="ctl00_MainContent_IsChangeFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$hdnMeetingDocumentFilter" id="hdnMeetingDocumentFilter" value="agenda,AgendaCover,Addendum,Merged,PostAgenda,PostMinutes,AdditionalDocuments,MergedCover,PublicComments,Conflicts,PublicComments" />
    <input type="hidden" name="ctl00$MainContent$hdnDocumentTypeFilter" id="hdnDocumentTypeFilter" value="html,pdf" />
    <input type="hidden" name="ctl00$MainContent$hdnLanguageFilter" id="hdnLanguageFilter" value="9,12" />
    <input type="hidden" name="ctl00$MainContent$hdnIsLanguageFilterOn" id="hdnIsLanguageFilterOn" value="true" />
    <script>
        function Size_Changed() {
            CurrentHeight_Send();
        }

        function CurrentHeight_Send() {
            if (window.parent !== window.self) {
                window.parent.postMessage($('body').height(), "*");
            }
        }

        function Message_Recieved(event) {
            CurrentHeight_Send();
        }

        // Setup the listener.
        if (window.addEventListener) {
            addEventListener("message", Message_Recieved, false);
        }
        else {
            attachEvent("onmessage", Message_Recieved);
        }
    </script>

            <footer id="footer" style="display: none;">
                <div class="copyright">eSCRIBE Version : 50301700</div>
            </footer>
        </div>
    </form>
</body>
</html>

  recorded_at: Mon, 15 Jan 2024 03:09:55 GMT
recorded_with: VCR 6.1.0
