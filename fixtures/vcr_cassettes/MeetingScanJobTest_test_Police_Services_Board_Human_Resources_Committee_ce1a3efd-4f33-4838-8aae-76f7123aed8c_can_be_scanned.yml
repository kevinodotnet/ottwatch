---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/Meeting.aspx?Agenda=Agenda&Id=ce1a3efd-4f33-4838-8aae-76f7123aed8c&lang=English
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=iqwnrifmju0cfq5kfwlzl5yv; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Date:
      - Sat, 22 Feb 2025 17:21:50 GMT
      Content-Length:
      - '96338'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQoNCg0KDQoNCjxodG1sIGxhbmc9ImVuIj4NCjxoZWFkPjxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPjxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZTtjaHJvbWU9MSIgLz48bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIgLz48dGl0bGU+DQoJUG9saWNlIFNlcnZpY2UgQm9hcmQgSHVtYW4gUmVzb3VyY2VzIENvbW1pdHRlZSAtIEF1Z3VzdCAzMCwgMjAyMg0KPC90aXRsZT48c2NyaXB0IHNyYz0iL2J1bmRsZXMvbW9kZXJuaXpyP3Y9aW5DVnVFRmU2SjRRMDdBMEFjUnNiSmljX1VFNU13cFJNTkdjT3RrOTRURTEiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9idW5kbGVzL2pxdWVyeT92PThPb3MwYXZEWnlQZy1jYnlWenZrSWZFUklFMURHU2Uzc1JRZENTWXJnRVExIj48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvYnVuZGxlcy9NZWV0aW5nP3Y9dnpGLTlNYmtiWGlpbk1XZ3J2eks3QzI5d2Y4cGlyWElDSFJOWThWa01YMDEiPjwvc2NyaXB0Pg0KDQogICAgICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3BvcHBlci5qc0AxLjE2LjAvZGlzdC91bWQvcG9wcGVyLm1pbi5qcyIgaW50ZWdyaXR5PSJzaGEzODQtUTZFOVJIdmJJeVpGSm9mdCsybUpiSGFFV2xkbHZJOUlPWXk1bjN6Vjl6elR0bUkzVWtzZFFSVnZveE1mb29BbyIgY3Jvc3NvcmlnaW49ImFub255bW91cyI+PC9zY3JpcHQ+DQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvY3NzP3Y9cXpEUWZlX01hWVdxOUpEZkQtYmJMcUJVUTQ3cEVLazF1NVhYZ3dNd3hnMDEiIHJlbD0ic3R5bGVzaGVldCIvPg0KPGxpbmsgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2NzcycgaHJlZj0nLi9GaWxlU3RyZWFtLmFzaHg/RG9jdW1lbnRJZD05NTM4OSc+PGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heHN0Lmljb25zOC5jb20vdnVlLXN0YXRpYy9sYW5kaW5ncy9saW5lLWF3ZXNvbWUvbGluZS1hd2Vzb21lLzEuMy4wL2Nzcy9saW5lLWF3ZXNvbWUubWluLmNzcyIgLz48bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9IkNvbnRlbnQvQ3VzdG9taXphdGlvbnMuY3NzIiAvPjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iQ29udGVudC9NZWV0aW5nLmNzcyIgLz48bGluayBocmVmPSJDb250ZW50L0NhbGVuZGVyVmlld1N0eWxlLXVwZGF0ZWQuY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+PGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9wZW4rU2FucyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgLz48bGluayBocmVmPSJmYXZpY29uLmljbyIgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIC8+DQoNCiAgICA8IS0tIFRoaXMgZmlsZSBtdXN0IGV4aXN0LCBvdGhlcndpc2Ugd2UnbGwgZ2V0IHNlcnZlciBzaWRlIGVycm9yIC0tPg0KICAgIDwhLS0gT3R0YXdhIFNpdGVpbXByb3ZlIEFuYWx5dGljcyAtLT4gDQoNCg0KPHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vc2l0ZWltcHJvdmVhbmFseXRpY3MuY29tL2pzL3NpdGVhbmFseXplXzg3NjExNi5qcyI+PC9zY3JpcHQ+DQoNCjwhLS0gZVNDUklCRSBHbG9iYWwgc2l0ZSB0YWcgKGd0YWcuanMpIC0gR29vZ2xlIEFuYWx5dGljcyAtLT4gDQoNCjxzY3JpcHQgYXN5bmMgc3JjPSJodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPVVBLTE3ODQxMTM5Ny00OSI+PC9zY3JpcHQ+IA0KDQo8c2NyaXB0PiANCg0KICB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTsgDQoNCiAgZnVuY3Rpb24gZ3RhZygpe2RhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7fSANCg0KICBndGFnKCdqcycsIG5ldyBEYXRlKCkpOyANCg0KICANCg0KICBndGFnKCdjb25maWcnLCAnVUEtMTc4NDExMzk3LTQ5Jyk7IA0KDQo8L3NjcmlwdD4gDQoNCiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KDQogICAgICAgIGJvZHkgew0KICAgICAgICAgICAgY29sb3I6ICMwMDAwMDA7DQogICAgICAgIH0NCg0KICAgICAgICBhLCBBOmxpbmssIEE6dmlzaXRlZCB7DQogICAgICAgICAgICBjb2xvcjogIzAwNTlCODsNCiAgICAgICAgfQ0KDQogICAgICAgIC5jb21tZW50LWxpbmsgew0KICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5jb21tZW50LWxpbms6aG92ZXIgew0KICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7DQogICAgICAgIH0NCg0KICAgICAgICAuZW1iZWQtcmVzcG9uc2l2ZSB7DQogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgICAgICAgICBkaXNwbGF5OiBibG9jazsNCiAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgcGFkZGluZzogMDsNCiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgICAgIH0NCg0KICAgICAgICAgICAgLmVtYmVkLXJlc3BvbnNpdmU6OmJlZm9yZSB7DQogICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7DQogICAgICAgICAgICAgICAgY29udGVudDogIiI7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5lbWJlZC1yZXNwb25zaXZlIC5lbWJlZC1yZXNwb25zaXZlLWl0ZW0sIC5lbWJlZC1yZXNwb25zaXZlIGlmcmFtZSwgLmVtYmVkLXJlc3BvbnNpdmUgZW1iZWQsIC5lbWJlZC1yZXNwb25zaXZlIG9iamVjdCwgLmVtYmVkLXJlc3BvbnNpdmUgdmlkZW8gew0KICAgICAgICAgICAgICAgIC8qcG9zaXRpb246IGFic29sdXRlOyovDQogICAgICAgICAgICAgICAgdG9wOiAwOw0KICAgICAgICAgICAgICAgIGJvdHRvbTogMDsNCiAgICAgICAgICAgICAgICBsZWZ0OiAwOw0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOw0KICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTsNCiAgICAgICAgICAgICAgICBib3JkZXI6IDA7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgLmVtYmVkLXJlc3BvbnNpdmUtMjFieTk6OmJlZm9yZSB7DQogICAgICAgICAgICBwYWRkaW5nLXRvcDogNDIuODU3MTQzJTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5lbWJlZC1yZXNwb25zaXZlLTE2Ynk5OjpiZWZvcmUgew0KICAgICAgICAgICAgcGFkZGluZy10b3A6IDU2LjI1JTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5lbWJlZC1yZXNwb25zaXZlLTRieTM6OmJlZm9yZSB7DQogICAgICAgICAgICBwYWRkaW5nLXRvcDogNzUlOw0KICAgICAgICB9DQoNCiAgICAgICAgLmVtYmVkLXJlc3BvbnNpdmUtMWJ5MTo6YmVmb3JlIHsNCiAgICAgICAgICAgIHBhZGRpbmctdG9wOiAxMDAlOw0KICAgICAgICB9DQoNCg0KICAgICAgICBodG1sLCBib2R5LCBmb3JtIHsNCiAgICAgICAgICAgIGhlaWdodDogMTAwJTsNCiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgICAgIH0NCg0KICAgICAgICAjQWdlbmRhZHJvcGRvd25tZW51LmRyb3Bkb3duLW1lbnUgew0KICAgICAgICAgICAgcmlnaHQ6IDBweDsNCiAgICAgICAgICAgIGxlZnQ6IDBweDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5Gb250SW5jcmVhc2UgKiB7DQogICAgICAgICAgICBmb250LXNpemU6IDFlbTsNCiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOw0KICAgICAgICB9DQoNCiAgICAgICAgLkZvbnREZWNyZWFzZSAqIHsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NWVtOw0KICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgICAgIH0NCg0KICAgICAgICAucGFuZWwgew0KICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjJweDsNCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDsNCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDsNCiAgICAgICAgICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAxcHggMXB4IHJnYmEoMCwwLDAsLjA1KTsNCiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDFweCByZ2JhKDAsMCwwLC4wNSk7DQogICAgICAgIH0NCg0KICAgICAgICAucGFuZWwtZGVmYXVsdCB7DQogICAgICAgICAgICBib3JkZXItY29sb3I6ICNkZGQ7DQogICAgICAgIH0NCg0KICAgICAgICAucGFuZWwtaGVhZGluZyB7DQogICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDE1cHg7DQogICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7DQogICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogM3B4Ow0KICAgICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogM3B4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLnBhbmVsLWRlZmF1bHQgPiAucGFuZWwtaGVhZGluZyB7DQogICAgICAgICAgICBjb2xvcjogIzAwMDsNCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQogICAgICAgICAgICBib3JkZXItY29sb3I6ICNkZGQ7DQogICAgICAgIH0NCg0KICAgICAgICAucGFuZWwtYm9keSB7DQogICAgICAgICAgICBwYWRkaW5nOiAxNXB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLyp1bC5uYXZiYXItbmF2ID4gbGkgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6aW5saW5lLWJsb2NrOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAubmF2YmFyLW5hdiA+IGxpID4gYSB7DQogICAgICAgICAgICAgICAgcGFkZGluZy10b3A6NXB4ICFpbXBvcnRhbnQ7IHBhZGRpbmctYm90dG9tOjVweCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLm5hdmJhciB7DQogICAgICAgICAgICAgICAgbWluLWhlaWdodDozMnB4ICFpbXBvcnRhbnQNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIC5uYXZiYXItdG9nZ2xlIHsNCiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOjRweDsNCiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOjRweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDo0cHg7DQogICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206NHB4Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuYWZmaXggeyANCiAgICAgICAgICAgICAgICByaWdodDowcHg7DQogICAgICAgICAgICAgICAgdG9wOjMycHg7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5hZmZpeC10b3Agew0KICAgICAgICAgICAgICAgIHJpZ2h0OjBweDsNCiAgICAgICAgICAgICAgICBwb3NpdGlvbjpmaXhlZDsNCiAgICAgICAgICAgICAgICB0b3A6MzJweDsNCiAgICAgICAgICAgIH0qLw0KDQogICAgICAgIC5EZXRhaWxzID4gZGl2IHsNCiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDBweCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAyJTsNCiAgICAgICAgfQ0KDQogICAgICAgIGEuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHsNCiAgICAgICAgICAgIG91dGxpbmU6IHNvbGlkIDFweCAjRkZGRkZGOw0KICAgICAgICB9DQoNCiAgICAgICAgI2xua1Bvd2VyZWRCeTpmb2N1cyB7DQogICAgICAgICAgICBvdXRsaW5lOiBzb2xpZCAxcHggI0ZGRkZGRjsNCiAgICAgICAgICAgIHBhZGRpbmc6IDRweDsNCiAgICAgICAgfQ0KDQogICAgICAgIC8qQG1lZGlhIChtYXgtaGVpZ2h0OiA3NjBweCkgew0KICAgICAgICAgICAgICAgIC5uYXZiYXItZml4ZWQtYm90dG9tIHsNCiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTpub25lOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIEBtZWRpYSAobWluLWhlaWdodDogNzYwcHgpIHsNCiAgICAgICAgICAgICAgICBib2R5IHsNCiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDMycHg7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHsNCiAgICAgICAgICAgICAgICAgLkFnZW5kYUl0ZW1Db250YWluZXIgPiAuQWdlbmRhSXRlbUNvbnRhaW5lciB7DQogICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OjRlbSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0qLw0KDQogICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkgew0KICAgICAgICAgICAgLkFnZW5kYUl0ZW1Db250YWluZXIgPiAuQWdlbmRhSXRlbUNvbnRhaW5lciB7DQogICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDJlbSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDQwMHB4KSB7DQogICAgICAgICAgICAuQWdlbmRhSXRlbUNvbnRhaW5lciA+IC5BZ2VuZGFJdGVtQ29udGFpbmVyIHsNCiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMWVtICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogMzAwcHgpIHsNCiAgICAgICAgICAgIC5BZ2VuZGFJdGVtQ29udGFpbmVyID4gLkFnZW5kYUl0ZW1Db250YWluZXIgew0KICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwZW0gIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIEBtZWRpYSAobWluLXdpZHRoOjc2OHB4KSBhbmQgKG1heC13aWR0aDo5OTFweCkgew0KICAgICAgICAgICAgLkFnZW5kYUl0ZW1TZWxlY3RlZERldGFpbHMge2Rpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfQ0KDQogICAgICAgICAgICAudmlzaWJsZS1zbS5zaGFyaW5nLlNvY2lhbEljb25zIHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICBmbG9hdDogbm9uZSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCB7DQogICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbUljb25zLA0KICAgICAgICAgICAgLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAuQWdlbmRhSXRlbUljb25zew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCg0KDQogICAgICAgICAgICAuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCA+ICogPiAuQWdlbmRhSXRlbU5hdmlnYXRlLmluZGVudCA+IC5BZ2VuZGFJdGVtVGl0bGUuaGFzUHVibGljQ29tbWVudEJ1dHRvbiB7DQogICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMzVweDsNCiAgICAgICAgICAgICAgICB3aWR0aDogYXV0byAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLyouQWdlbmRhSXRlbUljb25zIHsNCiAgICAgICAgICAgIHdpZHRoOiAyMiUgIWltcG9ydGFudDsNCiAgICAgICAgfSovDQoNCiAgICAgICAgLnZpc2libGUteHMgdmlzaWJsZS1zbSBzaGFyaW5nIFNvY2lhbEljb25zIHsNCiAgICAgICAgICAgIHdpZHRoOiAxMCU7DQogICAgICAgICAgICBwYWRkaW5nLXRvcDogNXB4Ow0KICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0Ow0KICAgICAgICB9DQoNCiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7DQogICAgICAgICAgICAudmlzaWJsZS14cy5zaGFyaW5nLlNvY2lhbEljb25zIHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICBmbG9hdDogbm9uZSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCB7DQogICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbUljb25zLA0KICAgICAgICAgICAgLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAuQWdlbmRhSXRlbUljb25zIHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gKiA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZS5oYXNQdWJsaWNDb21tZW50QnV0dG9uIHsNCiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDY1cHg7DQogICAgICAgICAgICAgICAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKGRldmljZS13aWR0aDogNzY4cHgpIHsNCg0KICAgICAgICAgICAgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUgew0KICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IC01cHggIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLmRyb3Bkb3duLCAuZHJvcGxlZnQsIC5kcm9wcmlnaHQsIC5kcm9wdXAgew0KICAgICAgICAgICAgICAgIHdpZHRoOiBmaXQtY29udGVudCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuY29sbGFwc2U6bm90KC5zaG93KSB7DQogICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLm5hdmJhci1saWdodCAubmF2YmFyLXRvZ2dsZXIgew0KICAgICAgICAgICAgICAgIGZsb2F0OiByaWdodDsNCiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICNkZGQgIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHsNCiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC52aXNpYmxlLXhzLnZpc2libGUtc20uc2hhcmluZy5Tb2NpYWxJY29ucyB7DQogICAgICAgICAgICAvKndpZHRoOiAxMCU7DQogICAgICAgICAgICBwYWRkaW5nLXRvcDogNXB4Ow0KICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0Ow0KICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgICAgICAgICAgcmlnaHQ6IC04cHg7DQogICAgICAgICAgICBtYXJnaW4tdG9wOiAtMjJweDsqLw0KICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgICAgICAgICAgcmlnaHQ6IDEwcHg7DQogICAgICAgICAgICBtYXJnaW46IDA7DQogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgICAgICAgICB0b3A6IDUwJTsNCiAgICAgICAgICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsNCiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOw0KICAgICAgICB9DQoNCiAgICAgICAgICAgIC52aXNpYmxlLXhzLnZpc2libGUtc20uc2hhcmluZy5Tb2NpYWxJY29ucyA+ICogPiBzcGFuLmJ0bi5idG4tcHJpbWFyeS5idG4tc20gew0KICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweCA1cHggMHB4IDVweDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLnZpc2libGUteHMudmlzaWJsZS1zbS5zaGFyaW5nLlNvY2lhbEljb25zLA0KICAgICAgICAgICAgLnZpc2libGUteHMudmlzaWJsZS1zbS5zaGFyaW5nLlNvY2lhbEljb25zID4gKiwNCiAgICAgICAgICAgIC52aXNpYmxlLXhzLnZpc2libGUtc20uc2hhcmluZy5Tb2NpYWxJY29ucyA+ICogPiBzcGFuIHsNCiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHggIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgLlNvY2lhbEljb25zIHsNCiAgICAgICAgICAgIGZsb2F0OiByaWdodDsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgLnBvd2VyZWRCeSwgLnBvd2VyZWRCeSBhIHsNCiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50Ow0KICAgICAgICB9DQoNCiAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS13aWR0aDogNzY4cHgpIGFuZCAobWF4LWRldmljZS13aWR0aDogMTAyNHB4KSBhbmQgKG9yaWVudGF0aW9uIDogcG9ydHJhaXQpIHsNCiAgICAgICAgICAgIC52aXNpYmxlLXhzLnZpc2libGUtc20uc2hhcmluZy5Tb2NpYWxJY29ucw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJpZ2h0OiAtOHB4ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKGRldmljZS13aWR0aDogMjgwcHgpIGFuZCAoZGV2aWNlLWhlaWdodDogNjUzcHgpIHsNCiAgICAgICAgICAgIC52aXNpYmxlLXhzLnZpc2libGUtc20uc2hhcmluZy5Tb2NpYWxJY29ucw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB1bnNldDsNCiAgICAgICAgICAgICAgICByaWdodDogdW5zZXQ7DQogICAgICAgICAgICAgICAgbWFyZ2luOiB1bnNldDsNCiAgICAgICAgICAgICAgICB0b3A6IHVuc2V0Ow0KICAgICAgICAgICAgICAgIC1tcy10cmFuc2Zvcm06IHVuc2V0Ow0KICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdW5zZXQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgLnBhY2thZ2VOYXYgew0KICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7DQogICAgICAgIH0NCg0KICAgIDwvc3R5bGU+DQo8L2hlYWQ+DQo8Ym9keSBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2U1ZTVlNSI+DQogICAgPGZvcm0gbmFtZT0iZm9ybTEiIG1ldGhvZD0icG9zdCIgYWN0aW9uPSIuL01lZXRpbmcuYXNweD9JZD1jZTFhM2VmZC00ZjMzLTQ4MzgtOGFhZS03NmY3MTIzYWVkOGMmYW1wO0FnZW5kYT1BZ2VuZGEmYW1wO2xhbmc9RW5nbGlzaCIgaWQ9ImZvcm0xIj4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9fVklFV1NUQVRFIiBpZD0iX19WSUVXU1RBVEUiIHZhbHVlPSJhS2x5QWRpcjcwY2dYOU54dUhmSExhTXhCOE5tektFMDJkM3U2dm96TVhzcHkxeEtKcmlaaXN2UjlHakVkTThoK25rK0F3VHd1NithYmZhYWg3aUI5L3RoL2xJcVNIK1N1MHp4ejBwQ3RPK0ZQOUwwQlVOUzhRRGhRb3hBTG9EYzc0L2VQQXFQbnRQcFJBaVRBNHRhMkppazFLTUM2VkdQYThNZ1dydTlqK1prY3ZCZ3F2eUEvUHVIV0xsMVgySmI0SktON0E4S3hhU082ZTEvSlY0cmZvbllDalNGbmZxMEI3Nkg1VGpDTGFUdDFRT2Y3WTdYeWduWVd6VjJjQThVcUE2MlJpUytNd1J2MFJnY3RvTHlHZUNQSXBPNURHUi84Q1ZycVRxN2VzT09XeG1rMWlSeVIrQ1h1WnNKZVBWUGRoWm5Uay9wL01xd3VQVVM0SC93eTRtbzFBdjY4N2EyM2ZKZm90Tm5aMCs5ZzhLRVFQMTF1K0tVV1FORDhiWWFIKzNmOVpaTWp3bERnOXI3TWlrNlhsS0FjUHFFVEFqY21TM2h0d0szMlVSblpzdU05ekhHK1FoMlBxR0cwbWNnZmc2MlRlT1Z1d0FQNGVUKy85RkhkWnh3WlROcTRaVWVCRXB0YVV1dmdCblQ2RTV4T3dIYlVGQjZGanJIKzQ1MisxRVRQQ3gvOFYyaWw0dHhETjRYbmdSam5UazYrSXJlK0ZDUE4vK3dXV2U2Qm9aM1NYMDZWYTQ0MVNYN0k5YTFtaC9sWjFRRkRpSlo5MmNvS3pXNVJucSt4amsrZU9nSWNNWEZOVG5sSWsvY0gvUHdtWlduejVkVHhzUDEzcDA2Y25BcmlOR3VkcGUyaFZHTVJnWVBjc2YwZFBESTh4NTFrMkpQemxFbHhXMmp3RHM2SUdtOENVRU9adkNXa21LT2NFN1R6VGlrNGZvWWd4U2V0SkI2YWx4dHVBcngwODB2MGEvbUdNQVlMcGNRYU5hdXZjNG96SE85ZnBtWlpWTzIiIC8+DQoNCg0KPHNjcmlwdCBzcmM9Ii9idW5kbGVzL01zQWpheEpzP3Y9RDZWTjBmSGx3RlNJV2piVnppNm1aeUU5THMtNExOclNTWVZHUlU0NlhGODEiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iU2NyaXB0cy9ib290c3RyYXAubWluLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9IlNjcmlwdHMvcmVzcG9uZC5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2J1bmRsZXMvV2ViRm9ybXNKcz92PU44dHltTDlLcmFNTEdBTUZ1UHljZkgzcFhlNnVVbFJYZGh0WXY4QV9qVVUxIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEVHRU5FUkFUT1IiIGlkPSJfX1ZJRVdTVEFURUdFTkVSQVRPUiIgdmFsdWU9IjQ5MzZEQkI3IiAvPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEVFTkNSWVBURUQiIGlkPSJfX1ZJRVdTVEFURUVOQ1JZUFRFRCIgdmFsdWU9IiIgLz4NCiAgICAgICAgDQoNCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgZnVuY3Rpb24gaWZyYW1lTG9hZGVkKGlmcmFtZUhlaWdodCkgew0KICAgICAgICAgICAgICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgICAgICBpZiAoaWZyYW1lSGVpZ2h0ID4gd2luZG93SGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBuZXdIZWlnaHQgPSAod2luZG93SGVpZ2h0IC0gMTg1KSArICJweCI7DQogICAgICAgICAgICAgICAgICAgICQoJyNib290c3RyYXBNb2RhbEJvZHknKS5oZWlnaHQobmV3SGVpZ2h0KTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI21vZGFsSWZyYW1lRGl2JykuaGVpZ2h0KG5ld0hlaWdodCk7DQoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJyNtb2RhbElmcmFtZURpdicpLmhlaWdodCgpIC0gODU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gaWZyYW1lSGVpZ2h0ICsgInB4IjsNCiAgICAgICAgICAgICAgICAgICAgJCgnI2Jvb3RzdHJhcE1vZGFsQm9keScpLmhlaWdodChuZXdIZWlnaHQpOw0KICAgICAgICAgICAgICAgICAgICAkKCcjbW9kYWxJZnJhbWVEaXYnKS5oZWlnaHQobmV3SGVpZ2h0KTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIwIjsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICQoZG9jdW1lbnQpLmtleWRvd24oZnVuY3Rpb24oZXZlbnQpIHsgDQogICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMjcpIHsgDQogICAgICAgICAgICAgICAgICAgIGNsb3NlQm9vdHN0cmFwTW9kYWwoKTsNCiAgICAgICAgICAgICAgICAgICAgJCgiLkNvbW1lbnRJY29uIikuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgZnVuY3Rpb24gY2xvc2VCb290c3RyYXBNb2RhbCgpIHsNCiAgICAgICAgICAgICAgICAkKCcjYm9vdHN0cmFwTW9kYWwnKS5tb2RhbCgnaGlkZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsgDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKXsNCiAgICAgICAgICAgICAgICB2YXIgd2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTsNCiAgICAgICAgICAgICAgICB2YXIgc3RhbmRhcmRIZWlnaHQgPSAkKCcuU2VsZWN0ZWRJdGVtQ291bnRlcicpLmhlaWdodCgpOw0KICAgICAgICAgICAgICAgIHZhciB0aXRsZUhlaWdodCA9ICQoJy5TZWxlY3RlZEl0ZW1UaXRsZScpLmhlaWdodCgpOw0KDQogICAgICAgICAgICAgICAgLy9pZiAoV2luZG93X09uUmVzaXplKSB7DQogICAgICAgICAgICAgICAgLy8gICAgV2luZG93X09uUmVzaXplKCk7DQogICAgICAgICAgICAgICAgLy99DQoNCiAgICAgICAgICAgICAgICBpZih0aXRsZUhlaWdodCA+IHN0YW5kYXJkSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgICAgICQoJy5wYW5lbC1oZWFkaW5nLmNsZWFyZml4ID4uc2hhcmluZy5Tb2NpYWxJY29ucyA+IGEuQ29tbWVudEljb24gPiBzcGFuJykuY3NzKCJtYXJnaW4tdG9wIiwgIjRweCIpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vUmVwbGFjZSB0aGUgTGVhdmUgQ29tbWVudCBidXR0b24gdG8gaWNvbg0KICAgICAgICAgICAgICAgICQoJyNuYXJyb3ctbGVhdmUtY29tbWVudC1idXR0b24nKS5odG1sKCI8c3BhbiBjbGFzcz0nbGFzIGxhLWNvbW1lbnQtYWx0JyBzdHlsZT0ndmVydGljYWwtYWxpZ246IG1pZGRsZScgdGl0bGU9J0xlYXZlIENvbW1lbnQnPjwvc3Bhbj4iKTsNCg0KICAgICAgICAgICAgICAgIGlmKHdpbmRvd1dpZHRoIDw9IDUzOSl7DQogICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGEiKS5jc3MoInBhZGRpbmctdG9wIiwgJCgiLmFmZml4LXRvcCIpLmhlaWdodCgpKzUpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGEiKS5jc3MoInBhZGRpbmctdG9wIiwgIjE4cHgiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgZnVuY3Rpb24gQ2hlY2tpT1NEZXZpY2UoKSB7DQogICAgICAgICAgICAgICAgdmFyIHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Ow0KICAgICAgICAgICAgICAgIGlmICh1c2VyQWdlbnQubWF0Y2goL2lQYWQvaSkgfHwgdXNlckFnZW50Lm1hdGNoKC9pUGhvbmUvaSkpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gaVBhZCBvciBpUGhvbmUNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgib3ZlcmZsb3ciKTsgIA0KICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygiY2hlY2tJT1NEZXZpY2UgY2FsbGVkIik7DQogICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkKGRvY3VtZW50KS5yZWFkeSgNCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsNCiAgICAgICAgICAgICAgICAgICAgaWYodXJsLmluZGV4T2YoInB1Yi1vdHRhd2EiKSAhPSAtMSB8fCB1cmwuaW5kZXhPZigicHViLXN1cHBvcnQiKSAhPSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUhlYWRlckRldGFpbHNUYWJsZScpLmZpbmQoJy5MYWJlbDpjb250YWlucygiUMOpcmlvZGU6IiknKS50ZXh0KCdEYXRlIDonKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFIZWFkZXJEZXRhaWxzVGFibGUnKS5maW5kKCcuTGFiZWw6Y29udGFpbnMoIkxpZXU6IiknKS50ZXh0KCdFbmRyb2l0IDonKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICQoIi5EZXRhaWxzIikuYWRkQ2xhc3MoImQtc20tYmxvY2siKTsNCiAgICAgICAgICAgICAgICAgICAgJCgiLkRldGFpbHMiKS5hdHRyKCJhcmlhLWxpdmUiLCAicG9saXRlIik7DQogICAgICAgICAgICAgICAgICAgICQoIi5wYW5lbC1oZWFkaW5nIikucHJlcGVuZCgiPHNwYW4gY2xhc3M9J3Zpc3VhbGx5aGlkZGVuJz5BZ2VuZGEgaXRlbSBkZXRhaWxzIHBvcHVwPC9zcGFuPiIpOw0KICAgICAgICAgICAgICAgICAgICAkKCIuYWZmaXgtdG9wIikuYXBwZW5kKCI8ZGl2IGNsYXNzPSdjb2xsYXBzZS1zdHJlYW0nPjxpIGNsYXNzPSdsYXMgbGEtdmlkZW8gb3Blbi1wbGF5ZXInPjwvaT48L2Rpdj4iKTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCIuY29sbGFwc2Utc3RyZWFtIikub24oImNsaWNrIiwgZnVuY3Rpb24oaSx2KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCQoIi5WaWRlb1BsYXllckNvbnRhaW5lciIpLmNzcygiZGlzcGxheSIpID09ICJub25lIil7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLlZpZGVvUGxheWVyQ29udGFpbmVyIikuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5sYS12aWRlbyIpLmFkZENsYXNzKCJvcGVuLXBsYXllciIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGEiKS5jc3MoInBhZGRpbmctdG9wIiwgJCgiLmFmZml4LXRvcCIpLmhlaWdodCgpKzUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZigpLnBhdXNlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLmxhLXZpZGVvIikucmVtb3ZlQ2xhc3MoIm9wZW4tcGxheWVyIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLlZpZGVvUGxheWVyQ29udGFpbmVyIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGEiKS5jc3MoInBhZGRpbmctdG9wIiwgIjE4cHgiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gDQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICAkKCcuVmlkZW9QbGF5ZXInKS5hcHBlbmQoJCgnI1ZpZGVvUGxheWVyQ29udHJvbCcpLmRldGFjaCgpKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZigkKHdpbmRvdykud2lkdGgoKSA8PSA1Mzkpew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgiLkFnZW5kYSIpLmNzcygicGFkZGluZy10b3AiLCAkKCIuYWZmaXgtdG9wIikuaGVpZ2h0KCkqMS4wNSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBtaW51dGVzIHNob3cgaWYgdGhlIG1lZXRpbmcgc3RhcnRzIG9yIGVuZHMgcGFydGlhbGx5IHRocm91Z2ggYW4gaG91ciAvLw0KICAgICAgICAgICAgICAgICAgICAkKCIuVGltZSA+IC5NaW51dGVzIikuZWFjaCgNCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKGVsZW1lbnQpLnRleHQoKSAhPSAiOjAwIikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICk7DQoNCiAgICAgICAgICAgICAgICAgICAgJCgiW2RhdGEtdG9nZ2xlPSd0b29sdGlwJ10iKS50b29sdGlwKHtwbGFjZW1lbnQ6J3RvcCcsIGJvdW5kYXJ5OiAnd2luZG93JywgdHJpZ2dlciA6ICdob3Zlcid9KTsNCg0KICAgICAgICAgICAgICAgICAgICAvL0FkZC9SZW1vdmUgcHVibGljIGNvbW1lbnQgaWNvbnMgZm9yIGVhY2ggYWdlbmRhIGl0ZW0gKHJlYWwgdGltZSkNCiAgICAgICAgICAgICAgICAgICAgdmFyIGFnZW5kYUl0ZW0gPSAkKCcuQWdlbmRhSXRlbScpOw0KDQogICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhZ2VuZGFJdGVtLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lID1hZ2VuZGFJdGVtW2ldLmNsYXNzTmFtZS5tYXRjaCgvQWdlbmRhSXRlbVxkKy8pOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2xhc3NOYW1lKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gY2xhc3NOYW1lWzBdLnJlcGxhY2UoIkFnZW5kYUl0ZW0iLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaWQpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2FkUHVibGljQ29tbWVudEljb25zKGlkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBDaGVja2lPU0RldmljZSgpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRUYWIgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKG5ldyBSZWdFeHAoIl4oPzouKlsmXFw/XSIgKyBlbmNvZGVVUklDb21wb25lbnQoIlRhYiIpLnJlcGxhY2UoL1tcLlwrXCpdL2csICJcXCQmIikgKyAiKD86XFw9KFteJl0qKSk/KT8uKiQiLCAiaSIpLCAiJDEiKSk7DQogICAgICAgICAgICAgICAgICAgIFNlbGVjdEl0ZW0oZ2V0UGFyYW1ldGVyQnlOYW1lKCJJdGVtIikgfHwgKCh3aW5kb3cubG9jYXRpb24uaGFzaCB8fCAiIikucmVwbGFjZSgvIy9nLCAnJykpLCB0cnVlLCBzZWxlY3RlZFRhYik7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAkKCIjcGFja2FnZS1jb250YWluZXIiKS5vbigic2Nyb2xsIiwgZnVuY3Rpb24oKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKCIjcGFja2FnZS1jb250YWluZXIiKS5zY3JvbGxUb3AoKSA+PSA0OCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLmFmZml4LXRvcCIpLmNzcygidG9wIiwgIjVweCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuYWZmaXgtdG9wIikuY3NzKCJ0b3AiLCAiNDhweCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCJbdGFiaW5kZXhdIikuZmlsdGVyKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpcykuYXR0cigidGFiaW5kZXgiKSA+IDApeyAkKHRoaXMpLmF0dHIoInRhYmluZGV4IiwgIjAiKX0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAkKCIuQWdlbmRhSXRlbVRpdGxlIikub24oImNsaWNrIiwgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB0YWJJbmRleExvb3AoZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLkFnZW5kYUl0ZW1TZWxlY3RlZERldGFpbHNDb250YWluZXIiKSk7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuRGV0YWlscyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdLCBbdHlwZT1oaWRkZW5dKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsIFt0YWJpbmRleD0iMCJdLCBbY29udGVudGVkaXRhYmxlXSc7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHMgPSBtb2RhbENvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNhYmxlRWxlbWVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmb2N1c2FibGVFbGVtZW50cyk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoID4gMCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNhYmxlRWxlbWVudHNbMF0uZm9jdXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgJCgiLkFnZW5kYUl0ZW1Db250YWluZXIiKS5lYWNoKGZ1bmN0aW9uKGksdil7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWVudEljb24gPSAkKHYpLmZpbmQoIi5BZ2VuZGFJdGVtSWNvbnMiKS5maW5kKCIubGEtY29tbWVudC1hbHQiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNvbW1lbnRJY29uLmxlbmd0aCA+IDApew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRJY29uLmFwcGVuZCgiPHNwYW4gY2xhc3M9J3NyLW9ubHknPlB1YmxpYyBDb21tZW50czo8L3NwYW4+Iik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQoNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICApOw0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFZpZGVvUGxheWVyRm9jdXMoY29udGFpbmVyKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgaWYoY29udGFpbmVyKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCJWaWRlbyBDb250YWluZXIgZm91bmQiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCJWaWRlbyBDb250YWluZXIgbm90IGZvdW5kLiIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSkNCgkJCQkudGhlbihkYXRhID0+IHsNCgkJCQkgICAgdGFiSW5kZXhMb29wVmlkZW8oY29udGFpbmVyKTsNCgkJCQl9KQ0KCQkJCS5jYXRjaChlcnJvciA9PiB7DQoJCQkJICAgIGNvbnNvbGUubG9nKCJBbiBlcnJvciBvY2N1cnJlZCB3aGVuIHNldHRpbmcgZm9jdXMgb24gdmlkZW8gY29udGFpbmVyOiIsIGVycm9yKTsNCgkJCQl9KTsNCiAgICAgICAgICAgIH0NCgkJCQ0KICAgICAgICAgICAgZnVuY3Rpb24gdGFiSW5kZXhMb29wVmlkZW8oY29udGFpbmVyKSB7DQogICAgICAgICAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCB0cmFwVGFiS2V5KTsNCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0cmFwVGFiS2V5KGUpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gOSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaGlsaWdodGVkIC5BZ2VuZGFJdGVtVGl0bGUgYScpLmZvY3VzKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmhpbGlnaHRlZCBhLlNlbGVjdGFibGVJdGVtJykuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4TG9vcChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlsc0NvbnRhaW5lciIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0JCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB2YXIgcGxheWVyID0gJCgnLmZwLXBsYXknKTsNCiAgICAgICAgICAgICAgICBpZihwbGF5ZXIpIHsNCiAgICAgICAgICAgICAgICAgICAgcGxheWVyLmF0dHIoJ3RhYmluZGV4JywgMCk7DQogICAgICAgICAgICAgICAgICAgIHBsYXllci5mb2N1cygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgZnVuY3Rpb24gU2VsZWN0SXRlbShpZCwgc2Nyb2xsLCB0YWIpIHsNCiAgICAgICAgICAgICAgICBpZih0YWIgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgICAgICB0YWIgPSAnYXR0YWNobWVudHMnDQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy9UaGUgZnVuY3Rpb24gdW5kZXIgZVNjcmliZS5BZ2VuZGEgb25seSB0YWtlIHR3byBwYXJhbWV0ZXIuIEluIG9yZGVyIHRvIG1ha2UgdGhlIGljb24gbGluayB3b3JrcywgSSBoYXZlIHRvIGRvIGEgd29yayBhcm91bmQgZm9yIHRoaXMgKHJldXNlIHRoZSBzY3JvbGwgcGFyYW1ldGVyKS4NCiAgICAgICAgICAgICAgICAvL1RoaXMgc2hvdWxkIG5vdCBhZmZlY3QgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHNjcm9sbC4NCiAgICAgICAgICAgICAgICBpZihzY3JvbGwgPT0gJ2F0dGFjaG1lbnRzJyB8fCBzY3JvbGwgPT0gJ2NvbW1lbnRzJykgew0KICAgICAgICAgICAgICAgICAgICB0YWIgPSBzY3JvbGw7DQogICAgICAgICAgICAgICAgICAgIHNjcm9sbCA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB1cmwgLy8NCiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoJycsICcnLCBVcGRhdGVRdWVyeSgiSXRlbSIsIGlkLnRvU3RyaW5nKCkpKTsgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSgnJywgJycsIFVwZGF0ZVF1ZXJ5KCJUYWIiLCB0YWIpKTsNCg0KICAgICAgICAgICAgICAgIHZhciB2aWRlb0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5WaWRlb1BsYXllckNvbnRhaW5lciIpOw0KICAgICAgICAgICAgICAgIHNldFZpZGVvUGxheWVyRm9jdXModmlkZW9Db250YWluZXIpOw0KDQogICAgICAgICAgICAgICAgLy9VcGRhdGUgdGhlIENpdGl6ZW4gQ29tbWVudCB1c2luZyBhamF4Lg0KICAgICAgICAgICAgICAgIExvYWRQdWJsaWNDb21tZW50KGlkLCBzY3JvbGwpOw0KDQogICAgICAgICAgICAgICAgaWYoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyApIHsNCiAgICAgICAgICAgICAgICAgICAgTG9hZFB1YmxpY0NvbW1lbnRJY29ucyhpZCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy8vLyB0cmlnZ2VyIGV2ZW50IC8vDQogICAgICAgICAgICAgICAgLy8kKGRvY3VtZW50KS50cmlnZ2VyKCJpdGVtOnNlbGVjdGVkIiwgW2lkLCBzY3JvbGxdKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZnVuY3Rpb24gTG9hZFB1YmxpY0NvbW1lbnQoaWQsIHNjcm9sbCkgew0KICAgICAgICAgICAgICAgIGlmKGlkKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBtZWV0aW5nSWQgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKG5ldyBSZWdFeHAoIl4oPzouKlsmXFw/XSIgKyBlbmNvZGVVUklDb21wb25lbnQoIklkIikucmVwbGFjZSgvW1wuXCtcKl0vZywgIlxcJCYiKSArICIoPzpcXD0oW14mXSopKT8pPy4qJCIsICJpIiksICIkMSIpKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmd1YWdlID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gucmVwbGFjZShuZXcgUmVnRXhwKCJeKD86LipbJlxcP10iICsgZW5jb2RlVVJJQ29tcG9uZW50KCJsYW5nIikucmVwbGFjZSgvW1wuXCtcKl0vZywgIlxcJCYiKSArICIoPzpcXD0oW14mXSopKT8pPy4qJCIsICJpIiksICIkMSIpKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmluZGV4ID0gJCgnI0FnZW5kYUl0ZW1BZ2VuZGFJdGVtJyArIGlkICsgJ1RpdGxlSGVhZGVyID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZSA+IC5BZ2VuZGFJdGVtVGl0bGUgPiBBJykuYXR0cigidGFiaW5kZXgiKTsNCg0KICAgICAgICAgICAgICAgICAgICAkLmFqYXgoew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLA0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAiTWVldGluZy5hc3B4L0dlbmVyYXRlUHVibGljQ29tbWVudCIsDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAie2lkOiAnIiArIGlkICsgIicsIG1lZXRpbmdJZDogJyIgKyBtZWV0aW5nSWQgKyAiJywgbGFuZzogJyIgKyBsYW5ndWFnZSArICInLCB0YWJpbmRleDogJyIgKyB0YWJpbmRleCArICInfSIsDQogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiLA0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChtc2cpIHsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ0FnZW5kYUl0ZW1QdWJsaWNDb21tZW50JyArIGlkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSBpdGVtcy5sZW5ndGggLSAxOyBpID49IDAgOyBpLS0pew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBpdGVtc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQobXNnLmQpLmFwcGVuZFRvKCIuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnRMaXN0Iik7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnRMaXN0SW5kZW50JyArIGlkKS5jaGlsZHJlbignLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50SGVhZGVyJykubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz0iQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnRIZWFkZXIiIHN0eWxlPSJkaXNwbGF5OiBibG9jazsiPjwvZGl2PicpLmFwcGVuZFRvKCIuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnRMaXN0SW5kZW50IiArIGlkKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJChtc2cuZCkuYXBwZW5kVG8oIi5BZ2VuZGFJdGVtUHVibGljQ29tbWVudExpc3RJbmRlbnQiICsgaWQpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBldmVudCAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoIml0ZW06c2VsZWN0ZWQiLCBbaWQsIHNjcm9sbF0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikgew0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIExvYWRQdWJsaWNDb21tZW50SWNvbnMoaWQpIHsNCiAgICAgICAgICAgICAgICBpZihpZCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgbWVldGluZ0lkID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gucmVwbGFjZShuZXcgUmVnRXhwKCJeKD86LipbJlxcP10iICsgZW5jb2RlVVJJQ29tcG9uZW50KCJJZCIpLnJlcGxhY2UoL1tcLlwrXCpdL2csICJcXCQmIikgKyAiKD86XFw9KFteJl0qKSk/KT8uKiQiLCAiaSIpLCAiJDEiKSk7DQogICAgICAgICAgICAgICAgICAgIHZhciBhZ2VuZGFJdGVtID0gJCgnI0FnZW5kYUl0ZW1BZ2VuZGFJdGVtJyArIGlkICsnVGl0bGVIZWFkZXIgJyArICc+IC5BZ2VuZGFJdGVtTmF2aWdhdGUgPiAnICsgJy5BZ2VuZGFJdGVtSWNvbnMnKTsNCiAgICAgICAgICAgICAgICAgICAgaWYoYWdlbmRhSXRlbS5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWdlbmRhSXRlbSA9ICQoJyNBZ2VuZGFJdGVtQWdlbmRhSXRlbScgKyBpZCArJ1RpdGxlSGVhZGVyICcpLnBhcmVudCgpLmZpbmQoIi5BZ2VuZGFJdGVtSWNvbnMiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHZhciBpc0V4aXN0ID0gYWdlbmRhSXRlbS5jaGlsZHJlbignLmxhcy5sYS1jb21tZW50LWFsdCcpLmxlbmd0aDsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICQuYWpheCh7DQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsDQogICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICJNZWV0aW5nLmFzcHgvR2VuZXJhdGVQdWJsaWNDb21tZW50SWNvbiIsDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAie2lkOiAnIiArIGlkICsgIicsIG1lZXRpbmdJZDogJyIgKyBtZWV0aW5nSWQgKyAiJ30iLA0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsDQogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAobXNnKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtc2cuZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpc0V4aXN0ID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQobXNnLmQpLmFwcGVuZFRvKGFnZW5kYUl0ZW0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpc0V4aXN0ID4gMCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2VuZGFJdGVtLmNoaWxkcmVuKCcubGFzLmxhLWNvbW1lbnQtYWx0JykucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikgew0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZVF1ZXJ5KHBhcmFtZXRlciwgdmFsdWUpIHsNCiAgICAgICAgICAgICAgICB2YXIgbG9jID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDsNCg0KICAgICAgICAgICAgICAgIGlmIChsb2MubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gbm8gcXVlcnkgc3RyaW5nIC8vDQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgcGFyYW1ldGVyIGRpcmVjdGx5IHRvIHVybCAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmICsgIj8iICsgcGFyYW1ldGVyICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIGlmIChsb2NbMF0gPT0gJz8nKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsb2MgPSBsb2Muc3Vic3RyaW5nKDEpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBsb2Muc3BsaXQoJyYnKTsNCg0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tpXS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgocGFyYW1ldGVyLnRvTG93ZXJDYXNlKCkgKyAnPScpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG5ldyB2YWx1ZSAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbaV0gPSBwYXJhbWV0ZXIgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nIHZhbHVlIC8vDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tpXSA9ICcnOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQgPT0gZmFsc2UgJiYgdmFsdWUubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2gocGFyYW1ldGVyICsgJz0nICsgdmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIHFzID0gJyc7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zW2ldLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXMubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXMgPSAiPyIgKyBwYXJhbXNbaV07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxcyArPSAiJiIgKyBwYXJhbXNbaV07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoIj8iICsgbG9jLCBxcyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZnVuY3Rpb24gdGFiSW5kZXhMb29wKG1vZGFsQ29udGFpbmVyKSB7DQogICAgICAgICAgICAgICAgbW9kYWxDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsIHRyYXBUYWJLZXkpOw0KDQogICAgICAgICAgICAgICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdLCBbdHlwZT1oaWRkZW5dKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsIFt0YWJpbmRleD0iMCJdLCBbY29udGVudGVkaXRhYmxlXSc7DQogICAgICAgICAgICAgICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzID0gbW9kYWxDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChmb2N1c2FibGVFbGVtZW50c1N0cmluZyk7DQogICAgICAgICAgICAgICAgZm9jdXNhYmxlRWxlbWVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmb2N1c2FibGVFbGVtZW50cyk7DQogICAgICAgICAgICAgICAgZm9jdXNhYmxlRWxlbWVudHMgPSBmb2N1c2FibGVFbGVtZW50cy5maWx0ZXIoZWxlbWVudCA9PiAkKGVsZW1lbnQpLmlzKCc6dmlzaWJsZScpKTsNCgkJCQkNCiAgICAgICAgICAgICAgICB2YXIgdmlkZW9Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuVmlkZW9QbGF5ZXJDb250YWluZXIiKTsNCgkJCQkNCiAgICAgICAgICAgICAgICB2YXIgZmlyc3RUYWJTdG9wID0gZm9jdXNhYmxlRWxlbWVudHNbMF07DQogICAgICAgICAgICAgICAgdmFyIGxhc3RUYWJTdG9wID0gZm9jdXNhYmxlRWxlbWVudHNbZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoIC0gMV07DQogICAgICAgICAgICAgICAgaWYoZmlyc3RUYWJTdG9wKXsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZGVvQ29udGFpbmVyKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxheWVyID0gJCgnLmZwLXBsYXknKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBsYXllcikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5mb2N1cygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RUYWJTdG9wLmZvY3VzKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICQoJy5oaWxpZ2h0ZWQgLkFnZW5kYUl0ZW1UaXRsZSBhJykuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnLmhpbGlnaHRlZCBhLlNlbGVjdGFibGVJdGVtJykuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0cmFwVGFiS2V5KGUpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdLCBbdHlwZT1oaWRkZW5dKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsIFt0YWJpbmRleD0iMCJdLCBbY29udGVudGVkaXRhYmxlXSc7DQogICAgICAgICAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbGVtZW50cyA9IG1vZGFsQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoZm9jdXNhYmxlRWxlbWVudHNTdHJpbmcpOw0KICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVFbGVtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZvY3VzYWJsZUVsZW1lbnRzKTsNCiAgICAgICAgICAgICAgICAgICAgZm9jdXNhYmxlRWxlbWVudHMgPSBmb2N1c2FibGVFbGVtZW50cy5maWx0ZXIoZWxlbWVudCA9PiAkKGVsZW1lbnQpLmlzKCc6dmlzaWJsZScpKTsNCgkJCQkJDQogICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdFRhYlN0b3AgPSBmb2N1c2FibGVFbGVtZW50c1swXTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RUYWJTdG9wID0gZm9jdXNhYmxlRWxlbWVudHNbZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoIC0gMV07DQogICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGZpcnN0VGFiU3RvcCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWRlb0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5WaWRlb1BsYXllckNvbnRhaW5lciIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlkZW9Db250YWluZXIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCB0cmFwVGFiS2V5KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSAkKCcuZnAtcGxheScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocGxheWVyKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmZvY3VzKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaGlsaWdodGVkIC5BZ2VuZGFJdGVtVGl0bGUgYScpLmZvY3VzKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuaGlsaWdodGVkIGEuU2VsZWN0YWJsZUl0ZW0nKS5mb2N1cygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBsYXN0VGFiU3RvcCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5oaWxpZ2h0ZWQgLkFnZW5kYUl0ZW1UaXRsZSBhJykuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmhpbGlnaHRlZCBhLlNlbGVjdGFibGVJdGVtJykuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIDwvc2NyaXB0Pg0KDQogICAgICAgIA0KDQo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+DQogICAgJChkb2N1bWVudCkucmVhZHkoDQogICAgICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQoJy5EZXRhaWxzJykuYWRkQ2xhc3MoJ2hpZGRlbi14cycpLmFkZENsYXNzKCdoaWRkZW4tc20nKTsNCiAgICAgICAgICAgICQoJy5WaWRlb1BsYXllckNvbnRhaW5lcicpLmRldGFjaCgpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIFdpbmRvd19PblJlc2l6ZSk7DQogICAgICAgIH0NCiAgICApOw0KDQogICAgZnVuY3Rpb24gVmlkZW9fTG9hZEJvb2ttYXJrKCkgeyB9DQoNCiAgICBmdW5jdGlvbiBXaW5kb3dfT25SZXNpemUoKSB7DQogICAgICAgIHNldFRpbWVvdXQoDQogICAgICAgICAgICBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIG1heGhlaWdodCA9IDA7DQogICAgICAgICAgICAgICAgICAgIGlmICgkKCIubmF2YmFyLWZpeGVkLWJvdHRvbSIpLmlzKCI6dmlzaWJsZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBtYXhoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSAkKCIubmF2YmFyLW5hdiIpLmhlaWdodCgpIC0gJCgiLm5hdmJhci1maXhlZC1ib3R0b20iKS5oZWlnaHQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG1heGhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtICQoIi5uYXZiYXItbmF2IikuaGVpZ2h0KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAkKCIuQWdlbmRhSXRlbUF0dGFjaG1lbnRzQXJlYSIpLmNzcygibWF4LWhlaWdodCIsICIiKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWlsc2hlaWdodCgpID4gbWF4aGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gc3Vic3RyYWN0IHRoZSBwYW5lbCBoZWFkaW5nIGhlaWdodCAoZHluYW1pYyBkZXBlbmRpbmcgb24gdXNlciBpbnB1dCkgYW5kIGFsc28gbmVlZCB0byBzdWJzdHJhY3QgNTUgZm9yIG90aGVyIHN0YXRpYyBjb21wb25lbnRzIChzcGFjZSBiZXR3ZWVuIHBhbmVsIGVsZW1lbnRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRNYXhIZWlnaHQgPSBtYXhoZWlnaHQgLSAkKCcuQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlscyA+IGRpdi5wYW5lbC1oZWFkaW5nJykuaGVpZ2h0KCkgLSA1NTsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtQXR0YWNobWVudHNBcmVhIikuY3NzKCJtYXgtaGVpZ2h0IiwgY29udGVudE1heEhlaWdodCArICJweCIpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAvL1RoaXMgd2lsbCBuZXZlciBydW4gLi4uIG5vdCBzdXJlIHdoeSBpdCBpcyBoZXJlDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWlsc2hlaWdodCgpIDw9IG1heGhlaWdodCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtQXR0YWNobWVudHNBcmVhIikuY3NzKCJtYXgtaGVpZ2h0IiwgKCQoIi5BZ2VuZGFJdGVtQXR0YWNobWVudHNBcmVhIikuaGVpZ2h0KCkgLSAoZGV0YWlsc2hlaWdodCgpIC0gbWF4aGVpZ2h0KSkgKyAicHgiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgew0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAxDQogICAgICAgICk7DQogICAgfQ0KPC9zY3JpcHQ+DQoNCiAgICAgICAgPGRpdiBpZD0icGFja2FnZS1jb250YWluZXIiIHN0eWxlPSJvdmVyZmxvdzogYXV0bzsgaGVpZ2h0OiAxMDAlIj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1saWdodCBuYXZiYXItZml4ZWQtdG9wIG5hdmJhcmJnIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXJiYXItbGVmdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGlkPSJuYXZiYXJEcm9wZG93biIgY2xhc3M9Im5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBzdHlsZT0iY29sb3I6IHdoaXRlIiB0YWJpbmRleD0iMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZ2VuZGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IHBhY2thZ2VOYXYiIHJvbGU9Im1lbnUiIGlkPSJBZ2VuZGFkcm9wZG93bm1lbnUiIGFyaWEtbGFiZWxsZWRieT0ibmF2YmFyRHJvcGRvd24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9J2h0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tL01lZXRpbmcuYXNweD9JZD1jZTFhM2VmZC00ZjMzLTQ4MzgtOGFhZS03NmY3MTIzYWVkOGMmQWdlbmRhPUFnZW5kYSZsYW5nPUVuZ2xpc2gnIHRhYmluZGV4PScxJyBsYW5nPSdlbic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWdlbmRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiByb2xlPSJtZW51aXRlbSIgaHJlZj0naHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20vTWVldGluZy5hc3B4P0lkPWNlMWEzZWZkLTRmMzMtNDgzOC04YWFlLTc2ZjcxMjNhZWQ4YyZBZ2VuZGE9QWdlbmRhJmxhbmc9RnJlbmNoJyB0YWJpbmRleD0nMScgbGFuZz0nZnInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9yZHJlIGR1IGpvdXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0nZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iVmlkZW9MaW5rIGRyb3Bkb3duLWl0ZW0iIGhyZWY9JycgdGl0bGU9J09wZW4gVmlkZW8gaW4gbmV3IFdpbmRvdycgdGFyZ2V0PSJfYmxhbmsiIHRhYmluZGV4PSI2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IkhpZGRlbkFuY2hvckRlc2NyaXB0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9wZW4gVmlkZW8gaW4gbmV3IFdpbmRvdzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlkZW8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9uYXY+DQoNCiAgICAgICAgICAgIDxtYWluIGNsYXNzPSJjb250YWluZXIgYm9keS1jb250ZW50IiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZiI+DQogICAgICAgICAgICAgICAgPEFSVElDTEUgY2xhc3M9J01lZXRpbmcgcm93JyA+PFNFQ1RJT04gY2xhc3M9J0FnZW5kYSBjb2wteHMtMTIgY29sLXNtLTEyIGNvbC1tZC04IGNvbC1sZy04JyA+PERJViBzdHlsZT0icGFkZGluZzoxZW07IHdpZHRoOmF1dG87IiA+PEhFQURFUiBjbGFzcz0nQWdlbmRhSGVhZGVyJyBzdHlsZT0icGFkZGluZzowcHggNHB4IiA+PERJViBjbGFzcz0nQWdlbmRhSGVhZGVyTG9nbycgPjxpbWcgIHNyYz0nZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTUzODcnIGFsdD0nUG9saWNlIFNlcnZpY2VzIEJvYXJkIExvZ28nICAvPjwvRElWPjxIMSBJZD0nQWdlbmRhSGVhZGVyVGl0bGUnIGNsYXNzPSdBZ2VuZGFIZWFkZXJUaXRsZScgPk90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQ8YnIvPkh1bWFuIFJlc291cmNlcyBDb21taXR0ZWU8YnIvPkFnZW5kYTxici8+PC9IMT48RElWIGNsYXNzPSdBZ2VuZGFIZWFkZXJEZXRhaWxzJyA+PERJViBjbGFzcz0nQWdlbmRhSGVhZGVyRGV0YWlsc1RhYmxlJyA+PERJViBjbGFzcz0nQWdlbmRhTWVldGluZ051bWJlcicgPjxESVYgY2xhc3M9J0FnZW5kYUhlYWRlckRldGFpbHMgTGFiZWwnID48VEggc2NvcGU9J1JvdycgPk1lZXRpbmcgIzo8L1RIPjwvRElWPjxESVYgY2xhc3M9J1ZhbHVlIEFnZW5kYU1lZXRpbmdOdW1iZXJUZXh0JyA+MTQ8L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFUaW1lQ29udGFpbmVyJyA+PFRSID48RElWIGNsYXNzPSdMYWJlbCcgPjxUSCBzY29wZT0nUm93JyA+RGF0ZTo8L1RIPjwvRElWPjxURCBjbGFzcz0nVmFsdWUnIGNvbHNwYW49JzAnIGhlYWRlcnM9JycgPjxESVYgY2xhc3M9J0FnZW5kYU1lZXRpbmdUaW1lIFZhbHVlJyA+PFRJTUUgZGF0ZXRpbWU9JzIwMjItMDgtMzAnID48U1BBTiBjbGFzcz0nRGF0ZScgPjxTUEFOIGNsYXNzPSdEYXlPZldlZWsnID5UdWVzZGF5LCA8L1NQQU4+QXVndXN0IDMwLCAyMDIyPFNQQU4gY2xhc3M9J0RheU9mV2VlaycgPjwvU1BBTj48L1NQQU4+PC9USU1FPjwvRElWPjwvVEQ+PC9UUj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFUaW1lQ29udGFpbmVyJyA+PERJViBjbGFzcz0nTGFiZWwnID5UaW1lOjwvRElWPjxESVYgPjxESVYgY2xhc3M9J0FnZW5kYU1lZXRpbmdUaW1lIFZhbHVlJyA+PFNQQU4gY2xhc3M9J0FnZW5kYU1lZXRpbmdUaW1lU3RhcnQnID48VElNRSBkYXRldGltZT0nMTM6MDAnID48U1BBTiBjbGFzcz0nVGltZScgPiAxPFNQQU4gY2xhc3M9J01pbnV0ZXMnID46MDA8L1NQQU4+PFNQQU4gY2xhc3M9J01lcmlkaWFuJyA+IFA8L1NQQU4+PFNQQU4gY2xhc3M9J01lcmlkaWFuIFBlcmlvZCcgPi48L1NQQU4+PFNQQU4gY2xhc3M9J01lcmlkaWFuJyA+bTwvU1BBTj48U1BBTiBjbGFzcz0nTWVyaWRpYW4gUGVyaW9kJyA+LjwvU1BBTj48L1NQQU4+PC9USU1FPjwvU1BBTj48U1BBTiBjbGFzcz0nQWdlbmRhTWVldGluZ1RpbWVFbmQnID4gLSA8VElNRSBkYXRldGltZT0nMTU6MDAnID48U1BBTiBjbGFzcz0nVGltZScgPiAzPFNQQU4gY2xhc3M9J01pbnV0ZXMnID46MDA8L1NQQU4+PFNQQU4gY2xhc3M9J01lcmlkaWFuJyA+IFA8L1NQQU4+PFNQQU4gY2xhc3M9J01lcmlkaWFuIFBlcmlvZCcgPi48L1NQQU4+PFNQQU4gY2xhc3M9J01lcmlkaWFuJyA+bTwvU1BBTj48U1BBTiBjbGFzcz0nTWVyaWRpYW4gUGVyaW9kJyA+LjwvU1BBTj48L1NQQU4+PC9USU1FPjwvU1BBTj48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFNZWV0aW5nTG9jYXRpb24nID48RElWIGNsYXNzPSdBZ2VuZGFIZWFkZXJEZXRhaWxzIExhYmVsJyA+PFRIIHNjb3BlPSdSb3cnID5Mb2NhdGlvbjo8L1RIPjwvRElWPjxESVYgY2xhc3M9J1ZhbHVlIExvY2F0aW9uVmFsdWUnID48RElWIGNsYXNzPSdMb2NhdGlvbicgPkZlc3RpdmFsIEJvYXJkcm9vbTwvRElWPjxESVYgY2xhc3M9J0FkZHJlc3MxJyA+MTEwIExhdXJpZXIgQXZlbnVlIFdlc3Q8L0RJVj48RElWIGNsYXNzPSdBZGRyZXNzMicgPjwvRElWPjxESVYgY2xhc3M9J0FkZHJlc3MzJyA+PC9ESVY+PC9ESVY+PC9ESVY+PERJViA+PERJViA+PERJViBzdHlsZT0iaGVpZ2h0OjVweCIgPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUhlYWRlckF0dGVuZGFuY2UnID48RElWIGNsYXNzPSdBZ2VuZGFIZWFkZXJBdHRlbmRhbmNlVGFibGUnID48RElWID48RElWIGNsYXNzPSdMYWJlbCcgPk1lbWJlcnM6PC9ESVY+PERJViBjbGFzcz0nVmFsdWUnID48VUwgPjxMSSA+Q2hhaXI6IFN1emFubmUgVmFsaXF1ZXQsJm5ic3A7PC9MST48TEkgPkNvdW5jaWxsb3IgRWxpIEVsLUNoYW50aXJ5LCZuYnNwOzwvTEk+PExJID4gYW5kIE1pY2hhZWwgRG91Y2V0PC9MST48L1VMPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUhlYWRlclNwZWNpYWxDb21tZW50cycgPjxwIHN0eWxlPSJ0ZXh0LWFsaWduJiM1ODtjZW50ZXI7Ij48c3Ryb25nPktyaXN0YSBGZXJyYXJvLCBFeGVjdXRpdmUgRGlyZWN0b3I8L3N0cm9uZz48L3A+CjxwIHN0eWxlPSJ0ZXh0LWFsaWduJiM1ODtjZW50ZXI7Ij48c3Ryb25nPig2MTMpIDU2MC0xMjcwPC9zdHJvbmc+PC9wPgo8cCBzdHlsZT0idGV4dC1hbGlnbiYjNTg7Y2VudGVyOyI+PHN0cm9uZz5LcmlzdGEuRmVycmFyb0BvdHRhd2EuY2E8L3N0cm9uZz48L3A+CjxwIHN0eWxlPSJ0ZXh0LWFsaWduJiM1ODtjZW50ZXI7Ij48c3Bhbj4mIzE2MDs8L3NwYW4+PC9wPjwvRElWPjxESVYgc3R5bGU9ImZsb2F0Om5vbmU7Y2xlYXI6Ym90aCIgPjwvRElWPjxIUiBjbGFzcz0nQWdlbmRhSGVhZGVyU2VwYXJhdG9yJyAvPjwvSEVBREVSPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1zJyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRhaW5lciBpbmRlbnQnIHN0eWxlPSJ3aWR0aDphdXRvIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbSBBZ2VuZGFJdGVtMycgc3R5bGU9IndpZHRoOjEwMCUiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGVSb3cnID48SDIgSWQ9J0FnZW5kYUl0ZW1BZ2VuZGFJdGVtM1RpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+MS48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtTmF2aWdhdGUgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlJyBzdHlsZT0id2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsiID48YSB0YWJpbmRleD0nMCcgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDMpOyIgPkNvbmZpcm1hdGlvbiBvZiBBZ2VuZGE8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gyPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+Jm5ic3A7PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGVudFJvdyBpbmRlbnQnID48VUwgY2xhc3M9J0FnZW5kYUl0ZW1Nb3Rpb25zJyA+PExJIGNsYXNzPSdBZ2VuZGFJdGVtTW90aW9uJyA+PERJViBjbGFzcz0nTnVtYmVyJyA+PC9ESVY+PERJViBjbGFzcz0nTW90aW9uVGV4dCBSaWNoVGV4dCcgPjxwPjxzdHJvbmc+VGhhdCB0aGUgPC9zdHJvbmc+PHN0cm9uZz5IdW1hbiBSZXNvdXJjZXMgQ29tbWl0dGVlPC9zdHJvbmc+PHN0cm9uZz4gPHNwYW4+Y29uZmlybSB0aGUgYWdlbmRhIG9mIHRoZSA8L3NwYW4+MzAgQXVndXN0IDIwMjIgbWVldGluZy48L3N0cm9uZz48L3A+PC9ESVY+PC9MST48L1VMPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTQnIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgyIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbTRUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjIuPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSg0KTsiID5Db25maXJtYXRpb24gb2YgTWludXRlczwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDI+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjwvRElWPjwvRElWPjxESVYgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTE0JyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMyBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0xNFRpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+Mi4xPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxNCk7IiA+TWludXRlcyAjMTMgb2YgMjAgTWF5IDIwMjI8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gzPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxhIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxNCwgJ2F0dGFjaG1lbnRzJykiIHRhYkluZGV4PSctMScgPjxpbWcgVGl0bGU9J0F0dGFjaG1lbnRzJyAgc3JjPScuL19sYXlvdXRzL2ltYWdlcy9lU2NyaWJlL2F0dGFjaG1lbnQuc3ZnJyBhbHQ9J1RoaXMgaXRlbSBoYXMgYXR0YWNobWVudHMuJyAgcm9sZT0ncHJlc2VudGF0aW9uJyAvPjwvYT4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjxESVYgY2xhc3M9J3Zpc2libGUteHMgdmlzaWJsZS1zbScgc3R5bGU9IiBwYWRkaW5nOjFweCAiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudHNMaXN0IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MTQnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTk1Mzg0IiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nSFIgTWludXRlcyAxMyAyME1heTIyLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPkhSIE1pbnV0ZXMgMTMgMjBNYXkyMi5wZGY8L1NQQU4+PC9hPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxVTCBjbGFzcz0nQWdlbmRhSXRlbU1vdGlvbnMnID48TEkgY2xhc3M9J0FnZW5kYUl0ZW1Nb3Rpb24nID48RElWIGNsYXNzPSdOdW1iZXInID48L0RJVj48RElWIGNsYXNzPSdNb3Rpb25UZXh0IFJpY2hUZXh0JyA+PHA+PHN0cm9uZz5UaGF0IHRoZSBIdW1hbiBSZXNvdXJjZXMgQ29tbWl0dGVlIGFwcHJvdmUgTWludXRlcyAxMyBmcm9tIHRoZSAyMCBNYXkgMjAyMiBtZWV0aW5nLjwvc3Ryb25nPjwvcD48L0RJVj48L0xJPjwvVUw+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRhaW5lciBpbmRlbnQnIHN0eWxlPSJ3aWR0aDphdXRvIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbSBBZ2VuZGFJdGVtNicgc3R5bGU9IndpZHRoOjEwMCUiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGVSb3cnID48SDIgSWQ9J0FnZW5kYUl0ZW1BZ2VuZGFJdGVtNlRpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+My48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtTmF2aWdhdGUgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlJyBzdHlsZT0id2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsiID48YSB0YWJpbmRleD0nMCcgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDYpOyIgPkRlY2xhcmF0aW9ucyBvZiBJbnRlcmVzdDwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDI+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTgnIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgyIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbThUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjQuPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSg4KTsiID5JdGVtcyBvZiBCdXNpbmVzczwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDI+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjwvRElWPjwvRElWPjxESVYgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTE1JyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMyBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0xNVRpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+NC4xPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxNSk7IiA+V29ya2ZvcmNlIE1hbmFnZW1lbnQgU3RyYXRlZ3k8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gzPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxhIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxNSwgJ2F0dGFjaG1lbnRzJykiIHRhYkluZGV4PSctMScgPjxpbWcgVGl0bGU9J0F0dGFjaG1lbnRzJyAgc3JjPScuL19sYXlvdXRzL2ltYWdlcy9lU2NyaWJlL2F0dGFjaG1lbnQuc3ZnJyBhbHQ9J1RoaXMgaXRlbSBoYXMgYXR0YWNobWVudHMuJyAgcm9sZT0ncHJlc2VudGF0aW9uJyAvPjwvYT4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjxESVYgY2xhc3M9J3Zpc2libGUteHMgdmlzaWJsZS1zbScgc3R5bGU9IiBwYWRkaW5nOjFweCAiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudHNMaXN0IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MTUnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTk1Mzg1IiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nT1BTLSBQcmVzZW50YXRpb24gQXVnIDMwLDIwMjIucGRmJyB0YXJnZXQ9J19ibGFuaycgPjxTUEFOIGNsYXNzPSdMaW5rJyA+T1BTLSBQcmVzZW50YXRpb24gQXVnIDMwLDIwMjIucGRmPC9TUEFOPjwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudDE1JyA+PFNQQU4gY2xhc3M9J1NlcXVlbmNlJyA+Mi48L1NQQU4+PGEgY2xhc3M9J0xpbmsnIHRhYmluZGV4PScwJyBocmVmPSJmaWxlc3RyZWFtLmFzaHg/RG9jdW1lbnRJZD05NTM4NiIgZGF0YS10b2dnbGU9J3Rvb2x0aXAnIGRhdGEtaHRtbD0ndHJ1ZScgZGF0YS1jb250YWluZXI9J2JvZHknIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0ZSIEZpbmFsIEhSIHByZXNlbnRhdGlvbiBBdWd1c3QgMzAgMjAyMi5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5GUiBGaW5hbCBIUiBwcmVzZW50YXRpb24gQXVndXN0IDMwIDIwMjIucGRmPC9TUEFOPjwvYT48L0RJVj48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGVudFJvdyBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtRGVzY3JpcHRpb24gUmljaFRleHQnID48RElWID48RElWID48cD5QcmVzZW50YXRpb248L3A+PGJyPjxwPjxzdHJvbmc+VGhhdCB0aGUgSHVtYW4gUmVzb3VyY2VzIENvbW1pdHRlZSByZWNlaXZlIHRoaXMgaXRlbSBmb3IgaW5mb3JtYXRpb24uPC9zdHJvbmc+PC9wPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTknIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgyIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbTlUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjUuPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSg5KTsiID5PdGhlciBCdXNpbmVzczwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDI+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTEyJyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMiBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0xMlRpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+Ni48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtTmF2aWdhdGUgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlJyBzdHlsZT0id2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsiID48YSB0YWJpbmRleD0nMCcgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDEyKTsiID5BZGpvdXJubWVudDwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDI+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTEzJyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMiBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0xM1RpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+Ny48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtTmF2aWdhdGUgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlJyBzdHlsZT0id2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsiID48YSB0YWJpbmRleD0nMCcgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDEzKTsiID5OZXh0IE1lZXRpbmc8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gyPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+Jm5ic3A7PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGVudFJvdyBpbmRlbnQnID48VUwgY2xhc3M9J0FnZW5kYUl0ZW1Nb3Rpb25zJyA+PExJIGNsYXNzPSdBZ2VuZGFJdGVtTW90aW9uJyA+PERJViBjbGFzcz0nTnVtYmVyJyA+PC9ESVY+PERJViBjbGFzcz0nTW90aW9uVGV4dCBSaWNoVGV4dCcgPjxwPlRvIGJlIGRldGVybWluZWQuPC9wPjwvRElWPjwvTEk+PC9VTD48L0RJVj48L0RJVj48L0RJVj48L0RJVj48L0RJVj48L1NFQ1RJT04+PFNFQ1RJT04gY2xhc3M9J0RldGFpbHMgY29sLXhzLTMgY29sLXNtLTMgY29sLW1kLTQgY29sLWxnLTQgY29sLXhzLW9mZnNldC05IGNvbC1zbS1vZmZzZXQtOScgPjxESVYgY2xhc3M9J2FmZml4IGFmZml4LXRvcCBjb2wteHMtMyBjb2wtc20tMyBjb2wtbWQtNCBjb2wtbGctNCBjb2wteHMtb2Zmc2V0LTkgY29sLXNtLW9mZnNldC05IGQtc20tYmxvY2snIHN0eWxlPSJ3aWR0aDppbmhlcml0OyBwYWRkaW5nLXJpZ2h0OjUlOyIgPjxESVYgY2xhc3M9J3BhbmVsIHBhbmVsLWRlZmF1bHQnIHN0eWxlPSJ3aWR0aDphdXRvO2JveC1zaGFkb3c6M3B4IDNweCAzcHggcmdiYSgwLDAsMCwuMzMpOyIgPjxESVYgY2xhc3M9J1ZpZGVvUGxheWVyQ29udGFpbmVyIHBhbmVsIHBhbmVsLWRlZmF1bHQnID48RElWIGNsYXNzPSdWaWRlb1BsYXllcicgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J3Zpc2libGUtbWQgdmlzaWJsZS1sZyBBZ2VuZGFJdGVtU2VsZWN0ZWREZXRhaWxzQ29udGFpbmVyJyA+PERJViBjbGFzcz0ncGFuZWwtYm9keSBBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudE5vdFNlbGVjdGVkJyA+Tm8gSXRlbSBTZWxlY3RlZDwvRElWPjxESVYgY2xhc3M9J3BhbmVsIHBhbmVsLWRlZmF1bHQgQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlscycgc3R5bGU9ImRpc3BsYXk6bm9uZSIgPjxESVYgY2xhc3M9J3BhbmVsLWhlYWRpbmcnID48U1BBTiBjbGFzcz0nU2VsZWN0ZWRJdGVtQ291bnRlcicgPjwvU1BBTj4gJm5ic3A7IDxTUEFOIGNsYXNzPSdTZWxlY3RlZEl0ZW1UaXRsZScgPjwvU1BBTj48L0RJVj48RElWIGNsYXNzPSdwYW5lbC1ib2R5JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnRzQXJlYScgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50c0xpc3QnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudE5vbmUnID5UaGlzIGl0ZW0gaGFzIG5vIGF0dGFjaG1lbnRzPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnQxNCcgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTUzODQiIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdIUiBNaW51dGVzIDEzIDIwTWF5MjIucGRmJyB0YXJnZXQ9J19ibGFuaycgPjxTUEFOIGNsYXNzPSdMaW5rJyA+SFIgTWludXRlcyAxMyAyME1heTIyLnBkZjwvU1BBTj48L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnQxNScgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTUzODUiIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdPUFMtIFByZXNlbnRhdGlvbiBBdWcgMzAsMjAyMi5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5PUFMtIFByZXNlbnRhdGlvbiBBdWcgMzAsMjAyMi5wZGY8L1NQQU4+PC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MTUnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4yLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTk1Mzg2IiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nRlIgRmluYWwgSFIgcHJlc2VudGF0aW9uIEF1Z3VzdCAzMCAyMDIyLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPkZSIEZpbmFsIEhSIHByZXNlbnRhdGlvbiBBdWd1c3QgMzAgMjAyMi5wZGY8L1NQQU4+PC9hPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvU0VDVElPTj48L0FSVElDTEU+PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPg0KZnVuY3Rpb24gdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKEl0ZW1JZCwgdGFiKSB7DQogICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKCcnLCAnJywgVXBkYXRlUXVlcnkoJ1RhYicsIHRhYikpOw0KDQogICAgaWYgKHRhYiA9PSAnY29tbWVudHMnKSB7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuY3NzKHsnZm9udC13ZWlnaHQnOidib2xkJywgJ2NvbG9yJzonYmxhY2snfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOid0cnVlJ30pOw0KICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JykuY3NzKHsnZm9udC13ZWlnaHQnOidub3JtYWwnLCAnY29sb3InOiAnIzU5NTk1OSd9KTsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcpLmF0dHIoeydhcmlhLXNlbGVjdGVkJzonZmFsc2UnfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJyArIEl0ZW1JZCkuY3NzKHsnZm9udC13ZWlnaHQnOiAnYm9sZCcsICdjb2xvcic6ICdibGFjayd9KTsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHMnICsgSXRlbUlkKS5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6J3RydWUnfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnQnICsgSXRlbUlkKS5jc3Moeydmb250LXdlaWdodCc6ICdub3JtYWwnLCdjb2xvcic6ICcjNTk1OTU5JyB9KTsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcgKyBJdGVtSWQpLmF0dHIoeydhcmlhLXNlbGVjdGVkJzonZmFsc2UnfSk7DQoNCiAgICAgICAgaWYgKCQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudCcgKyBJdGVtSWQpLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnROb25lJykuaGlkZSgpOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50JyArIEl0ZW1JZCkuaGlkZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudCcgKyBJdGVtSWQpLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnROb25lJykuc2hvdygpOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50JyArIEl0ZW1JZCkuc2hvdygpOw0KICAgICAgICB9DQogICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcpLmNzcyh7J2ZvbnQtd2VpZ2h0JzonYm9sZCcsICdjb2xvcic6J2JsYWNrJ30pOw0KICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JykuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOid0cnVlJ30pOw0KICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50cycpLmNzcyh7J2ZvbnQtd2VpZ2h0Jzonbm9ybWFsJywgJ2NvbG9yJzogJyM1OTU5NTknfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOidmYWxzZSd9KTsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcgKyBJdGVtSWQpLmNzcyh7J2ZvbnQtd2VpZ2h0JzogJ2JvbGQnLCAnY29sb3InOiAnYmxhY2snfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnQnICsgSXRlbUlkKS5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6J3RydWUnfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJyArIEl0ZW1JZCkuY3NzKHsnZm9udC13ZWlnaHQnOiAnbm9ybWFsJywnY29sb3InOiAnIzU5NTk1OScgfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJyArIEl0ZW1JZCkuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOidmYWxzZSd9KTsNCg0KICAgICAgICBpZiAoJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50JyArIEl0ZW1JZCkubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudE5vbmUnKS5oaWRlKCk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5oaWRlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50JyArIEl0ZW1JZCkubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudE5vbmUnKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5zaG93KCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICB2YXIgYXR0YWNobWVudENvdW50cyA9ICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudExpc3QgPiAuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5sZW5ndGg7DQogICAgdmFyIGNvbW1lbnRDb3VudHMgPSAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnRMaXN0ID4gLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50JyArIEl0ZW1JZCkubGVuZ3RoOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50Q291bnQnKS5maXJzdCgpLnRleHQoJyAoJyArIGF0dGFjaG1lbnRDb3VudHMgKyAnKSAnKTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50c0NvdW50JykuZmlyc3QoKS50ZXh0KCcgKCcgKyBjb21tZW50Q291bnRzICsgJyknKTsNCiAgICANCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50Q291bnQnICsgSXRlbUlkKS5maXJzdCgpLnRleHQoJyAoJyArIGF0dGFjaG1lbnRDb3VudHMgKyAnKSAnKTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50c0NvdW50JyArIEl0ZW1JZCkuZmlyc3QoKS50ZXh0KCcgKCcgKyBjb21tZW50Q291bnRzICsgJyknKTsNCn0NCg0KZnVuY3Rpb24gaGlsaWdodEl0ZW0oSXRlbUlkKSB7DQogICAgdmFyIHRhYmluZGV4ID0gJCgnI0FnZW5kYUl0ZW1BZ2VuZGFJdGVtJyArIEl0ZW1JZCArICdUaXRsZUhlYWRlciA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUgPiAuQWdlbmRhSXRlbVRpdGxlID4gQScpLmF0dHIoJ3RhYmluZGV4Jyk7DQogICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcpLmF0dHIoeydocmVmJzogJ2phdmFzY3JpcHQ6IHRvZ2dsZVNlbGVjdGVkRGV0YWlscygnICsgSXRlbUlkICsgJywgImF0dGFoY21lbnRzIiknLCAndGFiaW5kZXgnOiB0YWJpbmRleCB9KTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50Q291bnQnKS5hdHRyKHsnaHJlZic6ICdqYXZhc2NyaXB0OiB0b2dnbGVTZWxlY3RlZERldGFpbHMoJyArIEl0ZW1JZCArICcsICJhdHRhaGNtZW50cyIpJywgJ3RhYmluZGV4JzogdGFiaW5kZXggfSk7DQogICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHMnKS5hdHRyKHsnaHJlZic6ICdqYXZhc2NyaXB0OiB0b2dnbGVTZWxlY3RlZERldGFpbHMoJyArIEl0ZW1JZCArICcsICJjb21tZW50cyIpJywgJ3RhYmluZGV4JzogdGFiaW5kZXggfSk7DQogICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHNDb3VudCcpLmF0dHIoeydocmVmJzogJ2phdmFzY3JpcHQ6IHRvZ2dsZVNlbGVjdGVkRGV0YWlscygnICsgSXRlbUlkICsgJywgImNvbW1lbnRzIiknLCAndGFiaW5kZXgnOiB0YWJpbmRleCB9KTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JyArIEl0ZW1JZCkuYXR0cih7J2hyZWYnOiAnamF2YXNjcmlwdDogdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKCcgKyBJdGVtSWQgKyAnLCAiYXR0YWhjbWVudHMiKScsICd0YWJpbmRleCc6IHRhYmluZGV4IH0pOw0KICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnRDb3VudCcgKyBJdGVtSWQpLmF0dHIoeydocmVmJzogJ2phdmFzY3JpcHQ6IHRvZ2dsZVNlbGVjdGVkRGV0YWlscygnICsgSXRlbUlkICsgJywgImF0dGFoY21lbnRzIiknLCAndGFiaW5kZXgnOiB0YWJpbmRleCB9KTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50cycgKyBJdGVtSWQpLmF0dHIoeydocmVmJzogJ2phdmFzY3JpcHQ6IHRvZ2dsZVNlbGVjdGVkRGV0YWlscygnICsgSXRlbUlkICsgJywgImNvbW1lbnRzIiknLCAndGFiaW5kZXgnOiB0YWJpbmRleCB9KTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50c0NvdW50JyArIEl0ZW1JZCkuYXR0cih7J2hyZWYnOiAnamF2YXNjcmlwdDogdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKCcgKyBJdGVtSWQgKyAnLCAiY29tbWVudHMiKScsICd0YWJpbmRleCc6IHRhYmluZGV4IH0pOw0KDQogICAgJCgnLmhpbGlnaHRlZCcpLnJlbW92ZUNsYXNzKCdoaWxpZ2h0ZWQnKTsNCiAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnKS5oaWRlKCk7DQogICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50JykucGFyZW50KCkuaGlkZSgpOw0KICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudCcpLmhpZGUoKTsNCg0KICAgIGlmIChJdGVtSWQgIT0gJycpIHsNCiAgICAgICAgdmFyIGl0ZW0gPSAnLkFnZW5kYUl0ZW0nICsgSXRlbUlkOw0KDQogICAgICAgICQoaXRlbSArICcgLkFnZW5kYUl0ZW1UaXRsZVJvdycpLmFkZENsYXNzKCdoaWxpZ2h0ZWQnKTsNCiAgICAgICAgJChpdGVtICsgJyAuTGF0ZUNsb3NlZEFnZW5kYUl0ZW1UaXRsZVJvdycpLmFkZENsYXNzKCdoaWxpZ2h0ZWQnKTsNCiAgICAgICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2hlbWVudHNIZWFkZXInKS5zaG93KCk7DQogICAgICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudEhlYWRlcicpLnNob3coKTsNCg0KICAgICAgICAkKCcuQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlscycpLnNob3coKTsNCiAgICAgICAgJCgnLlNlbGVjdGVkSXRlbUNvdW50ZXInKS50ZXh0KCQoaXRlbSArICcgLkFnZW5kYUl0ZW1Db3VudGVyJykudGV4dCgpKTsNCiAgICAgICAgJCgnLlNlbGVjdGVkSXRlbVRpdGxlJykudGV4dCgkKGl0ZW0gKyAnIC5BZ2VuZGFJdGVtVGl0bGUnKS50ZXh0KCkpOw0KDQogICAgICAgIGlmICgkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50Tm9uZScpLnNob3coKTsNCiAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudE5vbmUnKS5wYXJlbnQoKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5zaG93KCk7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5wYXJlbnQoKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGlmICgkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50Tm9uZScpLnNob3coKTsNCiAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudE5vbmUnKS5wYXJlbnQoKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5zaG93KCk7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5wYXJlbnQoKS5zaG93KCk7DQogICAgICAgIH0NCiAgICB9DQogICAgZWxzZSB7ICANCiAgICAgICAgJCgnLkFnZW5kYUl0ZW1TZWxlY3RlZERldGFpbHMnKS5oaWRlKCk7DQogICAgICAgICQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudE5vdFNlbGVjdGVkJykuc2hvdygpOw0KICAgIH0NCn08L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+DQogICAgICAgICAgICA8L21haW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8IS0tIEJvb3RzdHJhcCBNb2RhbCAtLT4NCiAgICAgICAgPGRpdiBpZD0nYm9vdHN0cmFwTW9kYWwnIGFyaWEtbGl2ZT0icG9saXRlIiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9J21vZGFsIGZhZGUgaW4nIHN0eWxlPSdkaXNwbGF5OiBub25lOyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLXNjcm9sbGFibGUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J21vZGFsLWNvbnRlbnQnPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdtb2RhbC1oZWFkZXInPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGlkPSdib290c3RyYXBNb2RhbFRpdGxlJyBjbGFzcz0nbW9kYWwtdGl0bGUnIHN0eWxlPSdmb250LXNpemU6IDE3cHgnPlRpdGxlPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nY2xvc2UnIGRhdGEtZGlzbWlzcz0nbW9kYWwnPjxzcGFuIGFyaWEtaGlkZGVuPSd0cnVlJz7Dlzwvc3Bhbj4gPHNwYW4gY2xhc3M9J3NyLW9ubHknPmNsb3NlPC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nYm9vdHN0cmFwTW9kYWxCb2R5JyBjbGFzcz0nbW9kYWwtYm9keScgc3R5bGU9InBhZGRpbmc6IDBweCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdlbWJlZC1yZXNwb25zaXZlIHotZGVwdGgtMS1oYWxmJyBpZD0ibW9kYWxJZnJhbWVEaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgaWQ9Im1vZGFsSWZyYW1lIiB0aXRsZT0iU2hhcmUgQ29udGVudCBPcHRpb25zIiBjbGFzcz0nZW1iZWQtcmVzcG9uc2l2ZS1pdGVtJyBzcmM9JycgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInIGlkPSJib290c3RyYXBNb2RhbEZvb3RlciIgc3R5bGU9J21hcmdpbi10b3A6IDA7IG1pbi1oZWlnaHQ6IDU1cHg7Jz4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGZvb3RlciBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1maXhlZC1ib3R0b20gbmF2YmFyYmciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIHRleHQtcmlnaHQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1pbm5lciBuYXZiYXItY29udGVudC1jZW50ZXIgZm9vdGVyYWxpZ24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbG9hdC1yaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb3B5cmlnaHQgY2xhc3M9InBvd2VyZWRCeSI+PGEgaHJlZj0iaHR0cHM6Ly9lc2NyaWJlbWVldGluZ3MuY29tIiB0YXJnZXQ9Il9ibGFuayIgaWQ9Imxua1Bvd2VyZWRCeSI+UG93ZXJlZCBieSBlU0NSSUJFIFNvZnR3YXJlIEx0ZC48L2E+PC9jb3B5cmlnaHQ+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQoNCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgdmFyIEFnZW5kYVNpemUgPSBwYXJzZUZsb2F0KCQoIi5BZ2VuZGEgKiIpLmNzcygnZm9udC1zaXplJykpOw0KICAgICAgICAgICAgdmFyIFRpdGxlU2l6ZSA9IHBhcnNlRmxvYXQoJCgiLkFnZW5kYUhlYWRlclRpdGxlIikuY3NzKCdmb250LXNpemUnKSk7DQogICAgICAgICAgICB2YXIgTWVldGluZ1RpdGxlID0gIlBvbGljZSBTZXJ2aWNlIEJvYXJkIEh1bWFuIFJlc291cmNlcyBDb21taXR0ZWUgLSBBdWd1c3QgMzAsIDIwMjIiOw0KICAgICAgICAgICAgdmFyIGl0ZW1UaXRsZXMgPSB7IH07DQogICAgICAgICAgICB2YXIgU2hhcmluZyA9IGZhbHNlOw0KICAgICAgICAgICAgdmFyIEFsbG93Q29tbWVudCA9ICJGYWxzZSI7DQoJCQl2YXIgUHVibGljQ29tbWVudFNldHRpbmdzID0gW3siSWQiOjMsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjQsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjYsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjgsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjksIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjEyLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoxMywiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MTQsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjE1LCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfV07DQogICAgICAgICAgICB2YXIgTGVhdmVDb21tZW50ID0gIkxlYXZlIGNvbW1lbnQiOw0KDQogICAgICAgICAgICBmdW5jdGlvbiBQcmludEFnZW5kYSgpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cucHJpbnQoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICQoIi5WaWRlb0xpbmsiKS5jbGljayhmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICRmKCkucGF1c2UoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgZnVuY3Rpb24gZGV0YWlsc2hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCgiLkRldGFpbHMgPiBkaXYiKS5oZWlnaHQoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIFNldERldGFpbHNIZWlnaHQoQWdlbmRhSXRlbUlkKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKFdpbmRvd19PblJlc2l6ZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgV2luZG93X09uUmVzaXplKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAvL0ZvciBwdWJsaWMgY29tbWVudCBuYXJyb3cgYW5kIHdpZGUgdmlldyB3aGVuIHJlc2l6ZSB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ3Jlc2l6ZScpOw0KDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBDcmVhdGVTb2NpYWxMaW5rKEFnZW5kYUl0ZW1JZCkgew0KICAgICAgICAgICAgICAgIHZhciBtZWV0aW5nSWQgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKG5ldyBSZWdFeHAoIl4oPzouKlsmXFw/XSIgKyBlbmNvZGVVUklDb21wb25lbnQoIklkIikucmVwbGFjZSgvW1wuXCtcKl0vZywgIlxcJCYiKSArICIoPzpcXD0oW14mXSopKT8pPy4qJCIsICJpIiksICIkMSIpKTsNCiAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKG5ldyBSZWdFeHAoIl4oPzouKlsmXFw/XSIgKyBlbmNvZGVVUklDb21wb25lbnQoImxhbmciKS5yZXBsYWNlKC9bXC5cK1wqXS9nLCAiXFwkJiIpICsgIig/OlxcPShbXiZdKikpPyk/LiokIiwgImkiKSwgIiQxIikpOw0KICAgICAgICAgICAgICAgIHZhciBwdWJsaWNDb21tZW50VXJsID0gIlB1YmxpY0NvbW1lbnQuYXNweD9hZ2VuZGFJZD0iICsgQWdlbmRhSXRlbUlkICsgIiZtZWV0aW5nSWQ9IiArIG1lZXRpbmdJZCArICImbGFuZz0iICsgbGFuZ3VhZ2U7DQogICAgICAgICAgICAgICAgdmFyIGFsbG93Q29tbWVudCA9IEFsbG93Q29tbWVudCA9PSAiVHJ1ZSIgPyB0cnVlIDogZmFsc2U7ICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYoYWxsb3dDb21tZW50KSB7DQogICAgICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IFB1YmxpY0NvbW1lbnRTZXR0aW5ncy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmcgPSBQdWJsaWNDb21tZW50U2V0dGluZ3NbaV07DQogICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5nLklkID09IEFnZW5kYUl0ZW1JZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93Q29tbWVudCA9IHNldHRpbmcuQWxsb3dQdWJsaWNDb21tZW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdmFyIFNvY2lhbEl0ZW1zID0gc2V0U2VsZWN0ZWRJdGVtSWNvbnMoYWxsb3dDb21tZW50LCBTaGFyaW5nLCBwdWJsaWNDb21tZW50VXJsLCBmYWxzZSk7DQoNCiAgICAgICAgICAgICAgICAkKCcuU29jaWFsSWNvbnMnKS5yZW1vdmUoKTsNCiAgICAgICAgICAgICAgICAkKCIuaGlsaWdodGVkIC5BZ2VuZGFJdGVtTmF2aWdhdGUiKS5hcHBlbmQoJCgiPGRpdiBjbGFzcz0nU29jaWFsSWNvbnMgdmlzaWJsZS14cyB2aXNpYmxlLXNtJz4iKS5hcHBlbmQoU29jaWFsSXRlbXMpKTsNCiAgICAgICAgICAgICAgICAkKCcuU2VsZWN0ZWRJdGVtVGl0bGUnKS5wYXJlbnQoKS5hcHBlbmQoU29jaWFsSXRlbXMpOw0KICAgICAgICAgICAgICAgICQoJy5TZWxlY3RlZEl0ZW1UaXRsZScpLnBhcmVudCgpLmFkZENsYXNzKCJjbGVhcmZpeCIpOw0KDQogICAgICAgICAgICAgICAgLy92aXNpYmxlLXhzIHZpc2libGUtc20NCiAgICAgICAgICAgICAgICAvL2FkZCB0aGUgaWNvbnMgdW5kZXIgbmFycm93IHZpZXcgaWYgbm90IGV4aXN0DQogICAgICAgICAgICAgICAgdmFyIGljb25EaXYgPSAkKCcuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCA+ICNBZ2VuZGFJdGVtQWdlbmRhSXRlbScgKyBBZ2VuZGFJdGVtSWQgKyAnVGl0bGVIZWFkZXIgPiAuQWdlbmRhSXRlbU5hdmlnYXRlLmluZGVudCA+IC5BZ2VuZGFJdGVtSWNvbnMnKTsNCg0KICAgICAgICAgICAgICAgIGlmKGljb25EaXYubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgaWNvbkRpdiA9ICQoJy5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gI0FnZW5kYUl0ZW1BZ2VuZGFJdGVtJyArIEFnZW5kYUl0ZW1JZCArICdUaXRsZUhlYWRlciA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICQoc2V0U2VsZWN0ZWRJdGVtSWNvbnMoYWxsb3dDb21tZW50LCBTaGFyaW5nLCBwdWJsaWNDb21tZW50VXJsLCB0cnVlKSkuaW5zZXJ0QWZ0ZXIoaWNvbkRpdik7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgdmFyIGNsb3NlZEljb25EaXYgPSAkKCcuTGF0ZUNsb3NlZEFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAjQWdlbmRhSXRlbUFnZW5kYUl0ZW0nICsgQWdlbmRhSXRlbUlkICsgJ1RpdGxlSGVhZGVyID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbUljb25zJyk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYoY2xvc2VkSWNvbkRpdi5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICBjbG9zZWRJY29uRGl2ID0gJCgnLkxhdGVDbG9zZWRBZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gI0FnZW5kYUl0ZW1BZ2VuZGFJdGVtJyArIEFnZW5kYUl0ZW1JZCArICdUaXRsZUhlYWRlciA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkKHNldFNlbGVjdGVkSXRlbUljb25zKGFsbG93Q29tbWVudCwgU2hhcmluZywgcHVibGljQ29tbWVudFVybCwgdHJ1ZSkpLmluc2VydEFmdGVyKGNsb3NlZEljb25EaXYpOw0KICAgICAgICAgICAgICAgIFNldERldGFpbHNIZWlnaHQoQWdlbmRhSXRlbUlkKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZnVuY3Rpb24gc2V0U2VsZWN0ZWRJdGVtSWNvbnMoYWxsb3dDb21tZW50LCBTaGFyaW5nLCBwdWJsaWNDb21tZW50VXJsLCBpc05hcnJvdykgew0KICAgICAgICAgICAgICAgIHZhciBjc3NDbGFzcyA9IGlzTmFycm93ID8gIiBjbGFzcz0ndmlzaWJsZS14cyB2aXNpYmxlLXNtJyAiIDogIiI7DQogICAgICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSBpc05hcnJvdyA/ICJzdHlsZT0ncGFkZGluZy10b3A6IDVweDsnIiA6ICIiOw0KICAgICAgICAgICAgICAgIHZhciBidG5JZCA9IGlzTmFycm93ID8gImlkPSduYXJyb3ctbGVhdmUtY29tbWVudC1idXR0b24nIiA6ICIiOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZihhbGxvd0NvbW1lbnQgJiYgIVNoYXJpbmcpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIFNvY2lhbEl0ZW1zID0gJCgiPGRpdiIgKyBjc3NDbGFzcyArICI+IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygic2hhcmluZyBTb2NpYWxJY29ucyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKCJmbG9hdCIsICJyaWdodCIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIjxhIGNsYXNzPSdDb21tZW50SWNvbicgYXJpYS1sYWJlbD0nc3VibWl0IHB1YmxpYyBjb21tZW50Jz4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiaHJlZiIsIHB1YmxpY0NvbW1lbnRVcmwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoIjxzcGFuIGNsYXNzPSdidG4gYnRuLXByaW1hcnkgYnRuLXNtJyBzdHlsZT0ndmVydGljYWwtYWxpZ246bWlkZGxlOycgIiArIGJ0bklkICsgIj4iICsgTGVhdmVDb21tZW50ICsgIjxzcGFuPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICApOw0KDQogICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gKiA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpLnJlbW92ZUNsYXNzKCJoYXNQdWJsaWNDb21tZW50QnV0dG9uIik7DQogICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gKiA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpLmFkZENsYXNzKCJoYXNQdWJsaWNDb21tZW50QnV0dG9uIik7DQoNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoU2hhcmluZyAmJiAhYWxsb3dDb21tZW50KSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBTb2NpYWxJdGVtcyA9DQogICAgICAgICAgICAgICAgICAgICAgICAkKCI8ZGl2IiArIGNzc0NsYXNzICsgcGFkZGluZyArICI+IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInNoYXJpbmcgU29jaWFsSWNvbnMiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoImZsb2F0IiwgInJpZ2h0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCI8YSBzdHlsZT0ncGFkZGluZy1yaWdodDogMTNweDsnPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiaHJlZiIsICdTaGFyaW5nLmFzcHg/dT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJzxpbWcgc3JjPSJJbWFnZXMvc2hhcmUuUE5HIiBzdHlsZT0iaGVpZ2h0OjFlbTsiIGFsdD0iVGhpcyBjYW4gYmUgc2hhcmVkLCBjbGljayB0byBvcGVuIHRoZSBzaGFyaW5nIHBvcHVwLiIgdGl0bGU9IlNoYXJlIj4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKFNoYXJpbmcgJiYgYWxsb3dDb21tZW50KSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBTb2NpYWxJdGVtcyA9ICQoIjxkaXYiICsgY3NzQ2xhc3MgKyAiPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygic2hhcmluZyBTb2NpYWxJY29ucyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoImZsb2F0IiwgInJpZ2h0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiPGEgY2xhc3M9J0NvbW1lbnRJY29uJyBhcmlhLWxhYmVsPSdzdWJtaXQgcHVibGljIGNvbW1lbnQnPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiaHJlZiIsIHB1YmxpY0NvbW1lbnRVcmwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCI8c3BhbiBjbGFzcz0nYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbScgc3R5bGU9J3ZlcnRpY2FsLWFsaWduOm1pZGRsZTsnICIgKyBidG5JZCArICI+IiArIExlYXZlQ29tbWVudCArICI8c3Bhbj4iKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCI8YSBzdHlsZT0ncGFkZGluZy1yaWdodDogMTlweDt3aWR0aDogNiU7cGFkZGluZy10b3A6IDVweDtwYWRkaW5nLWxlZnQ6IDVweDsnPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoImhyZWYiLCAnU2hhcmluZy5hc3B4P3U9JyArIGVuY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uaHJlZikpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnPGltZyBzcmM9IkltYWdlcy9zaGFyZS5QTkciIHN0eWxlPSJoZWlnaHQ6MWVtOyIgYWx0PSJUaGlzIGNhbiBiZSBzaGFyZWQsIGNsaWNrIHRvIG9wZW4gdGhlIHNoYXJpbmcgcG9wdXAuIiB0aXRsZT0iU2hhcmUiPicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7DQoNCiAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbVRpdGxlJykucmVtb3ZlQ2xhc3MoImhhc1B1YmxpY0NvbW1lbnRCdXR0b24iKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbVRpdGxlJykuYWRkQ2xhc3MoImhhc1B1YmxpY0NvbW1lbnRCdXR0b24iKTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCcuTGF0ZUNsb3NlZEFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbVRpdGxlJykucmVtb3ZlQ2xhc3MoImhhc1B1YmxpY0NvbW1lbnRCdXR0b24iKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnLkxhdGVDbG9zZWRBZ2VuZGFJdGVtVGl0bGVSb3cgaGlsaWdodGVkID4gKiA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpLmFkZENsYXNzKCJoYXNQdWJsaWNDb21tZW50QnV0dG9uIik7DQoNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gU29jaWFsSXRlbXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFBhcmFtZXRlckJ5TmFtZShuYW1lKSB7DQogICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xbXS8sICdcXFsnKS5yZXBsYWNlKC9bXF1dLywgJ1xcXScpOw0KICAgICAgICAgICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ1tcXD8mXScgKyBuYW1lICsgJz0oW14mI10qKScpLA0KICAgICAgICAgICAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMgPT0gbnVsbCA/ICcnIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMV0ucmVwbGFjZSgvXCsvZywgJyAnKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZVRpdGxlKEFnZW5kYUl0ZW1JZCkgew0KICAgICAgICAgICAgICAgIGlmIChpdGVtVGl0bGVzW0FnZW5kYUl0ZW1JZF0gIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGl0ZW1UaXRsZXNbQWdlbmRhSXRlbUlkXSArICcgLSAnICsgTWVldGluZ1RpdGxlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBNZWV0aW5nVGl0bGU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyB3aGVuIHNlbGVjdGVkIGl0ZW0gaGFzIGNoYW5nZWQgdXBkYXRlIHBhZ2UgLy8NCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJpdGVtOnNlbGVjdGVkIiwgZnVuY3Rpb24gKGUsIGlkLCBzY3JvbGwpIHsNCiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRUYWIgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKG5ldyBSZWdFeHAoIl4oPzouKlsmXFw/XSIgKyBlbmNvZGVVUklDb21wb25lbnQoIlRhYiIpLnJlcGxhY2UoL1tcLlwrXCpdL2csICJcXCQmIikgKyAiKD86XFw9KFteJl0qKSk/KT8uKiQiLCAiaSIpLCAiJDEiKSk7DQogICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBoaWxpZ2h0SXRlbShpZCk7DQogICAgICAgICAgICAgICAgQ3JlYXRlU29jaWFsTGluayhpZCk7DQogICAgICAgICAgICAgICAgVXBkYXRlVGl0bGUoaWQpOw0KDQogICAgICAgICAgICAgICAgLy9SZXBsYWNlIHRoZSBMZWF2ZSBDb21tZW50IGJ1dHRvbiB0byBpY29uDQogICAgICAgICAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7DQogICAgICAgICAgICAgICAgJCgnI25hcnJvdy1sZWF2ZS1jb21tZW50LWJ1dHRvbicpLmh0bWwoIjxzcGFuIGNsYXNzPSdsYXMgbGEtY29tbWVudC1hbHQnIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlJyB0aXRsZT0nTGVhdmUgQ29tbWVudCc+PC9zcGFuPiIpOw0KICAgICAgICAgICAgICAgICQoJyNuYXJyb3ctbGVhdmUtY29tbWVudC1idXR0b24nKS5hdHRyKCJhcmlhLWxhYmVsIiwgInN1Ym1pdCBhIHB1YmxpYyBjb21tZW50IG9uIHRoaXMgYWdlbmRhIGl0ZW0iKTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYgKHNjcm9sbCA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIHNjcm9sbCBpdGVtIGludG8gdmlldyAvLw0KICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9ICQoIi5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkIik7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFswXS5zY3JvbGxJbnRvVmlldygpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRUYWIpIHsNCiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKGlkLCBzZWxlY3RlZFRhYik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB0b2dnbGVTZWxlY3RlZERldGFpbHMoaWQsICdhdHRhY2htZW50cycpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIHZhciBhdHRhY2htZW50Q291bnRzID0gJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50TGlzdCA+Lk9yZGVyZWRBdHRhY2htZW50cyA+IC5PcmRlcmVkQXR0YWNobWVudCA+IC5BZ2VuZGFJdGVtQXR0YWNobWVudCcgKyBpZCkubGVuZ3RoOwkJCQkJCQkJCQkJDQogICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudENvdW50JykuZmlyc3QoKS50ZXh0KCcgKCcgKyBhdHRhY2htZW50Q291bnRzICsgJykgJyk7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKEl0ZW1JZCwgdGFiKSB7DQogICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKCcnLCAnJywgVXBkYXRlUXVlcnkoJ1RhYicsIHRhYikpOw0KDQogICAgICAgICAgICAgICAgaWYgKHRhYiA9PSAnY29tbWVudHMnKSB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuY3NzKHsnZm9udC13ZWlnaHQnOidib2xkJywgJ2NvbG9yJzonYmxhY2snfSk7DQogICAgICAgICAgICAgICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOid0cnVlJ30pOw0KICAgICAgICAgICAgICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JykuY3NzKHsnZm9udC13ZWlnaHQnOidub3JtYWwnLCAnY29sb3InOiAnIzU5NTk1OSd9KTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcpLmF0dHIoeydhcmlhLXNlbGVjdGVkJzonZmFsc2UnfSk7DQogICAgICAgICAgICAgICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJyArIEl0ZW1JZCkuY3NzKHsnZm9udC13ZWlnaHQnOiAnYm9sZCcsICdjb2xvcic6ICdibGFjayd9KTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHMnICsgSXRlbUlkKS5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6J3RydWUnfSk7DQogICAgICAgICAgICAgICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnQnICsgSXRlbUlkKS5jc3Moeydmb250LXdlaWdodCc6ICdub3JtYWwnLCdjb2xvcic6ICcjNTk1OTU5JyB9KTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcgKyBJdGVtSWQpLmF0dHIoeydhcmlhLXNlbGVjdGVkJzonZmFsc2UnfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKCQoJy5PcmRlcmVkQXR0YWNobWVudHMnKS5sZW5ndGggJiYgJCgnLk9yZGVyZWRBdHRhY2htZW50cycpLmlzKCI6dmlzaWJsZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLk9yZGVyZWRBdHRhY2htZW50cyA+Lk9yZGVyZWRBdHRhY2htZW50ID4uQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudE5vbmUnKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuT3JkZXJlZEF0dGFjaG1lbnRzID4uT3JkZXJlZEF0dGFjaG1lbnQgPi5BZ2VuZGFJdGVtQXR0YWNobWVudCcgKyBJdGVtSWQpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudE5vbmUnKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50JyArIEl0ZW1JZCkubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudE5vbmUnKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JykuY3NzKHsnZm9udC13ZWlnaHQnOidib2xkJywgJ2NvbG9yJzonYmxhY2snfSk7DQogICAgICAgICAgICAgICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnQnKS5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6J3RydWUnfSk7DQogICAgICAgICAgICAgICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuY3NzKHsnZm9udC13ZWlnaHQnOidub3JtYWwnLCAnY29sb3InOiAnIzU5NTk1OSd9KTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHMnKS5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6J2ZhbHNlJ30pOw0KICAgICAgICAgICAgICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JyArIEl0ZW1JZCkuY3NzKHsnZm9udC13ZWlnaHQnOiAnYm9sZCcsICdjb2xvcic6ICdibGFjayd9KTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcgKyBJdGVtSWQpLmF0dHIoeydhcmlhLXNlbGVjdGVkJzondHJ1ZSd9KTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHMnICsgSXRlbUlkKS5jc3Moeydmb250LXdlaWdodCc6ICdub3JtYWwnLCdjb2xvcic6ICcjNTk1OTU5JyB9KTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHMnICsgSXRlbUlkKS5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6J2ZhbHNlJ30pOw0KDQogICAgICAgICAgICAgICAgICAgIGlmICgkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50Tm9uZScpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudCcgKyBJdGVtSWQpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmICgkKCcuT3JkZXJlZEF0dGFjaG1lbnRzJykubGVuZ3RoICYmICQoJy5PcmRlcmVkQXR0YWNobWVudHMnKS5pcygiOnZpc2libGUiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoJy5PcmRlcmVkQXR0YWNobWVudHM+Lk9yZGVyZWRBdHRhY2htZW50Pi5BZ2VuZGFJdGVtQXR0YWNobWVudCcgKyBJdGVtSWQpLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50Tm9uZScpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5PcmRlcmVkQXR0YWNobWVudHMgPi5PcmRlcmVkQXR0YWNobWVudD4uQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50JyArIEl0ZW1JZCkubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnROb25lJykuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50JyArIEl0ZW1JZCkuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdmFyIGF0dGFjaG1lbnRDb3VudHMgPSAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnRMaXN0ID4uT3JkZXJlZEF0dGFjaG1lbnRzID4gLk9yZGVyZWRBdHRhY2htZW50ID4gLkFnZW5kYUl0ZW1BdHRhY2htZW50JyArIEl0ZW1JZCkubGVuZ3RoOw0KICAgICAgICAgICAgICAgIHZhciBjb21tZW50Q291bnRzID0gJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50TGlzdCA+IC5BZ2VuZGFJdGVtUHVibGljQ29tbWVudCcgKyBJdGVtSWQpLmxlbmd0aDsNCgkJCQkJCQkJCQkJDQogICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudENvdW50JykuZmlyc3QoKS50ZXh0KCcgKCcgKyBhdHRhY2htZW50Q291bnRzICsgJykgJyk7DQogICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHNDb3VudCcpLmZpcnN0KCkudGV4dCgnICgnICsgY29tbWVudENvdW50cyArICcpJyk7DQoJCQkJDQogICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudENvdW50JyArIEl0ZW1JZCkuZmlyc3QoKS50ZXh0KCcgKCcgKyBhdHRhY2htZW50Q291bnRzICsgJykgJyk7DQogICAgICAgICAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHNDb3VudCcgKyBJdGVtSWQpLmZpcnN0KCkudGV4dCgnICgnICsgY29tbWVudENvdW50cyArICcpJyk7DQoJCQkJDQogICAgICAgICAgICAgICAgdmFyIG1vZGFsQ2xhc3MgPSAnLkRldGFpbHMnOw0KICAgICAgICAgICAgICAgIHZhciBtb2RhbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobW9kYWxDbGFzcyk7DQogICAgICAgICAgICAgICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdLCBbdHlwZT1oaWRkZW5dKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsIFtjb250ZW50ZWRpdGFibGVdJzsNCiAgICAgICAgICAgICAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHMgPSBtb2RhbENvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKGZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nKTsNCg0KICAgICAgICAgICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZm9jdXNhYmxlRWxlbWVudHMpOw0KICAgICAgICAgICAgICAgIGlmIChmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggPiAwKXsNCiAgICAgICAgICAgICAgICAgICAgZm9jdXNhYmxlRWxlbWVudHNbMF0uZm9jdXMoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZVF1ZXJ5KHBhcmFtZXRlciwgdmFsdWUpIHsNCiAgICAgICAgICAgICAgICB2YXIgbG9jID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDsNCg0KICAgICAgICAgICAgICAgIGlmIChsb2MubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gbm8gcXVlcnkgc3RyaW5nIC8vDQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgcGFyYW1ldGVyIGRpcmVjdGx5IHRvIHVybCAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmICsgIj8iICsgcGFyYW1ldGVyICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIGlmIChsb2NbMF0gPT0gJz8nKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsb2MgPSBsb2Muc3Vic3RyaW5nKDEpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy8gc3BsaXQgdXAgZXhpc3RpbmcgcXVlcnkgc3RyaW5nIC8vDQogICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBsb2Muc3BsaXQoJyYnKTsNCg0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tpXS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgocGFyYW1ldGVyLnRvTG93ZXJDYXNlKCkgKyAnPScpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG5ldyB2YWx1ZSAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbaV0gPSBwYXJhbWV0ZXIgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nIHZhbHVlIC8vDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tpXSA9ICcnOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCA9PSBmYWxzZSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChwYXJhbWV0ZXIgKyAnPScgKyB2YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICB2YXIgcXMgPSAnJzsNCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbaV0ubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxcy5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxcyA9ICI/IiArIHBhcmFtc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFzICs9ICImIiArIHBhcmFtc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgiPyIgKyBsb2MsIHFzKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgLy8gICAgU2VsZWN0SXRlbShnZXRQYXJhbWV0ZXJCeU5hbWUoIkl0ZW0iKSwgdHJ1ZSk7DQogICAgICAgICAgICAvL30pOw0KICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KICAgICAgICAgICAgLyoNCiAgICAgICAgICAgICAgICBAbWVkaWEgU2NyZWVuIHsNCiAgICAgICAgICAgICAgICAgICAgLkFnZW5kYUl0ZW1BdHRhY2htZW50c0xpc3Qgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBtYXggaGVpZ2h0IGlzIGNhdXNpbmcgYXR0YWNobWVudHMgb3ZlcmxhcCwgaWYgZXhpc3QgdGhlIGhlaWdodA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21heC1oZWlnaHQ6MjAwcHg7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAuQWdlbmRhSXRlbUF0dGFjaG1lbnRzQXJlYSB7DQogICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzpoaWRkZW47DQogICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OmF1dG87DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgKi8NCiAgICAgICAgPC9zdHlsZT4NCiAgICA8L2Zvcm0+DQoNCiAgICANCg0KDQo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbW9tZW50LmpzLzIuMjIuMi9tb21lbnQubWluLmpzIj48L3NjcmlwdD4NCjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vY2RuLmRhdGF0YWJsZXMubmV0LzEuMTEuNS9jc3MvanF1ZXJ5LmRhdGFUYWJsZXMubWluLmNzcyIgLz4gIA0KDQo8ZGl2IGlkPSJBZ2VuZGFJdGVtRGV0YWlsc01vZGFsIiBjbGFzcz0ibW9kYWwgZmFkZSI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIEFnZW5kYUl0ZW1EZXRhaWxzTW9kYWwiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSI+RGV0YWlsczwvaDM+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPsOXPC9zcGFuPiA8c3BhbiBjbGFzcz0ic3Itb25seSI+Y2xvc2U8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0Zm9ybSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGl0bGUNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJJdGVtVGl0bGUiPjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVzY3JpcHRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+PC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYXRlZ29yeQ0KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNhdGVnb3J5Ij48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkxlZ2lzbGF0aW9uTnVtYmVyTGFiZWwiPjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+U3RhZ2U8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTGVnaXNsYXRpb25TdGFnZUxhYmVsIj48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlcGFydG1lbnQNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJMZWdpc2xhdGlvbkRlcGFydG1lbnRMYWJlbCI+PC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBzdHlsZT0idmVydGljYWwtYWxpZ246IHRvcCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXR0YWNobWVudHMNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJvdmVyZmxvdzpoaWRkZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJMZWdpc2xhdGlvbkRvY3VtZW50SWNvbiI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTGVnaXNsYXRpb25Eb2N1bWVudExpbmsiPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJMZWdpc2xhdGlvblN1cHBvcnRpbmdEb2N1bWVudHNMaXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxoNCBzdHlsZT0ibWFyZ2luLXRvcDowLjVlbSI+SGlzdG9yeTwvaDQ+DQogICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGlkPSJMZWdpc2xhdGlvbkhpc3RvcnlUYWJsZSIgY2xhc3M9Imxpc3QgZGF0YVRhYmxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LWluZGV4LXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSJsZWdpc2xhdGlvbmhpc3RvcnktbWVldGluZ3R5cGUtdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5NZWV0aW5nIFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1tZWV0aW5nZGF0ZS10aCIgY2xhc3M9ImxlZy1uby1icmVhayB0YWJsZXBhZGRpbmciPk1lZXRpbmcgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LXN0YWdlLXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+U3RhZ2U8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1zdGF0dXMtdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5TdGF0dXM8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1udW1iZXItdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5OdW1iZXI8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS12b3RlLXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+Vm90ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9Imhpc3RvcnkiPjwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPGRpdiBpZD0iVm90ZVJlc3VsdHNNb2RhbCIgY2xhc3M9Im1vZGFsIGZhZGUiPg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBWb3RlUmVzdWx0c01vZGFsIiBzdHlsZT0id2lkdGg6IDYwJSI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1vZGFsLXRpdGxlIj5Wb3RlIFJlc3VsdDwvaDM+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPsOXPC9zcGFuPiA8c3BhbiBjbGFzcz0ic3Itb25seSI+Y2xvc2U8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlRleHQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkJhbm5lciI+PC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iVm90ZXMiPjwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGFUYWJsZXNfd3JhcHBlciIgc3R5bGU9Im1hcmdpbjphdXRvIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0YVRhYmxlc19wYWdpbmF0ZSBwYWdpbmdfc2ltcGxlX251bWJlcnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBjdXJyZW50IiBhcmlhLWNvbnRyb2xzPSJ0YWJsZS1jb25mbGljdHMtZGV0YWlscy1saXN0IiBkYXRhLWR0LWlkeD0iMSIgdGFiaW5kZXg9IjAiPjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2PiANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KIA0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgIGZ1bmN0aW9uIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBpbmRleCkgew0KICAgICAgICB2YXIgZGlhbG9nID0gJCgiI1ZvdGVSZXN1bHRzTW9kYWwiKTsNCiAgICAgICAgdmFyIG1vdGlvbiA9IG1vdGlvbnNbaW5kZXhdOw0KDQogICAgICAgIC8vIHBhZ2luZyAvLw0KICAgICAgICB7DQogICAgICAgICAgICB2YXIgcGFnaW5nID0gZGlhbG9nLmZpbmQoIi5kYXRhVGFibGVzX3BhZ2luYXRlIikuZW1wdHkoKTsNCg0KICAgICAgICAgICAgLy8gYmFjayBsaW5rcyAvLw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIGZpcnN0IGxpbmsNCiAgICAgICAgICAgICAgICB2YXIgZmlyc3RsaW5rID0gJCgnPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBmaXJzdCI+Jmx0OyZsdDs8L2E+JykNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImlkIiwgIlZvdGVSZXN1bHRzTW9kYWwtRmlyc3QiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1jb250cm9scyIsICJWb3RlUmVzdWx0c01vZGFsIikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtbGFiZWwiLCAiTmF2aWdhdGUgdG8gRmlyc3QgVm90ZSIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIDApOw0KDQogICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgbGluayAvLw0KICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c2xpbmsgPSAkKCc8YSBjbGFzcz0icGFnaW5hdGVfYnV0dG9uIHByZXZpb3VzIiAiIj4mbHQ7PC9hPicpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJpZCIsICJWb3RlUmVzdWx0c01vZGFsLVByZXZpb3VzIikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtY29udHJvbHMiLCAiVm90ZVJlc3VsdHNNb2RhbCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWxhYmVsIiwgIk5hdmlnYXRlIHRvIFByZXZpb3VzIFZvdGUiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigidGFiaW5kZXgiLCAwKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiZGF0YS1kdC1pZHgiLCAxKTsNCg0KDQogICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgZmlyc3RsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBmaXJzdGxpbmsuYXR0cigiYXJpYS1kaXNhYmxlZCIsICJ0cnVlIik7DQoNCiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBwcmV2aW91c2xpbmsuYXR0cigiYXJpYS1kaXNhYmxlZCIsICJ0cnVlIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBmaXJzdGxpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBwcmV2aW91c2xpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIGluZGV4LTEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChmaXJzdGxpbmspOw0KICAgICAgICAgICAgICAgIHBhZ2luZy5hcHBlbmQocHJldmlvdXNsaW5rKTsgICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIHBhZ2VzIC8vDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIHBhZ2VzID0gJCgiPHNwYW4+Iik7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPG1vdGlvbnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1dHRvbmluZGV4ID0gaTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbGluayA9ICQoJzxhIGNsYXNzPSJwYWdpbmF0ZV9idXR0b24iPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1jb250cm9scyIsICJWb3RlUmVzdWx0c01vZGFsIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIGkrMikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgICAgICAudGV4dChpKzEpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBidXR0b25pbmRleCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIChpID09IGluZGV4KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmFkZENsYXNzKCJjdXJyZW50IikNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHBhZ2VzLmFwcGVuZChsaW5rKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBwYWdpbmcuYXBwZW5kKHBhZ2VzKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gZm9yd2FyZCBsaW5rcyAvLw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIG5leHQgbGluayANCiAgICAgICAgICAgICAgICB2YXIgbmV4dGxpbmsgPSAkKCc8YSBjbGFzcz0icGFnaW5hdGVfYnV0dG9uIG5leHQiPiZndDs8L2E+JykNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImlkIiwgIlZvdGVSZXN1bHRzTW9kYWwtTmV4dCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWNvbnRyb2xzIiwgIlZvdGVSZXN1bHRzTW9kYWwiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1sYWJlbCIsICJOYXZpZ2F0ZSB0byBOZXh0IFZvdGUiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigidGFiaW5kZXgiLCAwKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiZGF0YS1kdC1pZHgiLCBtb3Rpb25zLmxlbmd0aCArIDIpOw0KDQogICAgICAgICAgICAgICAgLy8gbGFzdCBsaW5rDQogICAgICAgICAgICAgICAgdmFyIGxhc3RsaW5rID0gJCgnPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBsYXN0Ij4mZ3Q7Jmd0OzwvYT4nKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiaWQiLCAiVm90ZVJlc3VsdHNNb2RhbC1MYXN0IikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtY29udHJvbHMiLCAiVm90ZVJlc3VsdHNNb2RhbCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWxhYmVsIiwgIk5hdmlnYXRlIHRvIExhc3QgVm90ZSIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIG1vdGlvbnMubGVuZ3RoICsgMyk7DQoNCg0KICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSBtb3Rpb25zLmxlbmd0aCAtIDEpIHsNCiAgICAgICAgICAgICAgICAgICAgbmV4dGxpbmsuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7DQogICAgICAgICAgICAgICAgICAgIG5leHRsaW5rLmF0dHIoImFyaWEtZGlzYWJsZWQiLCAidHJ1ZSIpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhc3RsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBsYXN0bGluay5hdHRyKCJhcmlhLWRpc2FibGVkIiwgInRydWUiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIG5leHRsaW5rDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBpbmRleCsxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgbGFzdGxpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIG1vdGlvbnMubGVuZ3RoLTEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChuZXh0bGluayk7DQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChsYXN0bGluayk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgICAgIA0KDQoNCiAgICAgICAgLy8gcmVuZGVyIG1vdGlvbiAvLw0KDQogICAgICAgIGRpYWxvZy5maW5kKCIuVGV4dCIpLnRleHQobW90aW9uLlRleHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICB2YXIgYmFubmVyID0gZGlhbG9nLmZpbmQoIi5CYW5uZXIiKTsNCiAgICAgICAgYmFubmVyLnRleHQobW90aW9uLkJhbm5lclRleHQpOw0KDQogICAgICAgIHN3aXRjaCAobW90aW9uLkJhbm5lckNvbG9yKSB7DQogICAgICAgICAgICBjYXNlICdncmVlbic6DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiYmFja2dyb3VuZC1jb2xvciIsICcjMjFBRTUyJyk7DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiY29sb3IiLCAnd2hpdGUnKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSAncmVkJzoNCiAgICAgICAgICAgICAgICBiYW5uZXIuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIiwgJ3JlZCcpOw0KICAgICAgICAgICAgICAgIGJhbm5lci5jc3MoImNvbG9yIiwgJ2JsYWNrJyk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiYmFja2dyb3VuZC1jb2xvciIsICcnKTsNCiAgICAgICAgICAgICAgICBiYW5uZXIuY3NzKCJjb2xvciIsICcnKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgZGlhbG9nLmZpbmQoIi5Wb3RlcyIpLmVtcHR5KCkNCg0KICAgICAgICAvLyBhZGQgdm90ZXMgdG8gZGlhbG9nIC8vDQogICAgICAgIHZhciB2b3RlcyA9IHt9Ow0KICAgICAgICB2YXIgdm90ZW9yZGVyID0gWyJZZXMiLCAiTm8iLCAiQWJzdGFpbiIsICJBYnNlbnQiXTsNCg0KICAgICAgICAkLmVhY2gobW90aW9uLlZvdGVzLCBmdW5jdGlvbihpbXYsIG1vdGlvbnZvdGUpIHsNCiAgICAgICAgICAgIGlmICghdm90ZXMuaGFzT3duUHJvcGVydHkobW90aW9udm90ZS5Wb3RlKSkgew0KICAgICAgICAgICAgICAgIHZvdGVzW21vdGlvbnZvdGUuVm90ZV0gPSBbXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHZvdGVvcmRlci5pbmRleE9mKG1vdGlvbnZvdGUuVm90ZSkgPT0gLTEpIHsNCiAgICAgICAgICAgICAgICB2b3Rlb3JkZXIucHVzaChtb3Rpb252b3RlLlZvdGUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2b3Rlc1ttb3Rpb252b3RlLlZvdGVdLnB1c2goDQogICAgICAgICAgICAgICAgJCgiPHNwYW4+IikudGV4dChtb3Rpb252b3RlLlVzZXJOYW1lKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgJC5lYWNoKHZvdGVvcmRlciwgZnVuY3Rpb24oaXYsIHZvdGUpIHsNCiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKCIjVm90ZUNvbnRhaW5lclRlbXBsYXRlIikuY2xvbmUoKTsNCg0KICAgICAgICAgICAgaWYgKHZvdGVzLmhhc093blByb3BlcnR5KHZvdGUpKSB7DQogICAgICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoIi5Wb3RlSGVhZGVyIC5jb3VudCIpLnRleHQodm90ZXNbdm90ZV0ubGVuZ3RoKTsNCiAgICAgICAgICAgICAgICBjb250YWluZXIuZmluZCgiLlZvdGVycyIpLmFwcGVuZCguLi4odm90ZXNbdm90ZV0pKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoIi5Wb3RlSGVhZGVyIC5Wb3RlIikudGV4dCh2b3RlKTsNCiAgICAgICAgICAgIGRpYWxvZy5maW5kKCIuVm90ZXMiKS5hcHBlbmQoY29udGFpbmVyLmNoaWxkcmVuKCkpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvLyBmaXggZm9yIG5lc3RlZCBtb3RhbHMgLy8NCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQogICAgICAgICQoZG9jdW1lbnQpLm9uKHsNCiAgICAgICAgICAgICdzaG93LmJzLm1vZGFsJzogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHZhciB6SW5kZXggPSAxMDQwICsgKDEwICogJCgnLm1vZGFsOnZpc2libGUnKS5sZW5ndGgpOw0KICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCd6LWluZGV4JywgekluZGV4KTsNCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgJCgnLm1vZGFsLWJhY2tkcm9wJykubm90KCcubW9kYWwtc3RhY2snKS5jc3MoJ3otaW5kZXgnLCB6SW5kZXggLSAxKS5hZGRDbGFzcygnbW9kYWwtc3RhY2snKTsgfSwgMCk7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgJ2hpZGRlbi5icy5tb2RhbCc6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCgnLm1vZGFsOnZpc2libGUnKS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIHJlc3RvcmUgdGhlIG1vZGFsLW9wZW4gY2xhc3MgdG8gdGhlIGJvZHkgZWxlbWVudCwgc28gdGhhdCBzY3JvbGxpbmcgd29ya3MNCiAgICAgICAgICAgICAgICAgICAgLy8gcHJvcGVybHkgYWZ0ZXIgZGUtc3RhY2tpbmcgYSBtb2RhbC4NCiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7ICQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoJ21vZGFsLW9wZW4nKTsgfSwgMCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCAnLm1vZGFsJyk7DQogICAgfSk7DQo8L3NjcmlwdD4NCg0KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICAvKiBmbGV4LWdyaWQgY2xhc3NlcyAqLw0KICAgIC5pbnB1dGZvcm0gew0KCSAgICBmb250LXNpemU6MWVtOw0KCSAgICBkaXNwbGF5OmdyaWQ7DQoJICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczowZnIgMWZyOw0KCSAgICBncmlkLWdhcDoxMHB4IDEwcHg7DQoJICAgIGFsaWduLWl0ZW1zOmJhc2VsaW5lOw0KICAgIH0NCgkJCQ0KICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1NzVweCkgew0KICAgICAgICAuaW5wdXRmb3JtIHsNCiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyOw0KICAgICAgICAgICAgZ3JpZC1nYXA6MHB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmlucHV0Zm9ybSA+IGxhYmVsLA0KICAgICAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGxhYmVsIHsNCiAgICAgICAgICAgIG1hcmdpbi10b3A6MjBweDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC5pbnB1dGZvcm0gPiBsYWJlbCwNCiAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGxhYmVsIHsNCgkgICAgd2hpdGUtc3BhY2U6bm93cmFwOw0KCSAgICBmb250LXNpemU6MWVtOw0KCSAgICBmb250LXdlaWdodDpib2xkOw0KICAgIH0NCg0KICAgIC5pbnB1dGZvcm0gPiAucm93IHsNCgkgICAgZGlzcGxheTpjb250ZW50czsNCiAgICB9DQoJCQkNCiAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGRpdiB7DQoJICAgIGdyaWQtY29sdW1uIDogMSAvIDM7DQogICAgfQ0KCQkJDQogICAgLmlucHV0Zm9ybSA+IC5yb3cgPiBsYWJlbCtkaXYgew0KCSAgICBncmlkLWNvbHVtbjogMiAvIDM7DQogICAgfQ0KDQogICAgLmlucHV0Zm9ybSBsYWJlbCtkaXYgPiBkaXYrZGl2IHsNCgkgICAgbWFyZ2luLXRvcDo0cHg7DQogICAgfQ0KDQogICAgLyogbW9kYWwgc3R5bGVzICovDQogICAgLm1vZGFsLWRpYWxvZy5BZ2VuZGFJdGVtRGV0YWlsc01vZGFsIHsNCiAgICAgICAgbWF4LXdpZHRoOiAxMDAwcHg7DQogICAgfQ0KDQogICAgLkFnZW5kYUl0ZW1EZXRhaWxzTW9kYWwgLm1vZGFsLWNvbnRlbnQgew0KICAgICAgICBtYXgtaGVpZ2h0Ojkwdmg7DQogICAgICAgIG92ZXJmbG93OmhpZGRlbjsNCiAgICB9DQoNCiAgICAuQWdlbmRhSXRlbURldGFpbHNNb2RhbCAubW9kYWwtY29udGVudCAubW9kYWwtYm9keSB7DQogICAgICAgIG92ZXJmbG93LXk6YXV0bzsNCiAgICB9DQoNCiAgICAuQWdlbmRhSXRlbURldGFpbHNNb2RhbCAuZGVzY3JpcHRpb24gew0KICAgICAgICBtYXgtaGVpZ2h0OjEwZW07DQogICAgICAgIG92ZXJmbG93LXk6YXV0bzsNCiAgICB9DQoNCiAgICAuVm90ZVJlc3VsdHNNb2RhbCAuVGV4dCB7DQogICAgICAgIHBhZGRpbmc6IDJweCAwIDE4cHg7DQogICAgfQ0KDQogICAgLlZvdGVSZXN1bHRzTW9kYWwgLkJhbm5lciB7DQogICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7DQogICAgICAgIHBhZGRpbmc6NXB4Ow0KICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgfQ0KDQogICAgLlZvdGVzIC5Wb3RlSGVhZGVyIHsNCiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgICAgcGFkZGluZzogMTBweDsNCiAgICB9DQoNCiAgICAuVm90ZXMgLlZvdGVycyB7DQogICAgICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzMlIG1pbm1heCgwLCAzNCUpIDMzJTsNCiAgICAgICAgZ3JpZC1nYXA6IDEwcHg7DQogICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTsNCiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZjdmN2Y3Ow0KICAgIH0NCg0KICAgIGgzLm1vZGFsLXRpdGxlIHsNCiAgICAgICAgZm9udC1zaXplOjE3cHg7DQogICAgfQ0KDQogICAgI0xlZ2lzbGF0aW9uU3VwcG9ydGluZ0RvY3VtZW50c0xpc3QgPiBkaXYgew0KICAgICAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdGQgew0KICAgICAgICBjdXJzb3I6cG9pbnRlcjsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdHIuc2VsZWN0ZWQgdGQgew0KICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7DQogICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjazsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdHIuc2VsZWN0ZWQgPiA6Zmlyc3QtY2hpbGQgew0KICAgICAgICBib3JkZXItbGVmdDoxcHggc29saWQgYmxhY2s7DQogICAgfQ0KDQogICAgI0xlZ2lzbGF0aW9uSGlzdG9yeVRhYmxlIHRyLnNlbGVjdGVkID4gOmxhc3QtY2hpbGQgew0KICAgICAgICBib3JkZXItcmlnaHQ6MXB4IHNvbGlkIGJsYWNrOw0KICAgIH0NCjwvc3R5bGU+DQoNCjxkaXYgaWQ9IlZvdGVDb250YWluZXJUZW1wbGF0ZSIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgPGRpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iVm90ZUhlYWRlciI+PHNwYW4gY2xhc3M9IlZvdGUiPjwvc3Bhbj4gKCA8c3BhbiBjbGFzcz0iY291bnQiPjA8L3NwYW4+ICk8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iVm90ZXJzIj48L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgdmFyIEFnZW5kYUl0ZW1zd2l0aEhpc3RvcnkgPSBbXTsNCg0KICAgICQoImRvY3VtZW50IikucmVhZHkoZnVuY3Rpb24oKSB7DQogICAgICAgIC8vIGFkZCBhZ2VuZGEgaXRlbSBoaXN0b3J5IGxpbmtzIGR5bmFtaWNhbGx5IHRvIHRoZSBhZ2VuZGEgLy8NCiAgICAgICAgJC5lYWNoKEFnZW5kYUl0ZW1zd2l0aEhpc3RvcnksIGZ1bmN0aW9uKGksIHYpIHsNCiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgaWNvbiAvLw0KICAgICAgICAgICAgJCgiLkFnZW5kYUl0ZW0iICsgdiArICIgLkFnZW5kYUl0ZW1JY29ucyIpLmZpbmQoIi5BZ2VuZGFJdGVtSGlzdG9yeUxpbmsiKS5yZW1vdmUoKTsNCg0KICAgICAgICAgICAgLy8gYWRkIGljb24gLy8NCiAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtIiArIHYgKyAiIC5BZ2VuZGFJdGVtSWNvbnMiKS5hcHBlbmQoDQogICAgICAgICAgICAgICAgJCgnPGEgaHJlZj0iIj4nKQ0KICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoIkFnZW5kYUl0ZW1IaXN0b3J5TGluayIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJpdGVtaWQiLCB2KQ0KICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCc8aSBjbGFzcz0ibGFzIGxhLWhpc3RvcnkiPjwvaT4nKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgJCgiLkFnZW5kYUl0ZW1IaXN0b3J5TGluayIpLmNsaWNrKGZ1bmN0aW9uKGUpew0KICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICBBZ2VuZGFJdGVtSGlzdG9yeS5EaWFsb2cuT3BlbignY2UxYTNlZmQtNGYzMy00ODM4LThhYWUtNzZmNzEyM2FlZDhjJywgJCh0aGlzKS5hdHRyKCJpdGVtaWQiKSk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KPC9zY3JpcHQ+DQoNCg0KPC9ib2R5Pg0KDQo8L2h0bWw+DQo=
  recorded_at: Sat, 22 Feb 2025 17:21:51 GMT
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/Meeting.aspx?Agenda=Agenda&Id=ce1a3efd-4f33-4838-8aae-76f7123aed8c&lang=English
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      Set-Cookie:
      - ASP.NET_SessionId=dzdqywhqs4unv04mnr3wwair; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Date:
      - Sat, 22 Feb 2025 17:21:51 GMT
      Content-Length:
      - '96338'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 22 Feb 2025 17:21:51 GMT
recorded_with: VCR 6.3.1
