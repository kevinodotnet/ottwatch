---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/8.5
      Strict-Transport-Security:
      - max-age=31536000
      Date:
      - Mon, 18 Jul 2022 02:36:00 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>


<html id="masterPageHeader" xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta name="google-site-verification" content="7xgCFQb2iwJRLVYPSjXxkIpRrjgr2Hr9kMfAEqbYpBM" /><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="google-site-verification" content="pCJOncrPbFAcrD5F-MHMv6LeACWDKF7ioMI5AGhBH1o" /><title>
	eSCRIBE Published Meetings
</title>
    
    <!-- Syncfusion datepicker https://ej2.syncfusion.com/javascript/documentation/daterangepicker/accessibility/ -->
    <link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-base/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-buttons/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-lists/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-calendars/styles/material.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/ej2/20.1.58/dist/ej2.min.js" type="text/javascript"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.1/fullcalendar.min.css" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" />
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" /><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" /><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/Meeting?v=7sdLsP-6aQOfzQENdG68fizcss0Nfv6ByddRS2mIdfU1"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Registering Syncfusion license key
            ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhhQlFac1dJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxRdkNjWn5ec3NVQGVYVUU=');

            $("#masterPageHeader").attr("lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
            $("#masterPageHeader").attr("xml:lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
                $("body").on("show.bs.dropdown", "*", function (e) {
                    e.stopPropagation();

                    var button = $(this);
                    var dropdown = button.parent();
                    var menu = dropdown.find("ul");
                    var container = dropdown.closest("main, html, window");

                    dropdown.removeClass("dropup");

                    var containertop = container.offset().top;
                    var containerheight = container.height(); 
                    var buttontop = button.offset().top - containertop;
                    var buttonbottom = buttontop + button.outerHeight(true); // - containertop;

                    menu.css("max-height", "")

                    var menuheight = menu.outerHeight(true);
                    var menubottom = buttonbottom + menuheight;

                    if (menubottom > containerheight) {
                        // bottom of the menu off of the page //

                        if (menuheight < buttontop) {
                            // enough space to open menu in up direction //
                            dropdown.addClass("dropup");
                        }
                        else {
                            // not enough space, limit height of menu //
                            if (buttontop > (containerheight - buttonbottom)) {
                                // more space above //
                                dropdown.addClass("dropup");
                                menu.css("max-height", (buttontop - 5) + "px");
                            }
                            else {
                                // more space below //
                                menu.css("max-height", (containerheight - buttonbottom - 5) + "px");
                            }
                        }
                    }
                });
            });
    </script>

    <link href="/Content/css?v=G1q-2aYfE_AZOMkvKzK2sihII6pAme99SwqvhmGRcac1" rel="stylesheet"/>
<link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="/Content/base/css?v=oCcL4rnES8adxKB9fiU4F5ioECU5LeuE9IMbfR7Y_k81" rel="stylesheet"/>

    <script src="/bundles/MeetingList?v=e4Ptuni7g8Q8v8c3RRk44Y6R6z_V_2NH3cMLZjoVIUU1"></script>



    <style>

        #footer .copyright {
            text-align: center;
            font-size: 12px;
            color: #999;
        }
    </style>

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> </head>
<body>
    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> <form name="aspnetForm" method="post" action="./" id="aspnetForm">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="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" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="8F06231E" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="6TKUg1C0PGg0CHaJgRmP0pJAzv7uYwQY9Lzc81dprwwKcJfK6JexDop2eBPKR0Ydkm9nlF4dXYbWJTRvbB6wVjkIT7ULmtMUYTJVBPhTib1SUzvn2az/zYZ9W1vWZY5bBxMPnz57P9YXXb12qD0sv8h4TOW34xAuZPvgC/JhvGxULgMOS0ScFH8A6AacI42lIqw5Wlg9WFBP6bUsnibmKRQd2IqRvNKGu7OmaBhDy+Rcd0naq6vdBxHi/y4jPtSOumwA+SmdXe2hmb1ojtHMx8mOnB12h+EywxBfPDVO2RYi+YZgzmWiNnprhWlru2CCp8DC75g5meXTdIzIDc+pu+patM18ecYXZR9pqa4q5vXfCulBBsNNcVHOTXgXRB1UgIaEcC67lw0LFtsmJlrBCSlIcJqDc7P/OrlzplQv8L3F4nBqsnvUnp6lyW5xhxSEzYdql30tMClyopmvZNcl8vOxavttzbYqRoppC2fuAbND3yMzgjOwlzmETP0KD57RxjzPd+iPIXg8jl11MNty7iAilqoryQfnFTGBCHmzz+reYirSr/800QIAc3EHAnHLkxAh1VA7TLW7rKFbZGZsWLGdEWKo5tDMUIcBTFIG9+X2zUQl+fCfEcRvhijcKB6mWRAZD9qdl8+KlKRjMaaHMg5wwYO2kI036UD/v83tkg/MCs251DIzl9ta39lhnoyztQmAbWeKg3+kDo5SKQjBkms1eAGj8nHeJhWR73XUsXJxum8y/pq21/zfsXAWUBRAKQRHKKxW69NBPPmKvSzFBsi/giJbyEJG9EtPjO61SAgORI9v086F0/V3gb5BPn3Y1bjxmyfJwEcsboWj13w1texm9VaH05PilfVZa5vCjUUOTtHG3XN5nUr7GuYx+P/x2MUTwC7woHzfbOoK9lkK4n0en/RPdP2msdPQH5reXTk+6yEaFLwXF/K3PtsFjVCAOcbuiMMaQgKv6r0gSPvSsBUr7NeiO1VLs49x/4LuBVHJDJssLuyWFAytiH2CMyOguA+PyECgTNoFG+82S76fJihDmzlTnY70WDzLs+V7ArWJ2cWAMqSGuB9RN0Cu/XkzOmEXT3nSf0GwB6/mTIfkibsyI4tGiUDofpXNtcUCApTwqloXwWh3dPMHzt+w00EwTy0e3FiK1EF2R9dFPty3bxiRznHS0peACoc3CXg+a0NwZnKjHNGDRR7ddUUsnLtCq/rYe6lej4xwJf8X8LnnSZ1g7RgeCRKeBRqDcq+s7BMwHLiim0LicrCZ8uKPt329VtdXCsPcotvviLbsWnQiOssAtAt4SJxUcDY3tZRm7x1NSWaRaVi7O2wPeNxQlIX/vjP0RGQP+eGBKuGtTnO+tUKLBt3mtpDJuiK1bCtiQ+Tyhz45Enda9YuLVfs8eIldRzPBNbwSwnN5t4ETTm1zVChITj2rGD4F/AVLdu42s8mzyIHiQ6BIizNVPBn0vu3Q0Jz/w54TZuPRUwRtCns56MHJyNsgOM05e/KFyIsNmhgpS6xD/PMZnITJyYFurdxwf74n1lLrvR7qBleAvi4AzH3i6jE6k7tGvDHwQfiYA2AEpA5mQ0Fk7tQVnWChqn90edpwopJ4KMNQfu92xnCcxA==" />
        

        
        

        <div class="container-fluid" id="containerclass">
            
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
    

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.js"></script>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
   
    <div id="ctl00_MainContent_MeetingListUpdateProgress" style="display:none;">
	
            <div class="loaderPosition">
                <span class="la la-spinner la-spin loaderDesign"></span>
            </div>
        
</div>
    <style>
        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
                display: block;
                content: "";
        }

        .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
        }

       .ss-multi-selected {
           max-height:700px;
           overflow: scroll ;
           overflow-y: hidden; 
           overflow-x: hidden; 
       }
       .fc-day-grid-event .fc-content
       {
               white-space: nowrap;
               overflow: hidden
       }
         #calendar .fc-view-container{
           max-height:inherit;
           padding-bottom:30px;
           overflow:visible;
       }
        #divDateRangeFilterPopup .daterangepicker{min-width:490px;}

        @media only screen and (device-width: 768px) {
            #divDateRangeFilterPopup .daterangepicker {
                position: absolute;
                left: -200px !important;
                right: 900px !important;
                /*display: block !important;*/
                min-width: 490px;
            }

            .dropdown-menu dropdown-menu-right {
                display: block !important;
            }

            #PastMeetingTitle.pull-left {
                margin-left: 10px !important;
            }

            #PastMeetingFilterButton.btn-group {
                margin-right: 10px !important;
            }
        }

        .inputtable th {
            padding-right: 12px;
            vertical-align: top;
        }

        h1 {
            font-size: 2rem!important;
            font-weight: 700!important;
        }

        h2 {
            font-weight: 500!important;
        }       
    </style>
    <div style="min-height: 100vh;">
    <header>
        <div class="row d-flex justify-content-center ">
            <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
                <div style="margin-left: 15px; margin-right: 15px;">
                    <div class="input-group">
                                            <div class="input-group-prepend  d-flex" id="adv-search">
                        <a class="skip-to-content-link" href="">
                            Skip to content
                        </a>
                        <div class='form-group has-feedback has-clear searchGroup ' style="flex-basis: 100%;">
                            <label class="sr-only" for="ctl00_MainContent_txtSearch"><span>Search</span></label>
                            <input name="ctl00$MainContent$txtSearch" id="ctl00_MainContent_txtSearch" class="form-control" class="SearchText" onkeydown="return searchEnter(event);" placeholder="Search" aria-labelledby="ctl00_MainContent_txtSearch" type="search" style="max-width: none; border-right: 0;" />
                            <span class="form-control-clear glyphicon glyphicon-remove form-control-feedback hidden"> </span>
                        </div>

                        <button role="button" aria-label="search" id="searchBtnMain" class='input-group-append searchGroup ' style="border-bottom-right-radius: 4px !important; border-top-right-radius: 4px !important; cursor: pointer;" type="button" onclick="searchData();">
                            <span tabindex="0" class="input-group-text input-group-addon" onkeydown="return searchEnter(event);" aria-label="search button"><span class="fa fa-search fontIcon" aria-hidden="true"></span></span>
                        </button>
                        <div id="filterIcon" class='input-group-btn input-group-addon '>
                            <div class="btn-group" role="group" aria-label="Filter">
                                <div class="dropdown dropdown-lg" >
                                    <button type="button" id="btnFilter" class="btn filter-icon dropdown-toggle dropdown-toggle-off" data-toggle="dropdown" aria-label="Filter" aria-expanded="false" style="margin-left: .75em;"><span class="la la-filter"></span><span class="fa fa-caret-down"></span></button>
                                    <div id="divDateRangeFilterPopup" class="dropdown-menu dropdown-menu-right" role="menu">
                                        <div class="form-group filterlabel" role="menuitem">
                                            <label for="ctl00_MainContent_FilterByDate">
                                                Filter By Date</label><br />
                                            <div class="input-group-prepend srch-input-group">
                                                <input name="ctl00$MainContent$FilterByDate" type="text" id="ctl00_MainContent_FilterByDate" class="form-control FilterByDate" onpaste="return false;" style="max-width: none; background-color: #fff;" />
                                                <!--<span class="input-group-append control-clear">
                                                    <span class="input-group-text input-group-addon"><span class="fa fa-times fontIcon" aria-hidden="true"></span></span>
                                                </span>-->
                                            </div>
                                        </div>
                                        <div class="form-group" role="menuitem">
                                            <label for="ctl00_MainContent_lblMultiSelect">
                                                Filter By Meeting Type</label><br />
                                            <select size="4" name="ctl00$MainContent$lblMultiSelect" multiple="multiple" id="ctl00_MainContent_lblMultiSelect" class="MeetingTypeListbox" onchange="ChangeFilterFlag();">
	<option value="1*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-1-1*ef58236b-fce9-45cc-becf-c31c7a95d20f">Accessibility Advisory Committee</option>
	<option value="3*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-3*ef58236b-fce9-45cc-becf-c31c7a95d20f">Agriculture and Rural Affairs Committee</option>
	<option value="6*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-6*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture and Recreation Advisory Committee</option>
	<option value="7*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-7*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture, Heritage and Recreation Advisory Committee</option>
	<option value="9*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-9*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Committee</option>
	<option value="10*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-10*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Sub-Committee</option>
	<option value="11*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-11*ef58236b-fce9-45cc-becf-c31c7a95d20f">Auditor General Hiring Panel</option>
	<option value="24*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-24-24*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Board of Health</option>
	<option value="12*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-12*ef58236b-fce9-45cc-becf-c31c7a95d20f">Built Heritage Sub-Committee</option>
	<option value="13*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-13*ef58236b-fce9-45cc-becf-c31c7a95d20f">City Council</option>
	<option value="16*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-16*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 1</option>
	<option value="17*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-17*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 2</option>
	<option value="18*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-18*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 3</option>
	<option value="19*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-19*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Revision</option>
	<option value="64*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-64*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Community and Protective Services Committee</option>
	<option value="21*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-21*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community Service Advisory Committee</option>
	<option value="15*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-15*ef58236b-fce9-45cc-becf-c31c7a95d20f">Council Francophone Caucus</option>
	<option value="22*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-22*ef58236b-fce9-45cc-becf-c31c7a95d20f">Court of Revision</option>
	<option value="23*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-23*ef58236b-fce9-45cc-becf-c31c7a95d20f">Debenture Committee</option>
	<option value="24*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-24-24*ef58236b-fce9-45cc-becf-c31c7a95d20f">Election Compliance Audit Committee</option>
	<option value="25*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-25-25*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment and Climate Protection Committee</option>
	<option value="26*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-26-26*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment Committee</option>
	<option value="27*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-27-27*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environmental Stewardship Advisory Committee</option>
	<option value="28*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-28-28*ef58236b-fce9-45cc-becf-c31c7a95d20f">Finance and Economic Development Committee</option>
	<option value="32*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-32*ef58236b-fce9-45cc-becf-c31c7a95d20f">French Language Services Advisory Committee</option>
	<option value="33*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-33*ef58236b-fce9-45cc-becf-c31c7a95d20f">Information Technology Sub-Committee</option>
	<option value="124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs</option>
	<option value="34*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-4-34*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Audit Sub-Committee</option>
	<option value="29*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-29-29*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee</option>
	<option value="126*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-126*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting - Planning Committee and Built Heritage Sub-committee</option>
	<option value="49*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-49*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee</option>
	<option value="36*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-36*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee</option>
	<option value="35*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-35*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting of Planning Committee and Built Heritage Sub-committee</option>
	<option value="50*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-50*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee</option>
	<option value="37*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-37*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee</option>
	<option value="51*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-51*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Planning Committee and Community and Protective Services Committee</option>
	<option value="112*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-22-112*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Community and Protective Services Committee</option>
	<option value="38*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-8-38*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Transportation Committee and Transit Commission</option>
	<option value="39*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-39*ef58236b-fce9-45cc-becf-c31c7a95d20f">Nominating Committee</option>
	<option value="40*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-40*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Board of Health</option>
	<option value="41*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-41*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Built Heritage Advisory Committee</option>
	<option value="5*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-5-5*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Ottawa City Council</option>
	<option value="42*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-42*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board</option>
	<option value="43*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-43*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Public Library Board</option>
	<option value="44*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-14-44*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Advisory Committee</option>
	<option value="45*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-45*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Committee</option>
	<option value="46*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-46*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Complaints Committee</option>
	<option value="47*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-47*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Finance and Audit Committee</option>
	<option value="48*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-48*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Human Resources Committee</option>
	<option value="125*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-125*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Policy and Governance Committee</option>
	<option value="28*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-28-28*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Standing Committee on Environmental Protection, Water and Waste Management</option>
	<option value="53*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-53*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transit Commission</option>
	<option value="2*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-2*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transportation Committee</option>

</select>
                                        </div>
                                        <div class="form-group" id="FilterByConflictMember" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByConflictMember">
                                                Filter By Conflict Member</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByConflictMember" multiple="multiple" id="ctl00_MainContent_lbFilterByConflictMember" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        
                                        <div class="form-group" id="FilterByStage" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStage">
                                                Filter By Stage</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStage" multiple="multiple" id="ctl00_MainContent_lbFilterByStage" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByStatus" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStatus">
                                                Filter By Status</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStatus" multiple="multiple" id="ctl00_MainContent_lbFilterByStatus" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByDepartment" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByDepartment">
                                                Filter By Department</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByDepartment" multiple="multiple" id="ctl00_MainContent_lbFilterByDepartment" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        
                                        <div class="form-group" id="FilterByKeyword" role="menuitem">
                                            <label for="ctl00_MainContent_txtFilterByKeyword">
                                                Filter By Keyword</label><br />
                                            <div class="input-group srch-input-group">
                                                <input name="ctl00$MainContent$txtFilterByKeyword" type="text" id="ctl00_MainContent_txtFilterByKeyword" class="form-control" />
                                                <span class="input-group-addon control-clear">
                                                    <span class="glyphicon glyphicon-remove"></span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 Modalbuttons">
                                                <button type="button" id="btnResetFilters" class="btn btn-reset" onclick="ResetFilters();">
                                                    Reset Filters</button>
                                            </div>
                                            <div class="col-md-6 Modalbuttons">
                                                <a onclick="return postbackButtonClick();" id="FilterResults" class="btn btn-primary btn-orange results" href="javascript:__doPostBack(&#39;ctl00$MainContent$FilterResults&#39;,&#39;&#39;)">Filter Results</a>
                                                <button type="button" id="btnFilterResults" class="btn-primary btn-orange" onclick="searchData();">
                                                    Filter Results</button>
                                                <button type="button" id="btnFunnelFilterResults" class="btn-primary btn-orange" >
                                                    Filter Results</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
    </header>
   
    <main id="maincontent" class="row d-flex justify-content-center">
        <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
            <div style="margin-left: 15px; margin-right: 15px;" class="child">
                <div>
                    <div id="calendar" class=''></div>
                    <div id="cal-list" class="fc" style="display: none;">
                        <div role="navigation" aria-label="other meetings options" class="fc-toolbar">
                            <div id="ctl00_MainContent_MonthMenu" class="fc-left">
	
                                    <input type="hidden" name="ctl00$MainContent$StartMonthDate" id="ctl00_MainContent_StartMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$EndMonthDate" id="ctl00_MainContent_EndMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$CurrentMonth" id="ctl00_MainContent_CurrentMonth" />
                                    <input type="hidden" name="ctl00$MainContent$LastDay" id="ctl00_MainContent_LastDay" />
                                    <input type="hidden" name="ctl00$MainContent$IsFilterList" id="ctl00_MainContent_IsFilterList" value="0" />
                                    <input type="hidden" name="ctl00$MainContent$IsChangeInMonth" id="ctl00_MainContent_IsChangeInMonth" value="0" />
                                    <button type="button" id="btnPreviousMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Previous Month"><span class="fc-icon fc-icon-left-single-arrow"></span></button>
                                    
                                    <!--<h1 style="display:none" aria-hidden="true" id="monthText">
                                        <span id="ctl00_MainContent_lblMonthText"></span>
                                    </h1>-->
                                    <button type="button" id="btnNextMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Next Month"><span class="fc-icon fc-icon-right-single-arrow"></span></button>
                                
</div>

                            <div id="mergedListHeader" class="fc-left">
                                <h1>Upcoming Meetings</h1>
                            </div>

                            <div id="pastHeader" class="fc-left">
                                <h1>Past Meetings</h1>
                            </div>
                            <div class="AgendaItemHistoryHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-historyitem" class="title-icons search-resourcelibrary AgendaItemHistorySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterAgendaItemHistoryLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="AgendaItemHistorySearchField" aria-labelledby="FilterAgendaItemHistryLabel">
                                    </div>
                                </span>
                            </div>

                            <div class="LegislationHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-legislation" class="title-icons search-resourcelibrary LegislationLibrarySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterLegislationLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="LegislationSearchField" aria-labelledby="FilterLegislationLabel">
                                    </div>
                                </span>
                            </div>

                            <div id="header-buttons" class="fc-right" role="group" aria-label="event views">
                                <button type="button" id="btnCalendarView" class="fc-month-button calendarView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Calendar</button>
                                <button type="button" id="btnMergedListView" class="fc-mergedListViewButton-button mergedListView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    
                                    List
                                </button>
                                <button type="button" id="btnListView" class="fc-myCustomButton-button listView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Upcoming</button>
                                <button type="button" id="btnPastView" class="fc-pastViewButton-button pastView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Past
                                </button>
                                <button type="button" id="btnConflictsView" class="fc-myCustomConflictsButton-button conflicts fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Conflicts Registry</button>
                                
                                
                            </div>
                            <div class="fc-center" style="display: none;"></div>
                            <div class="fc-clear" style="display: none;"></div>
                        </div>
                        <div class="row">
                            <div role="region" aria-label="Meetings list" id="all-list" class="col-md-12">
                                <div id="ctl00_MainContent_MeetingTypeList">
	
                                        <input type="hidden" name="ctl00$MainContent$IsFilter" id="ctl00_MainContent_IsFilter" value="0" />
                                        <input type="hidden" name="ctl00$MainContent$scrollIndexer" id="ctl00_MainContent_scrollIndexer" value="1" />
                                                    
                                                    <a id="ctl00_MainContent_btnShowMore" class="d-none" href="javascript:__doPostBack(&#39;ctl00$MainContent$btnShowMore&#39;,&#39;&#39;)">Show More</a>
                                                    <span id="ctl00_MainContent_meetingsPaging"></span>

                                    
</div>
                            </div>

                            <div role="region" aria-label="Search result" id="searchresults" class="col-md-12" style="display: none;">
                                <div class="ms-WPBody noindex" style="width: 100%">
                                    <div class="srch-results">
                                        <table id="searchTable" style="border: none; width: 100%; word-wrap: break-word; word-break: break-word;">
                                            <thead>
                                                <tr style="display: none;">
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div role="region" aria-label="Registered Conflicts" id="all-conflicts-list" class="col-md-12">
                                <table id="table-conflicts-list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th class="tablepadding" scope="col" style="width:24%" id="conflict">
                                                Member</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingType">
                                                Meeting Type</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingDate">
                                                Meeting Date</th>
                                            <th class="tablepadding" scope="col" style="width:20%" id="agendaItem">
                                                Agenda Item</th>
                                            <th class="tablepadding" scope="col" style="width:8%" class="no-sort" id="viewRegConflict"><span style="visibility: hidden; display:none;">Conflicts Icon</span>Conflict</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-legislation-list" role="region" aria-label="Legislation History" class="col-md-12">
                                <style type="text/css">
                                    #table-legislation-list th {
                                        text-align: left;
                                    }

                                    .LegislationHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .LegislationHeader .searchtable {
                                        position: relative;
                                    }

                                    .LegislationHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-legislation-list-no-longer-use" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="legislation-icon-th" aria-label="file icon" scope="col" style="width: 5%" class="no-sort"><span style="visibility: hidden">legislation icon</span></th>
                                            <th id="legislation-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="legislation-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Legislative Text
                                            </th>
                                            <th id="legislation-department-th" class="legWordWrap tablepadding" scope="col" style="width: 15%">
                                                Department
                                            </th>

                                            <th id="legislation-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="legislation-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="agendaitemhistory-list" role="region" aria-label="Agenda Item History" class="col-md-12">
                                <style type="text/css">
                                    #table-agendaitemhistory-list th {
                                        text-align: left;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .AgendaItemHistoryHeader .searchtable {
                                        position: relative;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-agendaitemhistory-list" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="agendaitemhistory-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="agendaitemhistory-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Title
                                            </th>
                                            <th id="agendaitemhistory-department-th" class="legWordWrap tablepadding" scope="col">
                                                Department
                                            </th>
                                            <th id="agendaitemhistory-meetingtype-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Type
                                            </th>
                                            <th id="agendaitemhistory-meetingdate-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Date
                                            </th>
                                            <th id="agendaitemhistory-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="agendaitemhistory-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-merged-list" class="col-md-12">
                                <div id="merged-list" class="table-responsive dataTable no-footer" style="width: 100%;">
                                    <div role="region" aria-label="List of Upcoming Meetings" class="upcoming-meetings">
                                        
                                                
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 05 July 2022' href='VideoStream.aspx?MeetingId=d52bdd86-1f73-4e14-ba7f-53c7a36aac76' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 20, 2022 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd52bdd86-1f73-4e14-ba7f-53c7a36aac76' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" href='Meeting.aspx?Id=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" href='Meeting.aspx?Id=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 05 July 2022' href='VideoStream.aspx?MeetingId=d52bdd86-1f73-4e14-ba7f-53c7a36aac76' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=75349' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Committee of Adjustment - Panel 3 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 20 July 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=75348' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 20 juillet 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 05 July 2022' href='VideoStream.aspx?MeetingId=f5465f2a-fcd6-4282-8139-0136409cf6ed' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 20, 2022 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df5465f2a-fcd6-4282-8139-0136409cf6ed' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" href='Meeting.aspx?Id=f5465f2a-fcd6-4282-8139-0136409cf6ed&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" href='Meeting.aspx?Id=f5465f2a-fcd6-4282-8139-0136409cf6ed&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f5465f2a-fcd6-4282-8139-0136409cf6ed&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 05 July 2022' href='VideoStream.aspx?MeetingId=f5465f2a-fcd6-4282-8139-0136409cf6ed' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=f5465f2a-fcd6-4282-8139-0136409cf6ed&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 20 July 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=89320' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=f5465f2a-fcd6-4282-8139-0136409cf6ed&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 20 juillet 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 05 July 2022' href='VideoStream.aspx?MeetingId=1656f1c6-ce4a-40f6-8421-955833ef6595' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 20, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1656f1c6-ce4a-40f6-8421-955833ef6595' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" href='Meeting.aspx?Id=1656f1c6-ce4a-40f6-8421-955833ef6595&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" href='Meeting.aspx?Id=1656f1c6-ce4a-40f6-8421-955833ef6595&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1656f1c6-ce4a-40f6-8421-955833ef6595&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 05 July 2022' href='VideoStream.aspx?MeetingId=1656f1c6-ce4a-40f6-8421-955833ef6595' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=75290' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Committee of Adjustment - Panel 2 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=1656f1c6-ce4a-40f6-8421-955833ef6595&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 20 July 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=75289' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=1656f1c6-ce4a-40f6-8421-955833ef6595&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 20 juillet 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 July 2022' href='VideoStream.aspx?MeetingId=28635548-80bb-4230-877d-1b2df0fa816b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 09, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D28635548-80bb-4230-877d-1b2df0fa816b' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" href='Meeting.aspx?Id=28635548-80bb-4230-877d-1b2df0fa816b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" href='Meeting.aspx?Id=28635548-80bb-4230-877d-1b2df0fa816b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=28635548-80bb-4230-877d-1b2df0fa816b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 July 2022' href='VideoStream.aspx?MeetingId=28635548-80bb-4230-877d-1b2df0fa816b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-4-64"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM'>Community and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 11 July 2022' href='VideoStream.aspx?MeetingId=667a3326-7d82-455d-a3d0-e2054d08c1be' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 18, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D667a3326-7d82-455d-a3d0-e2054d08c1be' aria-hidden='true' aria-label='Share Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" href='Meeting.aspx?Id=667a3326-7d82-455d-a3d0-e2054d08c1be&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" href='Meeting.aspx?Id=667a3326-7d82-455d-a3d0-e2054d08c1be&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=667a3326-7d82-455d-a3d0-e2054d08c1be&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 11 July 2022' href='VideoStream.aspx?MeetingId=667a3326-7d82-455d-a3d0-e2054d08c1be' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-63"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM'>Built Heritage Sub-Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=a22bd85e-5d2f-459f-9601-28d291e358b6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 23, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da22bd85e-5d2f-459f-9601-28d291e358b6' aria-hidden='true' aria-label='Share Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" href='Meeting.aspx?Id=a22bd85e-5d2f-459f-9601-28d291e358b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" href='Meeting.aspx?Id=a22bd85e-5d2f-459f-9601-28d291e358b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a22bd85e-5d2f-459f-9601-28d291e358b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=a22bd85e-5d2f-459f-9601-28d291e358b6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, August 25, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=352101d4-8aac-456a-acc6-7ede0771df38' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 25, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D352101d4-8aac-456a-acc6-7ede0771df38' aria-hidden='true' aria-label='Share Planning Committee Thursday, August 25, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, August 25, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" href='Meeting.aspx?Id=352101d4-8aac-456a-acc6-7ede0771df38&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" href='Meeting.aspx?Id=352101d4-8aac-456a-acc6-7ede0771df38&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, August 25, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=352101d4-8aac-456a-acc6-7ede0771df38&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=352101d4-8aac-456a-acc6-7ede0771df38' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM'>Ottawa City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=59a74d3a-4563-4269-9196-ab3bea684571' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 31, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D59a74d3a-4563-4269-9196-ab3bea684571' aria-hidden='true' aria-label='Share Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" href='Meeting.aspx?Id=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" href='Meeting.aspx?Id=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=59a74d3a-4563-4269-9196-ab3bea684571' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 13 July 2022' href='VideoStream.aspx?MeetingId=4f806962-c059-4605-b48c-751daee8bd85' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 01, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4f806962-c059-4605-b48c-751daee8bd85' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='Meeting.aspx?Id=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='Meeting.aspx?Id=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 13 July 2022' href='VideoStream.aspx?MeetingId=4f806962-c059-4605-b48c-751daee8bd85' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, September 08, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 08, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Deff4bac2-da9f-4dc7-8ad3-a9fecf3192c1' aria-hidden='true' aria-label='Share Planning Committee Thursday, September 08, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='Meeting.aspx?Id=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='Meeting.aspx?Id=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-63"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM'>Built Heritage Sub-Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=c4686e53-1c90-4603-b619-9a4cccfe26d5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 13, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc4686e53-1c90-4603-b619-9a4cccfe26d5' aria-hidden='true' aria-label='Share Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c4686e53-1c90-4603-b619-9a4cccfe26d5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c4686e53-1c90-4603-b619-9a4cccfe26d5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c4686e53-1c90-4603-b619-9a4cccfe26d5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=c4686e53-1c90-4603-b619-9a4cccfe26d5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=7810ff59-75b5-4788-ac72-26924fde542e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 13, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7810ff59-75b5-4788-ac72-26924fde542e' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=7810ff59-75b5-4788-ac72-26924fde542e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Transit Commission Wednesday, September 14, 2022 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 11 April 2022' href='VideoStream.aspx?MeetingId=b70b429d-2d3e-4caf-b4bc-39593ff1b222' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 14, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db70b429d-2d3e-4caf-b4bc-39593ff1b222' aria-hidden='true' aria-label='Share Transit Commission Wednesday, September 14, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='Meeting.aspx?Id=b70b429d-2d3e-4caf-b4bc-39593ff1b222&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='Meeting.aspx?Id=b70b429d-2d3e-4caf-b4bc-39593ff1b222&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b70b429d-2d3e-4caf-b4bc-39593ff1b222&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 11 April 2022' href='VideoStream.aspx?MeetingId=b70b429d-2d3e-4caf-b4bc-39593ff1b222' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-4-64"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM'>Community and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 11 July 2022' href='VideoStream.aspx?MeetingId=ca84d9b4-1046-45d4-8991-3fa60e8de947' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 15, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dca84d9b4-1046-45d4-8991-3fa60e8de947' aria-hidden='true' aria-label='Share Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='Meeting.aspx?Id=ca84d9b4-1046-45d4-8991-3fa60e8de947&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='Meeting.aspx?Id=ca84d9b4-1046-45d4-8991-3fa60e8de947&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ca84d9b4-1046-45d4-8991-3fa60e8de947&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 11 July 2022' href='VideoStream.aspx?MeetingId=ca84d9b4-1046-45d4-8991-3fa60e8de947' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Board of Health Monday, September 19, 2022 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 21 June 2022' href='VideoStream.aspx?MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 19, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8ec6c6bd-ee92-4763-b77e-c354f535e67d' aria-hidden='true' aria-label='Share Board of Health Monday, September 19, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='Meeting.aspx?Id=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='Meeting.aspx?Id=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 21 June 2022' href='VideoStream.aspx?MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-69"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM'>Standing Committee on Environmental Protection, Water and Waste Management</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Standing Committee on Environmental Protection, Water and Waste Management 15 June 2022' href='VideoStream.aspx?MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 20, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' aria-hidden='true' aria-label='Share Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='Meeting.aspx?Id=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='Meeting.aspx?Id=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Standing Committee on Environmental Protection, Water and Waste Management 15 June 2022' href='VideoStream.aspx?MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM'>Ottawa City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 21, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D74e2acb7-eaa9-4c2d-9c67-b03e1311e957' aria-hidden='true' aria-label='Share Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" href='Meeting.aspx?Id=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" href='Meeting.aspx?Id=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, September 22, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=c8420025-2d1e-40f2-b63c-a934c067f863' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 22, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc8420025-2d1e-40f2-b63c-a934c067f863' aria-hidden='true' aria-label='Share Planning Committee Thursday, September 22, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c8420025-2d1e-40f2-b63c-a934c067f863&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c8420025-2d1e-40f2-b63c-a934c067f863&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c8420025-2d1e-40f2-b63c-a934c067f863&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=c8420025-2d1e-40f2-b63c-a934c067f863' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-123"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM'>Arts, Culture and Recreation Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Arts, Culture and Recreation Advisory Committee 11 July 2022' href='VideoStream.aspx?MeetingId=14bbc851-dae9-403a-83d2-e154ff74036a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 27, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D14bbc851-dae9-403a-83d2-e154ff74036a' aria-hidden='true' aria-label='Share Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='Meeting.aspx?Id=14bbc851-dae9-403a-83d2-e154ff74036a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='Meeting.aspx?Id=14bbc851-dae9-403a-83d2-e154ff74036a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=14bbc851-dae9-403a-83d2-e154ff74036a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Arts, Culture and Recreation Advisory Committee 11 July 2022' href='VideoStream.aspx?MeetingId=14bbc851-dae9-403a-83d2-e154ff74036a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM'>Ottawa City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 05, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D68fadf4b-ed94-4cff-ba9f-3d6efaed5666' aria-hidden='true' aria-label='Share Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" href='Meeting.aspx?Id=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" href='Meeting.aspx?Id=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-63"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM'>Built Heritage Sub-Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 11, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D115babc3-5b80-4387-880c-8f15c68b4d28' aria-hidden='true' aria-label='Share Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='Meeting.aspx?Id=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='Meeting.aspx?Id=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 11, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df50e0a04-106d-4cdd-a952-8856f5c11894' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, October 27, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 27, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9a7f9fcb-ae12-4780-8af1-cc508f663001' aria-hidden='true' aria-label='Share Planning Committee Thursday, October 27, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 08, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df6b436fb-9943-452c-b2c3-60a12ded6901' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 13, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D62b62418-df38-42f6-ae9d-8bc3079ef9f1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                            
                                    </div>
                                </div>
                                
                                <div id="lazyLoadContainer">
                                    <span id="loadMoreMeetings" tabindex="0">Click here to see more meetings</span>
                                </div>

                                <div class="past-meetings-region" role="region" aria-label="List of Past Meetings">
                                    <div class="row">
                                    <div class="col-md-12 xtra-lists">
                                        <h2 id="PastMeetingTitle" class="pull-left">Past Meetings</h2>
                                        <div class ="pull-right" style="margin-bottom: 1.5em">
                                            <select class="YearFilterOption" aria-label="Select Year">
                                                
                                                        
                                                        <option data-year='0'>
                                                            All&nbsp;(2147)
                                                            
                                                        </option>
                                                    
                                                        <option data-year='2022'>
                                                            
                                                            2022&nbsp;(220)
                                                        </option>
                                                    
                                                        <option data-year='2021'>
                                                            
                                                            2021&nbsp;(261)
                                                        </option>
                                                    
                                                        <option data-year='2020'>
                                                            
                                                            2020&nbsp;(224)
                                                        </option>
                                                    
                                                        <option data-year='2019'>
                                                            
                                                            2019&nbsp;(255)
                                                        </option>
                                                    
                                                        <option data-year='2018'>
                                                            
                                                            2018&nbsp;(211)
                                                        </option>
                                                    
                                                        <option data-year='2017'>
                                                            
                                                            2017&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2016'>
                                                            
                                                            2016&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2015'>
                                                            
                                                            2015&nbsp;(167)
                                                        </option>
                                                    
                                                        <option data-year='2014'>
                                                            
                                                            2014&nbsp;(122)
                                                        </option>
                                                    
                                                        <option data-year='2013'>
                                                            
                                                            2013&nbsp;(158)
                                                        </option>
                                                    
                                                        <option data-year='2012'>
                                                            
                                                            2012&nbsp;(69)
                                                        </option>
                                                    
                                                    
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="past-meetings" id="PastMeetingTypesAccordian">
                                    
                                            
                                            <div class="MeetingTypeList" id='MeetingTypeList0'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Accessibility+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse0">
                                                    <span class="MeetingTypeNameText">Accessibility Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>52</span><span class='Year Year2013'>5</span><span class='Year Year2014'>5</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>7</span><span class='Year Year2021'>7</span><span class='Year Year2022'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse0" aria-labelledby="MeetingTypeList0" data-toggle-id=".collapse0">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Accessibility Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList1'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse1">
                                                    <span class="MeetingTypeNameText">Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>101</span><span class='Year Year2012'>6</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>11</span><span class='Year Year2016'>10</span><span class='Year Year2017'>9</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>9</span><span class='Year Year2021'>9</span><span class='Year Year2022'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse1" aria-labelledby="MeetingTypeList1" data-toggle-id=".collapse1">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList2'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse2">
                                                    <span class="MeetingTypeNameText">Arts, Culture and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>14</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>3</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse2" aria-labelledby="MeetingTypeList2" data-toggle-id=".collapse2">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList3'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture%2c+Heritage+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse3">
                                                    <span class="MeetingTypeNameText">Arts, Culture, Heritage and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>19</span><span class='Year Year2013'>4</span><span class='Year Year2014'>1</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse3" aria-labelledby="MeetingTypeList3" data-toggle-id=".collapse3">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture, Heritage and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList4'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse4">
                                                    <span class="MeetingTypeNameText">Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2015'>6</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>6</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse4" aria-labelledby="MeetingTypeList4" data-toggle-id=".collapse4">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList5'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse5">
                                                    <span class="MeetingTypeNameText">Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>6</span><span class='Year Year2012'>2</span><span class='Year Year2013'>2</span><span class='Year Year2014'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse5" aria-labelledby="MeetingTypeList5" data-toggle-id=".collapse5">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList6'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Auditor+General+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse6">
                                                    <span class="MeetingTypeNameText">Auditor General Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2013'>3</span><span class='Year Year2020'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse6" aria-labelledby="MeetingTypeList6" data-toggle-id=".collapse6">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Auditor General Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList7'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse7">
                                                    <span class="MeetingTypeNameText">Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse7" aria-labelledby="MeetingTypeList7" data-toggle-id=".collapse7">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList8'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse8">
                                                    <span class="MeetingTypeNameText">Built Heritage Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>95</span><span class='Year Year2013'>10</span><span class='Year Year2014'>9</span><span class='Year Year2015'>9</span><span class='Year Year2016'>8</span><span class='Year Year2017'>8</span><span class='Year Year2018'>10</span><span class='Year Year2019'>9</span><span class='Year Year2020'>9</span><span class='Year Year2021'>12</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse8" aria-labelledby="MeetingTypeList8" data-toggle-id=".collapse8">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList9'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse9">
                                                    <span class="MeetingTypeNameText">City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>205</span><span class='Year Year2012'>11</span><span class='Year Year2013'>20</span><span class='Year Year2014'>18</span><span class='Year Year2015'>21</span><span class='Year Year2016'>20</span><span class='Year Year2017'>19</span><span class='Year Year2018'>19</span><span class='Year Year2019'>21</span><span class='Year Year2020'>21</span><span class='Year Year2021'>21</span><span class='Year Year2022'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse9" aria-labelledby="MeetingTypeList9" data-toggle-id=".collapse9">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList10'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+1" id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse10">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 1&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>145</span><span class='Year Year2016'>22</span><span class='Year Year2017'>23</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>16</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse10" aria-labelledby="MeetingTypeList10" data-toggle-id=".collapse10">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 1">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList11'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+2" id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse11">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 2&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>144</span><span class='Year Year2015'>1</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse11" aria-labelledby="MeetingTypeList11" data-toggle-id=".collapse11">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 2">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList12'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+3" id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse12">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 3&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>142</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>21</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse12" aria-labelledby="MeetingTypeList12" data-toggle-id=".collapse12">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 3">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList13'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse13">
                                                    <span class="MeetingTypeNameText">Committee of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2013'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse13" aria-labelledby="MeetingTypeList13" data-toggle-id=".collapse13">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList14'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse14">
                                                    <span class="MeetingTypeNameText">Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>88</span><span class='Year Year2012'>4</span><span class='Year Year2013'>11</span><span class='Year Year2014'>6</span><span class='Year Year2015'>9</span><span class='Year Year2016'>11</span><span class='Year Year2017'>9</span><span class='Year Year2018'>7</span><span class='Year Year2019'>9</span><span class='Year Year2020'>6</span><span class='Year Year2021'>8</span><span class='Year Year2022'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse14" aria-labelledby="MeetingTypeList14" data-toggle-id=".collapse14">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList15'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Service+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse15">
                                                    <span class="MeetingTypeNameText">Community Service Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2013'>4</span><span class='Year Year2014'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse15" aria-labelledby="MeetingTypeList15" data-toggle-id=".collapse15">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Service Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList16'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Council+Francophone+Caucus" id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse16">
                                                    <span class="MeetingTypeNameText">Council Francophone Caucus&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse16" aria-labelledby="MeetingTypeList16" data-toggle-id=".collapse16">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Council Francophone Caucus">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList17'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Court+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse17">
                                                    <span class="MeetingTypeNameText">Court of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2012'>1</span><span class='Year Year2013'>6</span><span class='Year Year2018'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse17" aria-labelledby="MeetingTypeList17" data-toggle-id=".collapse17">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Court of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList18'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Debenture+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse18">
                                                    <span class="MeetingTypeNameText">Debenture Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2012'>1</span><span class='Year Year2013'>2</span><span class='Year Year2021'>1</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse18" aria-labelledby="MeetingTypeList18" data-toggle-id=".collapse18">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Debenture Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList19'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Election+Compliance+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse19">
                                                    <span class="MeetingTypeNameText">Election Compliance Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>14</span><span class='Year Year2015'>5</span><span class='Year Year2016'>1</span><span class='Year Year2019'>7</span><span class='Year Year2020'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse19" aria-labelledby="MeetingTypeList19" data-toggle-id=".collapse19">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Election Compliance Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList20'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Protection+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse20">
                                                    <span class="MeetingTypeNameText">Environment and Climate Protection Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>12</span><span class='Year Year2017'>6</span><span class='Year Year2018'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse20" aria-labelledby="MeetingTypeList20" data-toggle-id=".collapse20">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Protection Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList21'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse21">
                                                    <span class="MeetingTypeNameText">Environment Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2012'>4</span><span class='Year Year2013'>7</span><span class='Year Year2014'>6</span><span class='Year Year2015'>6</span><span class='Year Year2016'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse21" aria-labelledby="MeetingTypeList21" data-toggle-id=".collapse21">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList22'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environmental+Stewardship+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse22">
                                                    <span class="MeetingTypeNameText">Environmental Stewardship Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>3</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse22" aria-labelledby="MeetingTypeList22" data-toggle-id=".collapse22">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environmental Stewardship Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList23'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Economic+Development+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse23">
                                                    <span class="MeetingTypeNameText">Finance and Economic Development Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>115</span><span class='Year Year2012'>6</span><span class='Year Year2013'>12</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>13</span><span class='Year Year2017'>10</span><span class='Year Year2018'>8</span><span class='Year Year2019'>11</span><span class='Year Year2020'>9</span><span class='Year Year2021'>14</span><span class='Year Year2022'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse23" aria-labelledby="MeetingTypeList23" data-toggle-id=".collapse23">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Economic Development Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList24'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse24">
                                                    <span class="MeetingTypeNameText">French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>34</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>3</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse24" aria-labelledby="MeetingTypeList24" data-toggle-id=".collapse24">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList25'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Information+Technology+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse25">
                                                    <span class="MeetingTypeNameText">Information Technology Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2012'>4</span><span class='Year Year2013'>5</span><span class='Year Year2014'>3</span><span class='Year Year2015'>4</span><span class='Year Year2016'>2</span><span class='Year Year2017'>2</span><span class='Year Year2018'>1</span><span class='Year Year2019'>4</span><span class='Year Year2020'>2</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse25" aria-labelledby="MeetingTypeList25" data-toggle-id=".collapse25">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Information Technology Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList26'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Environment%2c+Water+and+Waste+Management+and+Agriculture+and+Rural+Affairs" id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse26">
                                                    <span class="MeetingTypeNameText">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse26" aria-labelledby="MeetingTypeList26" data-toggle-id=".collapse26">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Environment, Water and Waste Management and Agriculture and Rural Affairs">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList27'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse27">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2014'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse27" aria-labelledby="MeetingTypeList27" data-toggle-id=".collapse27">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList28'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Governance+Renewal+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse28">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2012'>2</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse28" aria-labelledby="MeetingTypeList28" data-toggle-id=".collapse28">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList29'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+-+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse29">
                                                    <span class="MeetingTypeNameText">Joint meeting - Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse29" aria-labelledby="MeetingTypeList29" data-toggle-id=".collapse29">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting - Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList30'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Finance+and+Economic+Development+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse30">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse30" aria-labelledby="MeetingTypeList30" data-toggle-id=".collapse30">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList31'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Planning+Committee+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse31">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>1</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse31" aria-labelledby="MeetingTypeList31" data-toggle-id=".collapse31">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList32'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+of+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse32">
                                                    <span class="MeetingTypeNameText">Joint meeting of Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse32" aria-labelledby="MeetingTypeList32" data-toggle-id=".collapse32">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting of Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList33'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Accessibility+Advisory+Committee+and+the+French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse33">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse33" aria-labelledby="MeetingTypeList33" data-toggle-id=".collapse33">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList34'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Finance+and+Economic+Development+Committee+and+the+Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse34">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2020'>2</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse34" aria-labelledby="MeetingTypeList34" data-toggle-id=".collapse34">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList35'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Planning+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse35">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Planning Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse35" aria-labelledby="MeetingTypeList35" data-toggle-id=".collapse35">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Planning Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList36'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse36">
                                                    <span class="MeetingTypeNameText">Joint Planning and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse36" aria-labelledby="MeetingTypeList36" data-toggle-id=".collapse36">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList37'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transportation+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse37">
                                                    <span class="MeetingTypeNameText">Joint Transportation Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse37" aria-labelledby="MeetingTypeList37" data-toggle-id=".collapse37">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transportation Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList38'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse38">
                                                    <span class="MeetingTypeNameText">Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2014'>1</span><span class='Year Year2018'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse38" aria-labelledby="MeetingTypeList38" data-toggle-id=".collapse38">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList39'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse39">
                                                    <span class="MeetingTypeNameText">Ottawa Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>51</span><span class='Year Year2015'>7</span><span class='Year Year2016'>6</span><span class='Year Year2017'>7</span><span class='Year Year2018'>7</span><span class='Year Year2019'>7</span><span class='Year Year2020'>6</span><span class='Year Year2021'>6</span><span class='Year Year2022'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse39" aria-labelledby="MeetingTypeList39" data-toggle-id=".collapse39">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList40'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Built+Heritage+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse40">
                                                    <span class="MeetingTypeNameText">Ottawa Built Heritage Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2012'>6</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse40" aria-labelledby="MeetingTypeList40" data-toggle-id=".collapse40">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Built Heritage Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList41'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse41">
                                                    <span class="MeetingTypeNameText">Ottawa City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2022'>7</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse41" aria-labelledby="MeetingTypeList41" data-toggle-id=".collapse41">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList42'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse42">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>105</span><span class='Year Year2015'>12</span><span class='Year Year2016'>12</span><span class='Year Year2017'>14</span><span class='Year Year2018'>11</span><span class='Year Year2019'>15</span><span class='Year Year2020'>15</span><span class='Year Year2021'>12</span><span class='Year Year2022'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse42" aria-labelledby="MeetingTypeList42" data-toggle-id=".collapse42">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList43'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Public+Library+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse43">
                                                    <span class="MeetingTypeNameText">Ottawa Public Library Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>90</span><span class='Year Year2014'>11</span><span class='Year Year2015'>11</span><span class='Year Year2016'>12</span><span class='Year Year2017'>10</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>10</span><span class='Year Year2021'>10</span><span class='Year Year2022'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse43" aria-labelledby="MeetingTypeList43" data-toggle-id=".collapse43">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Public Library Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList44'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse44">
                                                    <span class="MeetingTypeNameText">Planning Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2019'>2</span><span class='Year Year2020'>2</span><span class='Year Year2021'>3</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse44" aria-labelledby="MeetingTypeList44" data-toggle-id=".collapse44">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList45'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse45">
                                                    <span class="MeetingTypeNameText">Planning Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>204</span><span class='Year Year2012'>10</span><span class='Year Year2013'>20</span><span class='Year Year2014'>17</span><span class='Year Year2015'>19</span><span class='Year Year2016'>18</span><span class='Year Year2017'>20</span><span class='Year Year2018'>16</span><span class='Year Year2019'>18</span><span class='Year Year2020'>15</span><span class='Year Year2021'>26</span><span class='Year Year2022'>25</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse45" aria-labelledby="MeetingTypeList45" data-toggle-id=".collapse45">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList46'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Complaints+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse46">
                                                    <span class="MeetingTypeNameText">Police Services Board Complaints Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2017'>1</span><span class='Year Year2018'>1</span><span class='Year Year2019'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse46" aria-labelledby="MeetingTypeList46" data-toggle-id=".collapse46">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Complaints Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList47'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Finance+and+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse47">
                                                    <span class="MeetingTypeNameText">Police Services Board Finance and Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>28</span><span class='Year Year2016'>3</span><span class='Year Year2017'>5</span><span class='Year Year2018'>3</span><span class='Year Year2019'>7</span><span class='Year Year2020'>5</span><span class='Year Year2021'>4</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse47" aria-labelledby="MeetingTypeList47" data-toggle-id=".collapse47">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Finance and Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList48'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Human+Resources+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse48">
                                                    <span class="MeetingTypeNameText">Police Services Board Human Resources Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>23</span><span class='Year Year2016'>3</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>4</span><span class='Year Year2021'>1</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse48" aria-labelledby="MeetingTypeList48" data-toggle-id=".collapse48">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Human Resources Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList49'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Policy+and+Governance+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse49">
                                                    <span class="MeetingTypeNameText">Police Services Board Policy and Governance Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>16</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>3</span><span class='Year Year2021'>1</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse49" aria-labelledby="MeetingTypeList49" data-toggle-id=".collapse49">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Policy and Governance Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList50'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Standing+Committee+on+Environmental+Protection%2c+Water+and+Waste+Management" id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse50">
                                                    <span class="MeetingTypeNameText">Standing Committee on Environmental Protection, Water and Waste Management&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2019'>8</span><span class='Year Year2020'>5</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse50" aria-labelledby="MeetingTypeList50" data-toggle-id=".collapse50">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Standing Committee on Environmental Protection, Water and Waste Management">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList51'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse51">
                                                    <span class="MeetingTypeNameText">Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>98</span><span class='Year Year2012'>7</span><span class='Year Year2013'>13</span><span class='Year Year2014'>7</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>6</span><span class='Year Year2018'>5</span><span class='Year Year2019'>9</span><span class='Year Year2020'>11</span><span class='Year Year2021'>11</span><span class='Year Year2022'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse51" aria-labelledby="MeetingTypeList51" data-toggle-id=".collapse51">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList52'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transportation+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse52">
                                                    <span class="MeetingTypeNameText">Transportation Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>93</span><span class='Year Year2012'>5</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>10</span><span class='Year Year2018'>5</span><span class='Year Year2019'>8</span><span class='Year Year2020'>7</span><span class='Year Year2021'>10</span><span class='Year Year2022'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse52" aria-labelledby="MeetingTypeList52" data-toggle-id=".collapse52">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transportation Committee">

</div>
                                                </div>
                                            </div>
                                        
                                        
                                </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="fullCalModal" aria-hidden="true" aria-label="meeting details popup" role="dialog" class="modal fade">
        <div class="modal-dialog">
              <div class="modal-content">
                <div id="modelHeader" class="modal-header">
                    <button id="closeCalModal" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close meeting details</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="row calendar-row">
                        <div class="calendar-details">
                            <div class="col-md-6 cal-date-loc">
                                <span id="startDate" class="start-date meeting-date"></span>
                                <div id="desc" class="desc-text" style="word-break:break-word;"></div>
                            </div>
                            <div class="calendar-icons">
                                <span id="shareContainer" class="sharing">
                                    <a title="Share" id="shareLink" data-dismiss="modal">
                                        
                                        <img id="ctl00_MainContent_Image3" class="imgicon" alt="Share" title="Share" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />

                                    </a>
                                </span>
                                <a id="commentLink" title="Open for Comments" target="_blank" style="color:#454545;">
                                    
                                    <img id="ctl00_MainContent_Image6" class="imgicon" alt="Open for Comments" title="Open for Comments" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                </a>
                                <a class="RTSAcitve link" title="Request to Speak" target="_blank" style="display: none;">
                                    
                                    <img id="ctl00_MainContent_Image9" class="imgicon" alt="Request to Speak" title="Request to Speak" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                </a>                          
                                <a id="delegationRequestLink" title="Delegation Request" target="_blank">
                                    
                                    <img id="ctl00_MainContent_imgDelegation3" class="imgicon" alt="Delegation Request" title="Delegation Request" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                </a>
                                <!--<a id="eventLink" class="btn btn-primary" target="_blank"><span class="la la-info-circle"></span>&nbsp;View Meetings</a>-->
                            </div>
                            <div id="video-link"></div>
                        </div>
                        <div class="col-md-6" id="MeetingDocuments" aria-label="Meeting documents"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="conflictsDetailsModal" aria-hidden="true" role="dialog" aria-label="Member in Conflict" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id="modelHeaderconflicts" class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <table id="table-conflicts-details-list" class="table-responsive" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word; border: 0;">
                    <thead>
                        <tr role="row" style="display: none;">
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="LegislationDetailsModal" aria-hidden="true" role="dialog" aria-label="Legislative History" class="modal fade">
        <div class="modal-dialog  LegislationDetailsModal" style="width: 60%">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Details</h2>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <div class="modal-body">
                    <div>
                        <table class="inputtable" style="width: 100%;">
                            <tr>
                                <th>Number</th>
                                <td class="LegislationNumberLabel"></td>
                            </tr>
                            <tr>
                                <th>Type</th>
                                <td id="LegislationTypeLabel">Legislation</td>
                            </tr>
                            <tr>
                                <th>Stage</th>
                                <td class="LegislationStageLabel"></td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td class="LegislationStatusLabel"></td>
                            </tr>
                            <tr>
                                <th>Department</th>
                                <td id="LegislationDepartmentLabel"></td>
                            </tr>
                            <tr>
                                <th>Legislative Text</th>
                                <td id="LegislationRecommendationLabel"></td>
                            </tr>
                            <tr>
                                <th style="vertical-align: top">Attachments</th>
                                <td>
                                    <div>
                                        <span id="LegislationDocumentIcon"></span>
                                        <a id="LegislationDocumentLink"></a>
                                    </div>
                                    <div id="LegislationSupportingDocumentsList">
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <h3>History</h3>
                    <div>
                        <table id="LegislationHistoryTable" class="list dataTable">
                            <thead>
                                <tr>
                                    <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                    <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                    <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                    <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                    <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                </tr>
                            </thead>
                            <tbody class="history"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('', $(this).attr("itemid"));
        });
    });
</script>



    <!-- Bootstrap Modal -->
    <div id='bootstrapModal' class='modal fade in' role="dialog" aria-hidden="true" style='display: none;'>
        <div class='modal-dialog modal-dialog-scrollable'>
            <div class='modal-content'>
                <div class='modal-header'>
                    <h2 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h2>
                    <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close share meeting popup</span></button>
                </div>
                <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                    <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                        <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                    </div>
                </div>
                <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0;'>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" style="display:none;" form="aspnetForm" value="Submit">Submit</button>
    </main>
    
    </div>

    <!--<script type='text/javascript' src='Scripts\fullcalendar\lib\main.js'></script>-->
    
    <script>
       
        var mincount = 20;
        var maxcount = 40;
        //comment out fake lazy loading code
        //$(".meetingDetails").slice(40).hide();

        // IsListView.ClientId values //
        var View = {
            set Current(id) {
                $('#ctl00_MainContent_IsListView').val(id);
            },
            get Current() {
                return $('#ctl00_MainContent_IsListView').val();
            }
        }

        var Views = {
            "Calendar" : "0",
            "List" : "1",
            "Conflicts" : "2",
            "Merged" : "3",
            "Legislation" : "4",
            "AgendaItemHistory" : "5"
        }

        function iframeLoaded(iframeHeight) {
            var windowHeight = $(window).height();

            if (iframeHeight > windowHeight) {
                var newHeight = (windowHeight - 185) + "px";
                $('#modalIframeDiv').height(newHeight);
            }
            else {
                var newHeight = iframeHeight + "px";
                $('#modalIframeDiv').height(newHeight);
            }
        }

        $(window).scroll(function () {
            stickyHeader();
            if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                if ($('#btnListView').hasClass("fc-state-active")) {
                    var btnShowMoreId = 'ctl00_MainContent_btnShowMore';
                    document.getElementById(btnShowMoreId).click();
                    //comment out fake lazy loading code
                    //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                    //mincount = mincount + 20;
                    //maxcount = maxcount + 20;
                }
            }
        });
        $(window).resize(function () {
            var parentwidth = $(".parent").width();
            $(".child").width(parentwidth);
        });

        var cachedMeetingsByType = {};
        var SelectedYear = 0;
        var text = {
            View: 'View',
            Cancelled: 'Meeting Cancelled'
        };

        $('.skip-to-content-link').click(function(event){
            event.preventDefault();
            document.location = window.location.href + "#maincontent";
            let getID = window.location.href;
            history.pushState(null, null, getID.replace('#maincontent', ''));
        });

        function SelectYearOption () {
            var optionSelected = $("option:selected", this);
            //console.log(optionSelected[0].getAttribute("data-year"));
            if(optionSelected.length > 0){
                var SelectedYearItem = optionSelected[0].getAttribute("data-year");
                SelectedYear = SelectedYearItem;
            } else {
                $("option[data-year=" + SelectedYear + "]").prop("selected", true);
            }
            
            var emptyYear = true;
            $.each($(".MeetingTypeList"), function (i, v) {
                emptyYear = ($(this).find(".Year" + SelectedYear).text() != '0' ? false : emptyYear);
                if(!emptyYear){ return false; }
            });

            if (emptyYear){
                SelectedYear = "0";
            }

            $(".Year, .Year0").hide();

            $(".Year" + SelectedYear).show();
            /*
            if (SelectedYearItem == null || SelectedYearItem.length == 0) {
                $(".SelectedYear").html(SelectedYear + "&nbsp;(0)");
            }
            else {
                $(".SelectedYear").html(SelectedYearItem.text());
            }*/

            $.each($(".MeetingTypeList"), function (i, v) {
                var mt = $(this);
                var head = mt.find(".Year" + SelectedYear);

                if (head == null || head.length == 0 || head.text() == "0") {
                    mt.hide();                    
                }
                else {
                    mt.show();                    
                }
            });

            var url = window.location.href;
            if (SelectedYear == null || SelectedYear == 0) {
                url = UpdateQuery("Year", '');
            }
            else {
                url = UpdateQuery("Year", SelectedYear);
            }

            if (window.location.href != url) {
                window.history.pushState('', '', url);
            }
            $("#YearFilterList").hide();
        }

        $(".YearFilterOption").on('change', SelectYearOption);
        $('#PastMeetingTypesAccordian').on('hidden.bs.collapse', function () {
            Size_Changed();
            $('#PastMeetingTypesAccordian .collapse.show').removeClass("show");
        });

        $('#PastMeetingTypesAccordian').on('shown.bs.collapse', function (e) {
            Size_Changed();
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            window.history.pushState('', '', UpdateQuery('Expanded', mt));
        });

        $('#PastMeetingTypesAccordian').on('show.bs.collapse', function (e) {
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            LoadMeetingType(mt, true);
            $("#PastMeetingTypesAccordian .collapse.in").collapse("hide");
        });

        $('#PastMeetingTypesAccordian').on('hide.bs.collapse', function (e) {
            window.history.pushState('', '', UpdateQuery('Expanded', ''));
        });

        $(".PastMeetingTypesName").click(function (e) {
            e.preventDefault();
        });

        $("[data-toggle-id]").on("shown.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.removeClass("collapsed");
        });

        $("[data-toggle-id]").on("hidden.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.addClass("collapsed");
        });

        function ShowDownIcon()
        {
            $("#RightIcon").hide();
            $("#DownIcon").show();

        }

        function ShowRightIcon()
        {
            $("#RightIcon").show();
            $("#DownIcon").hide();
            $("#DownIcon").css("display", block);
        }


        function LoadMeetingType(mt, render, cb) {
            //$('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var container = $("[MeetingType='" + mt.replace(/'/g, '\\\'') + "']");

            if (!container.hasClass("Loaded") && !container.hasClass("Loading")) {
                container.addClass("Loading");

                $.ajax({
                    type: "POST",
                    url: "MeetingsCalendarView.aspx/PastMeetings" + window.location.search,
                    data: "{type: '" + mt.replace(/'/g, '\\\'') + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        cachedMeetingsByType[mt] = GetMergedMeetings(msg.d, container);
                        if (render) {
                            container.append(cachedMeetingsByType[mt]);
                            lazyLoadAttachments();
                            shortenLinkNames();
                            container.addClass("Rendered");
                            SelectYearOption();
                        }

                        container.addClass("Loaded");
                        container.removeClass("Loading");
                        LoadingOverlay.Hide(container.parent());

                        if (cb) {
                            cb();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
            else if (render && !container.hasClass("Rendered")) {
                container.append(cachedMeetingsByType[mt]);
                container.addClass("Rendered");
                SelectYearOption();
            }
            else {
                if (cb) {
                    window.setTimeout(cb, 100);
                }
            }
            //$('#ctl00_MainContent_MeetingListUpdateProgress').hide();
        }
        $(window).on("resize", function () {Size_Changed(); })

        function UpdateQuery(parameter, value) {
            var loc = window.location.search;

            if (loc.length == 0) {
                if (value != null && value.toString().length > 0) {
                    return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                }
            }
            else {
                var found = false;
                if (loc[0] == '?') {
                    loc = loc.substring(1);
                }

                var params = loc.split('&');

                for (var i = 0; i < params.length; i++) {
                    if (params[i].startsWith(parameter + '=')) {
                        found = true;

                        if (value != null && value.toString().length > 0) {
                            params[i] = parameter + '=' + encodeURIComponent(value);
                        }
                        else {
                            params[i] = '';
                        }
                    }
                }

                if (found == false && value != null && value.toString().length > 0) {
                    params.push(parameter + '=' + value);
                }

                var qs = '';
                for (var i = 0; i < params.length; i++) {
                    if (params[i].length > 0) {
                        if (qs.length == 0) {
                            qs = "?" + params[i];
                        }
                        else {
                            qs += "&" + params[i];
                        }
                    }
                }
                return window.location.href.replace("?" + loc, qs);
            }
            return window.location.href;
        }

        SelectYearOption();

        var LoadingOverlay = {
            Show: function (Element) {
                var LoadingDiv = $("<div/>").addClass("LoadingDivOverlay");
                var LoadingDivImage = $("<img src='_layouts/images/gears_anv4.gif'/>").addClass("LoadingDivImage");

                $(Element).append(LoadingDiv, LoadingDivImage);
            },
            Hide: function (Element) {
                $(Element).find(".LoadingDivOverlay, .LoadingDivImage").remove();
            }
        };

        function LoadMeetingTypes(containers) {
            if (containers.length > 0) {
                var mt = $(containers.shift()).attr("MeetingType");
                LoadMeetingType(mt, false, function () { LoadMeetingTypes(containers); });
            }
        }

        //var mts = $.makeArray($("[MeetingType]"));
        //LoadMeetingTypes(mts);

        function stickyHeader() {
            var sticky = $(".child")[0].offsetTop;
            if (window.pageYOffset > sticky) {
                var parentwidth = $(".parent").width();
                $(".child").width(parentwidth);
                $(".child").addClass("fixed");
            } else {
                $(".child").removeClass("fixed");
                $(".child").removeAttr("style");
            }
        }

        $('.has-clear input[type="text"]').on('input propertychange', function () {
            var $this = $(this);
            var visible = Boolean($this.val());
            $this.siblings('.form-control-clear').toggleClass('hidden', !visible);
        }).trigger('propertychange');

        $('.form-control-clear').click(function () {
            $(this).siblings('input[type="text"]').val('')
              .trigger('propertychange').focus();
            $('#table-conflicts-list').DataTable().search($(this).val()).draw();
        });
        
        $('.control-clear').click(function () {
            if ($(this).siblings('input[type="text"]')[0].id == 'ctl00_MainContent_FilterByDate') {
                $("#ctl00_MainContent_IsDateFilter").val("0");
            }
            if ($(this).siblings('input[type="text"]').val() != "") {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            }
            $(this).siblings('input[type="text"]').val('');
        });

        function ResetFilters() {
            deleteCookie("FilterDate");
            deleteCookie("MeetingTypeFilter");
            deleteCookie("Keyword");
            deleteCookie("ConflictMember");
            deleteCookie("ItemHistoryStage");
            deleteCookie("ItemHistoryStatus");
            deleteCookie("ItemHistoryDepartments");
            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var url = "";
            if (!location.search || location.search.length <= 0){
                url = "?";
            } else {
                url = location.search;
            }
            window.open(url,'_self');
        }
        function ChangeFilterFlag() {
            $("#ctl00_MainContent_IsChangeFilter").val("1");
        }
        function ApplyFilterChanges() {
            var selectedTab = getCookie('CurrentTab');

            if ($('#ctl00_MainContent_txtSearch').val() != "" && View.Current != "2") {
                $("#btnFilterResults").click();
            }
            else if (selectedTab == "conflict") {
                $("#btnFunnelFilterResults").click();
            }
            else if (selectedTab == 'agendaItemHistory') {
                loadAgendaItemHistoryData(true);
            }
            else {
                document.getElementById('FilterResults').click();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            lazyLoadAttachments();
            shortenLinkNames();
        }
    </script>

    <script type="text/javascript">       
        function postbackButtonClick() { 
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            
            
            if (getCookie('CurrentTab') == 'calendar') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'list') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnListView").addClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").show();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'mergedlist') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'past') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'conflict') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();

                loadConflictData(true);
            }
            else if (getCookie('CurrentTab') == 'legislation') {
                NavigationTab_Click($("#btnLegislationView"));
            }
            else if (getCookie('CurrentTab') == 'agendaItemHistory') {
                NavigationTab_Click($("#AgendaItemHistoryViewButton"));
            }

            $("#ctl00_MainContent_IsChangeFilter").val("0");

            $("#btnListView").addClass("fc-state-active");
            $("#btnMergedListView").removeClass("fc-state-active");
            $("#btnPastView").removeClass("fc-state-active");
            $("#btnCalendarView").removeClass("fc-state-active");

            lazyLoadAttachments();
            shortenLinkNames();

            return true;
        }

        function postbackTabClick(View) {

            $(".fc-toolbar-chunk > .fc-button, #btnListView, #btnCalendarView, #btnConflictsView, #btnLegislationView, #btnMergedListView, #AgendaItemHistoryViewButton, #btnPastView")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-merged-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();
            $("#searchresults").hide();
            
            $("#mergedListHeader").hide();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#pastHeader").hide();

            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            
            $("#btnFilter").show();
            deleteCookie("MeetingTypeFilter");

            if (View == Views.Calendar) {                          
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");
            }
            else if (View == Views.List) {
                $("#cal-list").show();
                $("#all-list").show();
                $("#mergedListHeader").show();
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");

            }
            else if (View == Views.Conflicts) {
                $("#cal-list").show();
                $("#all-conflicts-list").show();
                $("#FilterByConflictMember").show();
                $("#FilterByKeyword").show();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnConflictsView").attr("aria-pressed", "true");
            }
            else if (View == Views.Legislation) {
                $("#cal-list").show();
                $("#btnFilter").hide();
                $("#all-legislation-list").show();
                $("#btnLegislationView").addClass("fc-state-active");
                $("#btnLegislationView").attr("aria-pressed", "true");
                $(".LegislationHeader").show();
            }
            else if(View == Views.AgendaItemHistory) {
                $("#cal-list").show();
                $("#agendaitemhistory-list").show();
                $("#AgendaItemHistoryViewButton").addClass("fc-state-active");
                $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                $(".AgendaItemHistoryHeader").show();
                $("#FilterByStatus").show();
                $("#FilterByStage").show();
                $("#FilterByDepartment").show();
            }
            else if (View == Views.Merged) {
                $("#cal-list").show();
                $("#all-list").show();
                
                $("#all-merged-list").show();
                $("#merged-list").show();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnMergedListView").attr("aria-pressed", "true");
                $("#mergedListHeader").show();
                $("#PastMeetingTitle").show();
            }
            else if (View == Views.Past) {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").show();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#btnPastView").attr("aria-pressed", "true");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }

            if (View == Views.List || Views.Merged || Views.Past){
                $("#btnFilter").show();
                $("#FilterByKeyword").hide();
                $("#FilterByConflictMember").hide();

                var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
                var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();

                if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByDate != null && filterByDate !== "")){
                    $("#btnFilter").append("<span class='dot'></span>");
                } else {
                    $(".dot").remove();
                }
            }

        $("#ctl00_MainContent_IsChangeFilter").val("0");

        shortenLinkNames();
        return true;
    }
        
    function searchEnter(event) {
        if (event.keyCode === 13 && $('#ctl00_MainContent_txtSearch').val() != '') {
                event.preventDefault();
                searchData();
                return true;
            }
            else
                return event.keyCode != 13;
        }

    function setCookie(cname, cvalue) {
        document.cookie = cname + "=" + cvalue + ";SameSite=None; Secure";
    }

    function setLongCookie(cname, cvalue) {
        var d = new Date();
        d.setTime(d.getTime() + (3600 * 1000 * 24 * 365 * 10));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=None; Secure";
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function deleteCookie(name) {
        document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {   
            // If no cookie for CurrentTab, set it to DefaultTab. If DefaultTab is not available, then default tab will be calendar
            var cookie = getCookie('CurrentTab').trim().toLowerCase();

            if (cookie == "") {
                var defaultTab = 'mergedlist';
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);

                if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                    cookie = defaultTab.toLowerCase();
                } else {
                    cookie = urlParams.get("CurrentTab");
                }

                setCookie('CurrentTab', defaultTab);
                
            }

            switch(cookie) {
                case "list":
                    postbackTabClick(Views.List);
                    break;
                case "conflict":
                    loadConflictData(true);
                    postbackTabClick(Views.Conflicts);
                    break;
                case "legislation":
                    loadLegislationData(false);
                    postbackTabClick(Views.Legislation);

                    // legislation filter field //
                    $(".LegislationLibrarySearchField input").keyup(function () {
                        if (Legislation.DataTable != null) {
                            Legislation.DataTable.search($(".LegislationLibrarySearchField input").val()).draw();
                        }
                    });
                    break;
                case "agendaitemhistory":
                    loadAgendaItemHistoryData(false);
                    postbackTabClick(Views.AgendaItemHistory);

                    // agenda item history filter field //
                    $(".AgendaItemHistorySearchField input").keyup(function () {
                        if (AgendaItemHistory.DataTable != null) {
                            AgendaItemHistory.DataTable.search($(".AgendaItemHistorySearchField input").val()).draw();
                        }
                    });
                    break;
                case "mergedlist":
                    postbackTabClick(Views.Merged);
                    break;
                case "past":
                    postbackTabClick(Views.Past);
                    break;
                case "calendar":
                default:
                    // calendar view, default
                    loadCalendarMeetings();
                    break;
            }
            
            Size_Changed();

            if(getCookie('CurrentTab').trim().toLowerCase() == "mergedlist"){
                loadAdditionalItems(5, ".upcoming-meetings", "#loadMoreMeetings", ".meeting-title > *");
            } else {
                $('#lazyLoadContainer').hide();
                $('#loadMoreMeetings').hide();
            }
        });


        function loadLegislationData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'  
            };

            Legislation.LoadLegislationData(filtered, language);
        }

        function loadAgendaItemHistoryData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><i class="la la-spinner la-spin loaderDesign"></i></div>'  
            };
            
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType) {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var filterByStage = ""; //lbFilterByStage
            if ($("#ctl00_MainContent_lbFilterByStage").val()) {
                filterByStage = $("#ctl00_MainContent_lbFilterByStage").val().join(',');
            }

            var filterByStatus = ""; //lbFilterByStatus
            if ($("#ctl00_MainContent_lbFilterByStatus").val()) {
                filterByStatus = $("#ctl00_MainContent_lbFilterByStatus").val().join(',');
            }

            var filterByDepartmentNames = ""; //lbFilterByDepartment
            if ($("#ctl00_MainContent_lbFilterByDepartment").val()) {
                filterByDepartmentNames = $("#ctl00_MainContent_lbFilterByDepartment").val().join(',');
            }

            if (filterByDate || filterbyMeetingTypeIds || filterByStage || filterByStatus || filterByDepartmentNames){
                $("#btnFilter").append("<span class='dot'></span>");
                $('.dropdown-toggle i').addClass('filtered');
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            } else {
                $(".dot").remove();
                $('.dropdown-toggle i').removeClass('filtered');
            }

            $('.dropdown-toggle').next().css("display", "none");

            AgendaItemHistory.AgendaItemHistoryView(filtered, language, filterByDate, filterbyMeetingTypeIds, filterbyMeetingTypeNames, filterByStage, filterByStatus, filterByDepartmentNames);
        }
        
        function loadCalendarMeetings() { 
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#table-agendaitemhistory-list").hide();
            
            var currentMonStart = "";
            var currentMonEnd = "";
            var calendarEl = document.getElementById('calendar')
            var calButtons = 'month mergedListViewButton '
            var calendar = new FullCalendar.Calendar(calendarEl, {
                eventDisplay: 'block',
                showNonCurrentDates: false,
                fixedWeekCount: false,
                locale: 'en',
                customButtons: {
                    month: { 
                        text: 'Calendar'
                    },
                    myCustomButton: {
                        text: 'Upcoming'
                    },
                    myCustomConflictsButton: {
                        text: 'Conflicts Registry'
                    },
                    myCustomAgendaItemHistoryButton: {
                        text: "Agenda Item History"
                    },
                    mergedListViewButton: {
                        text: 'List'
                    },
                    pastViewButton: {
                        text: 'Past'
                    },
                    myCustomLegislationButton: {
                        text: 'Legislation'
                    } 
                },
                headerToolbar: {
                    left: 'prev,title,next',
                    center: '',
                    right: calButtons.trimEnd()
                },
                dayHeaderFormat: { weekday: 'long'},
                initialView: 'dayGridMonth',
                dayMaxEventRows: 4,
                moreLinkContent: function(args){return (window.location.href.toLowerCase().includes("french") ? "Cliquez pour agrandir (" + args.num + " plus)": "Click to expand (" + args.num + " more)");},
                moreLinkDidMount: function(args){
                    $(args.el).attr("tabIndex", "0");
                },
                contentHeight:800,
                handleWindowResize:true,
                datesSet: function (dateInfo) {
                    $(".fc-prev-button").attr("aria-label", "Previous Month");
                    $(".fc-next-button").attr("aria-label", "Next Month");
                    
                    if ($('#ctl00_MainContent_StartMonthDate').val() != "" && $('#ctl00_MainContent_EndMonthDate').val() != "") {
                        var minDate = moment($('#ctl00_MainContent_StartMonthDate').val()),
                            maxDate = moment($('#ctl00_MainContent_EndMonthDate').val());

                        if (minDate >= dateInfo.view.start && minDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-prev-button").prop('disabled', true);
                            $(".fc-prev-button").addClass('fc-state-disabled');
                            $(".fc-prev-button").css("cursor", "default");
                        }
                        else {
                            $(".fc-prev-button").removeClass('fc-state-disabled');
                            $(".fc-prev-button").prop('disabled', false);
                            $(".fc-prev-button").css("cursor", "pointer");
                        }

                        if (maxDate >= dateInfo.view.start && maxDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-next-button").prop('disabled', true);
                            $(".fc-next-button").addClass('fc-state-disabled');
                            $(".fc-next-button").css("cursor", "default");
                        } else {
                            $(".fc-next-button").removeClass('fc-state-disabled');
                            $(".fc-next-button").prop('disabled', false);
                            $(".fc-next-button").css("cursor", "pointer");
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json",
                        data: "{'calendarStartDate':'" + info.startStr + "','calendarEndDate':'" + info.endStr + "'}",
                        url: "/MeetingsCalendarView.aspx/GetAllMeetings" + window.location.search,
                        dataType: "json",
                        success: function (data) {
                            var events = [];
                            $.map(data.d, function (item, i) {
                                var event = new Object();
                                event.id = item.ID;
                                event.allday = false;
                                event.start = new Date(item.StartDate);
                                event.end = new Date(item.EndDate);
                                event.title = decodeHTML(item.MeetingName);
                                event.url1 = item.Url;
                                event.description = item.Description;
                                event.location = item.Location;
                                event.shareUrl = item.ShareUrl;
                                event.meetingType = item.MeetingType;
                                event.className = item.ClassName;
                                event.languageName = item.LanguageName;
                                event.sharing = item.Sharing;
                                event.hasAgenda = item.HasAgenda;
                                event.MeetingDocumentLink = item.MeetingDocumentLink;
                                event.portalId = item.PortalId;
                                event.HasLiveVideo = item.HasLiveVideo;
                                event.HasVideo = item.HasVideo;
                                event.LiveVideoStandAloneLink = item.LiveVideoStandAloneLink;
                                event.HasVideoLivePassed = item.HasVideoLivePassed;
                                event.DelegationRequestLink = item.DelegationRequestLink;
                                event.MeetingPassed = item.MeetingPassed;
                                event.AllowPublicComments = item.AllowPublicComments;
                                event.FormattedStart = item.FormattedStart;
                                event.TimeOverride = item.TimeOverride;
                                event.TimeOverrideFR = item.TimeOverrideFR;
                                event.IsMP3 = item.IsMP3;
                                events.push(event);
                                setTimeout(function(){
                                    $(".fc-daygrid-more-link").each(function(i,v){
                                        $(v).keypress(function(e){
                                            if(e.which == 13 || e.which == 32){
                                                $(".fc-daygrid-more-link")[i].click();
                                                setTimeout(function(){ 
                                                    tabIndexLoop(document.querySelector(".fc-more-popover") ,true, $(v));
                                                    setTimeout(function () {
                                                        $(".fc-more-popover").first().find(".fc-daygrid-event").first().focus();
                                                    }, 350);
                                                }, 300); 
                                            }
                                        });
                                    });
                                }, 500);
                            });
                            successCallback && successCallback(events);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                },
                eventClick: function (eventClickInfo) {
                    showCalEvent(eventClickInfo.event, eventClickInfo.el);
                },
                eventDidMount: function (args) {
                    var timeSelector = $(args.el).children(".fc-event-main").children(".fc-event-main-frame").children(".fc-event-time");
                    $(args.el).popover({
                        title: args.event.title,
                        content: args.event.extendedProps.FormattedStart,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body',
                    });
                    $(args.el).attr("tabIndex", "0");
                    $(args.el).attr("aria-label", args.event.extendedProps.FormattedStart + " " + args.event.title);
                    $(args.el).attr("role", "button");
                    $(args.el).find(".fc-event-time").attr("aria-hidden", "true");
                    $(args.el).find(".fc-event-title").attr("aria-hidden", "true");
                    $(args.el).keypress(function(e){
                        if(e.which == 13 || e.which == 32){
                            showCalEvent(args.event, args.el);
                        }
                    });
                    
                    var eventTime = timeSelector.text();
                    timeSelector.text(eventTime.substr(0, eventTime.length - 2) + " " + eventTime.substr(eventTime.length - 2).toUpperCase());
                },
                eventTimeFormat: {
                    hour12: 'True',
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                loading: function (bool) {
                    if (getCookie('CurrentTab') == 'list') {
                        if ($('#all-list').text().indexOf('There are no meetings') > -1) {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        } else {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                        }
                    } else {
                        if (bool) $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        else $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                    }
                }
            });

            calendar.render();
            $('#calendar').prepend("<h1 class='visuallyhidden'>Calendar View</h1>");
            $(".fc-dayGridMonth-view > table").prepend("<caption class='visuallyhidden'>Calendar containing meetings</caption>");
            $(".fc-toolbar-chunk").first().attr("aria-live", "polite");
            $(".fc-toolbar-chunk").last().attr("role", "group");
            $(".fc-toolbar-chunk").last().attr("aria-label", "event views");
            $('#calendar').show();
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();

            $("#calendar > .fc-toolbar > .fc-left > h2").attr("aria-hidden", "true");
            $("#calendar > .fc-toolbar > .fc-left > h2").css("display", "none");
            $("#calendar > .fc-toolbar > .fc-left > h2").before("<h1>" + $("#calendar > .fc-toolbar > .fc-left > h2").text() +"</h1>");
            $(".fc-button-primary").each(function(i,v){
                $(v).removeClass("fc-button-primary");
                $(v).addClass("fc-state-default");
            });

            $(".fc-month-button").addClass("fc-state-active");
            $(".fc-month-button").attr("aria-pressed", "true");

            $(".fc-mergedListViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomButton-button").attr("aria-pressed", "false");
            $(".fc-pastViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomConflictsButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomAgendaItemHistoryButton").attr("aria-pressed", "false");
            $(".fc-myCustomLegislationButton").attr("aria-pressed", "false");
            
        }

        function showCalEvent(event, calEntry){
            var startDate = new Date(event.start);
            var modalContainer = document.querySelector(".modal-dialog");
            var eventAria = event.title + " " + event.extendedProps.FormattedStart;
            startDate = startDate.format("ddd, MMMM dd, yyyy @ h:mm tt");
            if($('#modelHeader' > " h2:has('#modalTitle')").length > 0) {
                $('#modalTitle').remove();
            }
            $('#modelHeader').prepend("<h2 id='modalTitle' tabIndex='0' style='font-size: 17px'></h2>");
            $('#modalTitle').html(event.title);
            $("#closeCalModal").on("click", function(){
                calEntry.focus();
            });
            $(document).keydown(function(event) { 
                if (event.keyCode == 27) {
                    calEntry.focus();
                }
            });
            $('#startDate').text(event.extendedProps.FormattedStart);
            $('#desc').html(event.extendedProps.description);
            if (event.extendedProps.hasAgenda && event.extendedProps.sharing) {
                $('#eventLink').show();
                $('#eventLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                var shareAria = "Share " + eventAria;
                $('#shareContainer').show();
                $('#shareLink').attr('href', event.extendedProps.shareUrl);
                $('#shareLink').attr('aria-label', shareAria);
                $('#shareLink > img').attr('aria-label', shareAria);
                if (event.extendedProps.AllowPublicComments){
                    var commentAria = "Comment on " + eventAria + ". Opens in a new tab/window";
                    $('#commentLink').show();
                    $('#commentLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                    $('#commentLink').attr('aria-label', commentAria);
                    $('#commentLink > img').attr('aria-label', commentAria);
                } else {
                    $('#commentLink').hide();
                }
            }
            else {
                $('#eventLink').hide();
                $('#shareContainer').hide();
                $('#shareLink').removeAttr("href");
                $('#commentLink').hide();
                $('#commentLink').removeAttr("href");
            }
            $('#meeting-type').text(event.extendedProps.meetingType);
            
            if (event.extendedProps.MeetingDocumentLink.length > 0) {
                var lang = window.location.href.toLowerCase().includes("french");
                var meetingDocuments = (event != undefined && event != null ? GetCategorizedMeetingLinks(event, lang, event.extendedProps.MeetingDocumentLink, false) : "");
                $('#MeetingDocuments').html(meetingDocuments);
                $('#MeetingDocuments').show();
                shortenLinkNames();
            }
            else {
                $('#MeetingDocuments').html("");
            }
            if(event.extendedProps.HasLiveVideo && !event.extendedProps.MeetingPassed && !event.extendedProps.IsMP3){
                var meetingDocuments = event.extendedProps.LiveVideoStandAloneLink + "<i class='las la-video la-lg'></i>"  + "  View Live Stream" + "</a>";
                $('#video-link').html(meetingDocuments);
                $('#video-link').show();
            } else {
                $('#video-link').hide();    
            }

            if (event.extendedProps.DelegationRequestLink != "") {
                var delegationAria = "Delegation request for " + eventAria + ". Opens in a new tab/window";
                $('#delegationRequestLink').show();
                $('#delegationRequestLink').attr('href', event.extendedProps.DelegationRequestLink);
                $('#delegationRequestLink').attr('aria-label', delegationAria);
                $('#delegationRequestLink > img').attr('aria-label', delegationAria);
            }
            else {
                $('#delegationRequestLink').hide();
                $('#delegationRequestLink').removeAttr("href");
            }
            $('#fullCalModal').modal('show');
            $('#fullCalModal').removeAttr('aria-hidden', 'true');
            tabIndexLoop(modalContainer, false, null);
            setTimeout(function () {
                $("#closeCalModal").focus();
            }, 350);
        }

        $(".PastMeetingTypesName").each(function(i,v){
            $(v).keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38){
                    e.preventDefault();
                    $(v).parent().prevAll(":visible:first").children(":first").focus();
                } else if (keyCode == 40){
                    e.preventDefault();
                    $(v).parent().nextAll(":visible:first").children(":first").focus();
                }
                else if (keyCode == 32){
                    e.preventDefault();
                    $(v).click();
                }
            });
        });

        lazyLoadAttachments();
        
        setTimeout(function(){
            $('#searchMeetingType').attr("placeholder", "Optional Filter by Meeting Type search field");
            //$('#searchMeetingType').removeAttr("aria-labelledby");
            $('#searchMeetingType').keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38 || keyCode == 40){
                    $('#searchMeetingType').val($(".ss-highlighted").text());
                }
            });
        }, 1000);

        function lazyLoadAttachments(){
            $(".additional-doc-list").each(function(i,v){
                if ($($(v).children()).length > 11 ){
                    loadAdditionalItems(10, v, $(v).find(".loadMoreAttachments"), ".teaserLink");
                } else {
                    $(v).find(".loadMoreAttachments").hide();
                }
            });
        }
        function shortenLinkNames(){
            setTimeout(function(){
                $(".teaser").each(function(i,v){
                    var min = 12;
                    var parentWidth = $(v).parents('div').width();
                    var limit = 0;
                    if (parentWidth > 0){
                        limit = $(v).parents('div').width()/11;
                    } else {
                        limit = $(".attachment-list").first().width()/11;
                    }
                    
                    limit = (limit >= min ? limit : min);
                    teaserLink(v, limit);
                });
            },150);
        }

        function teaserLink(v, maxlen){
            var txt=$(v).text().replace("...", "");
            if(txt.length>maxlen){
                var shortText=txt.substring(0, maxlen)+
                "<span onclick='$(this).hide();$(this).next().toggle();'>"+
                    "..."+
                "</span>"+
                "<span  style='display:none'>"+
                    txt.substring(maxlen, txt.length)+
                "</span>";

                $(v).html(shortText);
            }
        }

        function loadAdditionalItems(itemsToLoad, container, trigger, postFocus){
            $(trigger).hide();
            var size_cont = $($(container).children()).length;
            if (size_cont > itemsToLoad){ 
                $(container).children().hide();
                $(trigger).show();
                var increment = itemsToLoad;
                $(container).children().slice(0,itemsToLoad).show();
                $(trigger).keypress(function(e){
                    if(e.which == 13){
                        $(trigger).click();
                    }
                });
                $(trigger).click(function () {
                    itemsToLoad += increment;
                    $(container).children().slice(0,itemsToLoad).show();
                    if(postFocus){
                        setTimeout(function(){ 
                            $(container).children().eq(itemsToLoad - increment).find(postFocus).focus(); 
                        }, 100); 
                    }
                    if (itemsToLoad>=size_cont){
                        $(trigger).hide();
                    } else {
                        $(trigger).show();
                    }
                });
            }
        }

        function loadConflictData(isFiltered) {
            if ($.fn.DataTable.isDataTable('#table-conflicts-list')) {
                $('#table-conflicts-list').dataTable().fnClearTable();
                $('#table-conflicts-list').dataTable().fnDestroy();
                $('#table-conflicts-list tbody').remove();
            }
            var searchText = $("#ctl00_MainContent_txtFilterByKeyword").val().trim();
            
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType != null && filterbyMeetingType != "") {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();
            var filterByConflictMemberIds = "";
            if (filterByConflictMember != null && filterByConflictMember != "") {
                filterByConflictMemberIds = filterByConflictMember.join(',');
            }

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var conflictsTable = $('#table-conflicts-list').DataTable({
                "fnDrawCallback": function( oSettings ) {
                    $('#viewRegConflict').attr("aria-label", "Member in Conflict");
                    $('.dataTables_empty').removeAttr("valign");
                    $('.dataTables_empty').css("vertical-align", "top");
                    $('.paginate_button:not(.current)').removeAttr('aria-current');
                    $('.paginate_button.current').attr("aria-current", "page");
                    $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                },
                "dom": 'rtip',
                "bProcessing": true,
                "stateSave": false,
                "bServerSide": true,
                "autoWidth": false,
                "pagingType": "full_numbers",
                "sAjaxSource": window.location.origin+"/GetSearchData.asmx/GetConflictsData" + window.location.search,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "searchText", "value": searchText });
                    aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                    aoData.push({ "name": "filterByDate", "value": filterByDate });
                    aoData.push({ "name": "filterByConflictMemberIds", "value": filterByConflictMemberIds });
                    aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                },
                "columns": [
                    { "data": "ConflictMember", "orderable": true },
                    { "data": "MeetingTypeName", "orderable": true },
                    { "data": "MeetingStart", "orderable": true },
                    { "data": "AgendaItem", "orderable": true },
                    { "data": 'FileIcon', "orderable": false }
                ],
                "order": [[0, "asc"]],
                "columnDefs": [
                    {
                        "targets": 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'conflict'); 
                        }
                    },
                    {
                        "targets": 1,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingType'); 
                        }
                    },
                    {
                        "targets": 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingDate'); 
                        }
                    },
                    {
                        "targets": 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'agendaItem'); 
                        }
                    },
                    {
                        "targets": 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'viewRegConflict'); 
                        }
                    }
                ],
                language: {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sZeroRecords": "No matching records found",
                    paginate: {
                        previous: '<',
                        next: '>',
                        first: '<<',
                        last: '>>'
                    },
                    aria: {
                        paginate: {
                            previous: 'previous page',
                            next: 'next page',
                            first: 'first page',
                            last: 'last page'
                        }
                    },
                    processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                }
            });
            
            $('#viewRegConflict').attr("aria-label", "View all registered conflicts for the agenda item");

            if (searchText != "" || filterByDate != "" || filterbyMeetingTypeIds != "" || filterByConflictMemberIds != "") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");
            if (isFiltered && getCookie('CurrentTab') == 'list') {
                document.getElementById('FilterResults').click();
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            }
            else {
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#searchresults").hide();
            }
        }
        $(window).on('load', function(){ shortenLinkNames(); });
        $(window).resize(function(){ shortenLinkNames(); });
    </script>

    
    <script type="text/javascript">
        $(".DelegationRequest").click(function (e) {
            e.preventDefault();

            var a = $(this);
            var width = 500;
            var height = 600;
            var left = (screen.width - width) / 2;
            var top = (screen.height - height) / 2;
            window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
        });        
        function closeDateRangeFilter()
        {    
            filterbyDepartmentSelect.close()
            filterbyStatusSelect.close()
            filterbyStageSelect.close()
            filterbyConflictMemberSelect.close()
            filterbyMeetingTypeSelect.close()
        }
        //stop calener to misbehave in IE browser
        $("#divDateRangeFilterPopup").click(function (e) {
            e.stopImmediatePropagation();  
            closeDateRangeFilter();
        });

        
    </script>
    <script>
        function NavigationTab_Click() {
            console.log("NavigationTab_Click()");

            $("#btnCalendarView, #btnListView, #btnConflictsView, #btnLegislationView, #btnMergedListView, .fc-myCustomLegislationButton-button, .fc-myCustomAgendaItemHistoryButton-button")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-merged-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();

            $("#searchresults").hide();
            $("#downloadIconConflictsList").hide();
            $("#mergedListHeader").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $(".fc-left").hide();
            $("#searchresults").hide();
            $("#FilterByKeyword").hide();
            $("#FilterResults").hide();
            $("#FilterByConflictMember").hide();
            $("#downloadIconConflictsList").hide();
            $("#FilterResults").hide();
            $("#btnFunnelFilterResults").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $("#mergedListHeader").hide();
            $("#filterIcon").show();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            var tab = $(this);


            switch (tab.text().trim()) {
                case "Agenda Item History":
                    setCookie('CurrentTab', 'agendaItemHistory');
                    View.Current = Views.AgendaItemHistory;

                    $("#AgendaItemHistoryViewButton, .fc-myCustomAgendaItemHistoryButton-button")
                        .addClass("fc-state-active");

                    $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    $("#agendaitemhistory-list").show();
                    $(".AgendaItemHistoryHeader").show();
                    $("#FilterByKeyword").show();

                    break;
                case "Legislation":
                    setCookie('CurrentTab', 'legislation');
                    View.Current = Views.Legislation;

                    $("#btnLegislationView, .fc-myCustomLegislationButton-button")
                        .addClass("fc-state-active");

                    $("#btnLegislationView").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    //$("#all-legislation-list").show();
                    $("#agendaitemhistory-list").show();
                    $("#FilterByKeyword").show();
                    //$(".LegislationHeader").show();
                    $(".AgendaItemHistoryHeader").show();                    

                    break;

                case 'Upcoming':
                    // show list tab elements //
                    $("#cal-list").show();
                    $("#all-list").show();

                    $("#btnListView").addClass("fc-state-active");
                    $("#btnListView").attr("aria-pressed", "true")
                    $("#cal-list").show();
                            
                    View.Current = Views.List;
                    setCookie('CurrentTab', 'list');
                    $("#ctl00_MainContent_MonthMenu").show();
                    if ($("#ctl00_MainContent_IsMonthChange").val() == "1") {
                        $("#ctl00_MainContent_IsMonthChange").val("0");
                        document.getElementById('FilterResults').click();
                    }
                    
                    $("#filterIcon").show();
                    $("#FilterResults").show();

                    //Set focus on the search bar - no longer need with new accessibility guide
                    //document.getElementById('ctl00_MainContent_txtSearch').focus();

                    break;
                default:
                    $("#filterIcon").show();
            }
        }

        $(".FilterByDate").keydown(function (e) {
            if (e.which != 9){
                return false;
            }
        });

        $(document).ready(function(){
            
            var datePickerMessage = (window.location.href.toLowerCase().includes("french") ? "Appuyez sur l'espace pour ouvrir. Veuillez sélectionner une date de début et de fin. Retour arrière pour effacer" : "Press space to open. Please select a start and end date. Backspace to clear");
            var daterangepicker = new ej.calendars.DateRangePicker({
                placeholder: datePickerMessage,
                dayHeaderFormat: "Abbreviated",
                keyConfigs:{
                    altDownArrow: "space"
                },
                format: 'M/d/yyyy',
                close: function() {
                    setTimeout(function(){ 
                        $('.dropdown-toggle').next().toggle();
                    }, 50);
                },
                open: function() {
                    setTimeout(function(){ 
                        $('.e-left-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your start date </caption>');
                        $('.e-right-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your end date </caption>');
                    }, 50);
                }
            });

            $( window ).resize(function() {
                if ($(window).width() >= 499) {
                    daterangepicker.isMobile = false;
                } else {
                    daterangepicker.isMobile = true;
                }
            });

            daterangepicker.appendTo('input[id="ctl00_MainContent_FilterByDate"]');

            $(".daterangepicker").click(function(event){
                event.preventDefault();
            });

            setTimeout(function(){
                $(".e-input-group-icon.e-range-icon.e-icons").attr("tabIndex", "0");
                $(".e-input-group-icon.e-range-icon.e-icons").attr("aria-label", "Filter by date button");
                $(".e-input-group-icon.e-range-icon.e-icons").keydown(function (e) {
                    if (e.which == 13 || e.which == 32){
                        daterangepicker.show();
                    } else if (e.keyCode == 27){
                        $('.dropdown-toggle').next().toggle();
                    }
                });
                var syncFusionFormLabel = "Date picker icon"
                $(".e-daterange-hidden").each(function(i,v){
                    $(v).attr("id", "datePickerIcon" + i);
                    $(v).after('<label for="datePickerIcon' + i + '" class="visuallyhidden">' + syncFusionFormLabel + ' ' + i + '</label>');
                });
            }, 300);

            $(".FilterByDate").keydown(function (e) {
                if (e.which == 8){
                    $(".FilterByDate").val("");
                }
            });
            $('input[id="ctl00_MainContent_FilterByDate"]').keydown(function(e){
                if (e.keyCode == 27){
                    $('.dropdown-toggle').next().toggle();
                }
            });
            $("body").tooltip({ placement: 'top', selector: ".Location-Tooltip" });
            $('.dropdown-toggle').on('click', function (e) {
                $(this).next().toggle();
            });
            $("body").click(function (e) {
               
                if (!$(e.target).closest(".dropdown-toggle, .dropdown-toggle i,.dropdown-menu, .daterangepicker, .prev, .next").length > 0 && !$('[id^=ctl00_MainContent_FilterByDate_popup]').length) {
                    $('.dropdown-toggle').next().css("display", "none");
                    if ($("#ctl00_MainContent_IsChangeFilter").val() == "1") {
                        ApplyFilterChanges();
                    }
                }
            });

            function getTab() {
               var cookie = getCookie('CurrentTab');
               if (cookie == "") {
                    var defaultTab = 'mergedlist';
                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);

                    if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                        cookie = defaultTab.toLowerCase();
                    } else {
                        cookie = urlParams.get("CurrentTab");
                    }
                
               }
                return cookie;
            }

            var tabCookie = getTab();

            {
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($('#ctl00_MainContent_txtSearch').val() != "" && tabCookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (tabCookie == "conflict" || tabCookie == "agendaItemHistory") {
                    $("#btnFunnelFilterResults").show();
                    $("#btnFunnelFilterResults").on('click', function () {
                        if(tabCookie == "agendaItemHistory") {
                            loadAgendaItemHistoryData(true);
                        }
                        else {
                            loadConflictData(true);
                        }

                    });
                }
                else {
                    $("#FilterResults").show();
                }
            }

            $('#ctl00_MainContent_txtSearch').on('input propertychange', function () {
                var cookie = getTab();
                
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($(this).val() != "" && cookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (cookie == "conflict") {
                    $("#btnFunnelFilterResults").show();
                }
                else {
                    $("#FilterResults").show();
                }
            });

            $('#ctl00_MainContent_txtFilterByKeyword').on('input propertychange', function () {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            });

            if($(".ss-search").length > 0){
                $(".ss-search > input").first().attr("id","searchMeetingType").attr("aria-labelledby","searchMeetingType");
                $(".ss-search").first().prepend("<label for='searchMeetingType' class='sr-only'>Optional filter by Meeting Type Search</label>");

                $(".ss-search > input").last().attr("id","searchConflictMember").attr("aria-labelledby","searchConflictMember");
                $(".ss-search").last().prepend("<label for='searchConflictMember' hidden>Search </label>");
            }

            //for enabled searching the focus - no longer need with new accessibility guide
            //document.getElementById('ctl00_MainContent_txtSearch').focus();
        });

        //List Functions
        //$("#btnListView").click(NavigationTab_Click);
        

        $("#all-list .fc-myCustomButton-button").click(function () {
            //$("#cal-list .fc-month-button").click();
            //$("#calendar .fc-myCustomButton-button").click();
        });
        /*
        $("#calendar .fthtfhftf").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").show();
            $("#all-legislation-list").hide();
            $("#all-merged-list").hide();
            $(".fc-left").show();
        });*/

        //$(".fc-myCustomLegislationButton-button").click(NavigationTab_Click);
        /*
        $("#calendar .yh4554h45h45h").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#all-merged-list").show();
            $(".fc-left").show();
        });*/

       
        ////$("#all-list .fc-myCustomButton-button").click(function () {
        ////    NavigationTab_Click();
            
        ////    $("#all-list").show();
        ////    $("#all-conflicts-list").hide();
        ////    $("#all-legislation-list").hide();
        ////    $("#all-merged-list").hide();
        ////    $("#searchresults").hide();
        ////});

        function searchData() {
            var searchText = $('#ctl00_MainContent_txtSearch').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingTypeIds = "";
            if ((filterbyMeetingType != null && filterbyMeetingType != null) || (filterByDate != null && filterByDate !== "" )) {
                $("#btnFilter").append("<span class='dot'></span>");
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            });

            if (searchText.trim() != "") {
                NavigationTab_Click();
                $("#searchTable > thead > tr").append("<th></th>");

                if ($.fn.DataTable.isDataTable('#searchTable')) {
                    $('#searchTable').dataTable().fnClearTable();
                    $('#searchTable').dataTable().fnDestroy();
                    $("#searchTable tbody").remove();
                }

                var searchTable =  $('#searchTable').dataTable({                   
                    "dom": '<"top"i>rt<"bottom"p><"clear">',
                    "pagingType": "full_numbers",
                    searching: false,
                    "bProcessing": true,
                    "drawCallback": function (settings) {
                        $("#searchTable thead").remove();
                    },
                    "bServerSide": true,
                    "sAjaxSource":  "/GetSearchData.asmx/GetSearchMeetingData" + window.location.search,
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "searchText", "value": searchText });
                        aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                        aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                        aoData.push({ "name": "filterByDate", "value": filterByDate });
                    },
                  
                    "sServerMethod": "post",
                    "aoColumns": [{ mData: {} }],
                    language: {
                        "sEmptyTable": "No data available in table",
                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                        "sInfoFiltered": "(filtered from _MAX_ total entries)",
                        "sZeroRecords": "No matching records found",
                        paginate: {
                            last: '>',
                            first: '<'
                        },
                        processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                    }
                });

                $("#calendar").hide();
                $("#all-list").hide();
                $("#all-conflicts-list").hide();
                $("#all-merged-list").hide();
                $("#all-legislation-list").hide();
                $("#cal-list").show();
                $("#btnListView").removeClass("fc-state-active");
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#searchresults").show();
                if (filterbyMeetingTypeIds != "" || filterByDate != "") {
                    $('.dropdown-toggle i').addClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('1');
                }
                else {
                    $('.dropdown-toggle i').removeClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('0');
                }
                $('.dropdown-toggle').next().css("display", "none");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#filterIcon").show();
            }
            else {
                $("#searchresults").hide();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");
        }

        $(function () {
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(bindDataTable); // bind data table on every UpdatePanel refresh
        });

        //https://stackoverflow.com/questions/16941104/remove-a-parameter-to-the-url-with-javascript
        function RemoveParam(key, sourceURL) {
            var returnURL = sourceURL.split("?")[0],
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    var param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                        break;
                    }
                }
                if (params_arr.length) returnURL = returnURL + "?" + params_arr.join("&");
            }
            return returnURL;
        }

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null) {
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                } 
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
                else {
                    return url;
                }
            }
        }

        $(document).ready(function () {
            $( ".fc-month-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $("button[data-dismiss='modal']").on( "click", function() {
                $('#bootstrapModal').attr('aria-hidden', 'true');
                $('#fullCalModal').attr('aria-hidden', 'true');
                $("#conflictsDetailsModal").attr('aria-hidden', 'true');
                $('#LegislationDetailsModal').attr('aria-hidden', 'true');
                $('#MeetingTypeName').remove();
                $('#modalTitle').remove();
            });

            $(document).keydown(function(event) { 
                if (event.keyCode == 27) { 
                    $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true');   
                    $('#fullCalModal').modal('hide').attr('aria-hidden', 'true');      
                    $('#conflictsDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#LegislationDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#MeetingTypeName').remove();
                    $('#modalTitle').remove();
                }
            });

            $( ".fc-month-button" ).on( "click", function() {
                setCookie('CurrentTab', 'calendar');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "calendar", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'list');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "list", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'conflict');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "conflict", cleanURL);
                } else {
                    document.location.href = cleanURL; 
                }
               
            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'mergedlist');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "mergedlist", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'past');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "past", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'legislation');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "legislation", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'agendaItemHistory');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "agendaItemHistory", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            bindDataTable(); // bind data table on first page load

            $("a[target='_blank']").each(function(i,v){
                $(v).append("<i class='las la-external-link-alt'></i>");
                $(v).attr("aria-label", function(index, val) {
                    return val + '. Opens in a new tab/window'; //i == index, val == original attribute, the id
                });
            })
        });
        function bindDataTable() {
            {

                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide();
                    $("#meetingList .dataTables_empty").removeAttr("valign");
                    $("#meetingList .dataTables_empty").css("vertical-align", "top");
                    
                }
            }

            if ($("#ctl00_MainContent_IsFilter").val() == "1") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");

            if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                $('#btnPreviousMonth').hide();
                $('#btnNextMonth').hide();
                //$('#monthText').css('margin', '0');
            }
            else {
                $('#btnPreviousMonth').show();
                $('#btnNextMonth').show();
                $('#btnPreviousMonth').css('margin', '0');
            }

            $("#btnPreviousMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                
                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $("#btnNextMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                
                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $(".fc-prev-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
           
            $(".fc-next-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                   
                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
        }
        var prm = Sys.WebForms.PageRequestManager.getInstance();
        if (prm != null) {
            prm.add_endRequest(function (sender, e) {
                
                
                $(".DelegationRequest").click(function (e) {
                    e.preventDefault();

                    var a = $(this);
                    var width = 500;
                    var height = 600;
                    var left = (screen.width - width) / 2;
                    var top = (screen.height - height) / 2;
                    window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
                });
                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide()
                }
                var mincount = 20;
                var maxcount = 40;
                //comment out fake lazy loading code
               // $(".meetingDetails").slice(40).hide();

                $(window).scroll(function () {
                    stickyHeader();
                    if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                        if (View.Current == Views.List ) {
                            //comment out fake lazy loading code
                            //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                            //mincount = mincount + 20;
                            //maxcount = maxcount + 20;
                        }
                    }
                });
                if ($("#ctl00_MainContent_IsDateFilter").val() == "0") {
                    
                    //$("#ctl00_MainContent_FilterByDate").val("");
                }

                if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                    $('#btnPreviousMonth').hide();
                    $('#btnNextMonth').hide();
                    //$('#monthText').css('margin', '0');
                }
                else {
                    $('#btnPreviousMonth').show();
                    $('#btnNextMonth').show();
                    $('#btnPreviousMonth').css('margin', '0');
                }
                $("#btnPreviousMonth").click(function () {
                   
                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
              
                $("#btnNextMonth").click(function () {
                  
                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
            });
        };
        var filterbyMeetingTypeSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lblMultiSelect',
            placeholder: 'Select Data'
        });
        var filterbyConflictMemberSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByConflictMember',
            placeholder: 'Select Data'
        });
        var filterbyStageSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStage',
            placeholder: 'Select Data'
        });
        var filterbyStatusSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStatus',
            placeholder: 'Select Data'
        });
        var filterbyDepartmentSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByDepartment',
            placeholder: 'Select Data'
        });

        function openConflictDetails(agendaItemId, meetingId, meetingTypeName) {
            $("#modelHeaderconflicts").prepend("<h2 id='MeetingTypeName' tabIndex='0' class='modal-title' aria-hidden='true' style='font-size: 17px'></h2>")
            $("#MeetingTypeName").html(meetingTypeName);

            $.ajax({
                type: "POST",
                contentType: "application/json",
                data: "{'AgendaItemId':'" + agendaItemId + "','MeetingId':'" + meetingId + "'}",
                url: "/MeetingsCalendarView.aspx/AgendaItemConflictsGetAll",
                dataType: "json",
                success: function (data) {
                    if (data.d != null && data.d != undefined) {
                        $("#table-conflicts-details-list > thead > tr").append("<th scope='col'></th>");
                        if ($.fn.DataTable.isDataTable('#table-conflicts-details-list')) {
                            $('#table-conflicts-details-list').dataTable().fnClearTable();
                            $('#table-conflicts-details-list').dataTable().fnDestroy();
                        }
                        
                        var conflictDetailsTable = $('#table-conflicts-details-list').DataTable({
                            "dom": '<"modal-body"t><"modal-footer"p>',
                            "pagingType": "simple_numbers",
                            "pageLength": 1,
                            "ordering": false,
                            "drawCallback": function (settings) {
                                $("#table-conflicts-details-list thead").remove();
                                $('.paginate_button:not(.current)').removeAttr('aria-current');
                                $('.paginate_button.current').attr("aria-current", "page");
                                $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                            },
                            language: {
                                paginate: {
                                    previous: '<',
                                    next: '>'
                                },
                                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                            }
                        });
                        var tblRow = "";
                        for (var i = 0; i < data.d.length; i++) {
                            var element = data.d[i];
                            tblRow = '<table id="AgendaItemConflicts"><tr><td style="width:25%;"><strong>Agenda Item:</strong> </td><td style="width:75%;">' + element.ItemTitle + '</td></tr><tr><td><strong>Member in Conflict:</strong> </td><td>' + element.ConflictMember + '</td></tr><tr><td style="vertical-align: top;"><strong>Reason:</strong> </td><td>' + element.Reason + '</td></tr></table>';
                            conflictDetailsTable.row.add([tblRow]).draw();
                        }

                        $("#conflictsDetailsModal").modal('show');
                        $("#conflictsDetailsModal").removeAttr('aria-hidden');
                        $("#table-conflicts-details-list_previous").attr("aria-label", "Navigate to Previous Conflict");
                        if($("#table-conflicts-details-list_previous").hasClass("disabled")) {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "false");
                        }
                        $("#table-conflicts-details-list_next").attr("aria-label", "Navigate to Next Conflict");
                        if($("#table-conflicts-details-list_next").hasClass("disabled")) {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "false");
                        }
                    }
                    tabIndexLoop(document.querySelector("#conflictsDetailsModal"), false, null);
                    setTimeout(function(){
                        $("#modelHeaderconflicts > button").focus();
                    }, 350);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                }
            });
        }
    </script>
    

    

    <style>
        .sharing {
            display:none;;
            float: none !important;
        }

        .conflicts {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            display:none !important;;
        }

        .listView {
			display:none !important;;
        }

        .mergedListView {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            ;
        }

        .calendarView {
            ;
        }

        .pastView {
            display:none !important;;
        }
    </style>
    <input type="hidden" name="ctl00$MainContent$IsListView" id="ctl00_MainContent_IsListView" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsDateFilter" id="ctl00_MainContent_IsDateFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsConflicts" id="ctl00_MainContent_IsConflicts" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsMonthChange" id="ctl00_MainContent_IsMonthChange" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsChangeFilter" id="ctl00_MainContent_IsChangeFilter" value="0" />
    <script>
        function Size_Changed() {
            CurrentHeight_Send();
        }

        function CurrentHeight_Send() {
            if (window.parent !== window.self) {
                window.parent.postMessage($('body').height(), "*");
            }
        }

        function Message_Recieved(event) {
            CurrentHeight_Send();
        }

        // Setup the listener.
        if (window.addEventListener) {
            addEventListener("message", Message_Recieved, false);
        }
        else {
            attachEvent("onmessage", Message_Recieved);
        }
    </script>

            <footer id="footer" style="display: none;">
                <div class="copyright">eSCRIBE Version : 50241300</div>
            </footer>
        </div>
    </form>
</body>
</html>

  recorded_at: Mon, 18 Jul 2022 02:36:00 GMT
recorded_with: VCR 6.1.0
